<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SummerTown</title>
  
  
  <link href="https://jiaopucun.com/atom.xml" rel="self"/>
  
  <link href="https://jiaopucun.com/"/>
  <updated>2024-02-25T14:44:20.406Z</updated>
  <id>https://jiaopucun.com/</id>
  
  <author>
    <name>rainyjune</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to disable Windows Defender</title>
    <link href="https://jiaopucun.com/2024/02/25/how-to-disable-windows-defender/"/>
    <id>https://jiaopucun.com/2024/02/25/how-to-disable-windows-defender/</id>
    <published>2024-02-25T14:32:29.000Z</published>
    <updated>2024-02-25T14:44:20.406Z</updated>
    
    <content type="html"><![CDATA[<p>One of the solutions is to rename the registry key <code>HKLM\SYSTEM\CurrentControlSet\Services\WinDefend</code> to <code>HKLM\SYSTEM\CurrentControlSet\Services\WinDefend-BLOCKED</code> (for example).<br>To learn how, read on.</p><h2 id="Renaming-the-registry-key-requires-a-restart-in-Safe-mode"><a href="#Renaming-the-registry-key-requires-a-restart-in-Safe-mode" class="headerlink" title="Renaming the registry key requires a restart in Safe mode"></a>Renaming the registry key requires a restart in Safe mode</h2><p>As far as I know, the registry key <code>HKLM\SYSTEM\CurrentControlSet\Services\WinDefend</code> cannot be renamed starting windows normally.</p><p>To start in <em>Safe mode</em>, press <code>WinKey</code> + <code>R</code>, type <code>msconfig</code> and hit <code>Enter</code>.</p><p>In the <strong>System Configuration</strong> window that opens, click the <strong>Boot</strong> tab, and then check <strong>Safe boot</strong> as shown in the screenshot below. Click <code>Apply</code> and then press <code>WinKey</code> + <code>x</code> followed by <code>u</code> and <code>u</code> to shut down. Once the computer has turned off, press the physical power button to turn it on again.</p><p>This will start your computer in <em>Safe mode</em>.</p><p><img src="/2024/02/25/how-to-disable-windows-defender/sysconfig.png"></p><h2 id="In-Safe-mode-rename-the-registry-key"><a href="#In-Safe-mode-rename-the-registry-key" class="headerlink" title="In Safe mode, rename the registry key"></a>In Safe mode, rename the registry key</h2><p>Once you have entered <em>Safe mode</em>, open the registry editor – press <code>WinKey</code> + <code>R</code>, type <code>regedit</code> and hit <code>Enter</code>.</p><p>Right-click the <code>HKLM\SYSTEM\CurrentControlSet\Services\WinDefend</code> key and rename it to <code>WinDefend-BLOCKED</code>.</p><p><img src="/2024/02/25/how-to-disable-windows-defender/regedit2.png"></p><p>That’s it!</p><p>All that remains is to leave the Safe mode and restart normally. Use the same procedure as before (<code>msconfig</code>) – but this time uncheck <strong>Safe boot</strong> before restarting.</p><h2 id="From"><a href="#From" class="headerlink" title="From:"></a>From:</h2><ul><li><a href="https://superuser.com/questions/1698370/how-to-disable-windows-defender">https://superuser.com/questions/1698370/how-to-disable-windows-defender</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;One of the solutions is to rename the registry key &lt;code&gt;HKLM\SYSTEM\CurrentControlSet\Services\WinDefend&lt;/code&gt; to &lt;code&gt;HKLM\SYSTEM\Cur</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Create a Hapi Server with Knex and MySQL</title>
    <link href="https://jiaopucun.com/2024/02/22/create-a-hapi-server-with-knex-and-mysql/"/>
    <id>https://jiaopucun.com/2024/02/22/create-a-hapi-server-with-knex-and-mysql/</id>
    <published>2024-02-22T07:37:11.000Z</published>
    <updated>2024-02-25T14:03:27.614Z</updated>
    
    <content type="html"><![CDATA[<p>In this article I am going to show you how to build a simple API server with <a href="https://hapi.dev/">hapi</a> and MySQL. I am using <a href="https://knexjs.org/">Knex</a> as a SQL query builder. And in order to pass the database instance to the request object, I use <a href="https://hapi.dev/api/?v=21.3.3#-serverdecorations">server decorations property</a>. Rest of the code consists of a simple procedure explained here in detail. To see it in action follow the steps below:</p><ol><li>Setup the project and install dependencies:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> myServer</span><br><span class="line"><span class="built_in">cd</span> myServer</span><br><span class="line">npm -y init</span><br></pre></td></tr></table></figure><ol start="2"><li>Install dependencies:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @hapi/hapi mysql2 knex</span><br></pre></td></tr></table></figure><ol start="3"><li>Create a file named <code>server.js</code> with the contents below:</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hapi = <span class="built_in">require</span>(<span class="string">&quot;@hapi/hapi&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> knex = <span class="built_in">require</span>(<span class="string">&quot;knex&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Controller function for &#x27;/users&#x27; route</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// We can access our database over request object</span></span><br><span class="line">  <span class="keyword">return</span> req.<span class="property">database</span>.<span class="property">schema</span>.<span class="title function_">hasTable</span>(<span class="string">&quot;users&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">exists</span>) &#123;</span><br><span class="line">    <span class="comment">// Check if users table exists in the database and return the JSON object below</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">doesTableExist</span>: exists,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Define server with its options</span></span><br><span class="line">  <span class="keyword">const</span> server = hapi.<span class="title function_">server</span>(&#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Define routes array</span></span><br><span class="line">  <span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>, <span class="comment">// Method of the route</span></span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/doesTableExist&quot;</span>, <span class="comment">// Path of the route</span></span><br><span class="line">      <span class="attr">handler</span>: test, <span class="comment">// Handler aka controller of the route</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  server.<span class="title function_">route</span>(routes);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create a database instance</span></span><br><span class="line">  <span class="keyword">const</span> database = <span class="title function_">knex</span>(&#123;</span><br><span class="line">    <span class="attr">client</span>: <span class="string">&quot;mysql2&quot;</span>, <span class="comment">// Database client</span></span><br><span class="line">    <span class="attr">connection</span>: &#123;</span><br><span class="line">      <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">      <span class="attr">user</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">      <span class="attr">database</span>: <span class="string">&quot;myDatabase&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Attach database instance to request object under the name of &#x27;database&#x27;</span></span><br><span class="line">  server.<span class="title function_">decorate</span>(<span class="string">&quot;request&quot;</span>, <span class="string">&quot;database&quot;</span>, database);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize the server</span></span><br><span class="line">  <span class="keyword">await</span> server.<span class="title function_">start</span>();</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Running`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">run</span>();</span><br></pre></td></tr></table></figure><ol start="4"><li><p>Configure and run your MySQL server and modify database instance with proper values(host, user, password, database). If you want to use another SQL database check out the supported clients <a href="https://knexjs.org/guide/#node-js">here</a> and install the one you need.</p></li><li><p>Run the server with command below:</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure><ol start="6"><li>Check out the route we defined in our code to see it works:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/doesTableExist</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;In this article I am going to show you how to build a simple API server with &lt;a href=&quot;https://hapi.dev/&quot;&gt;hapi&lt;/a&gt; and MySQL. I am using &lt;</summary>
      
    
    
    
    <category term="Backend" scheme="https://jiaopucun.com/categories/Backend/"/>
    
    
    <category term="hapi" scheme="https://jiaopucun.com/tags/hapi/"/>
    
    <category term="MySQL" scheme="https://jiaopucun.com/tags/MySQL/"/>
    
    <category term="Knex" scheme="https://jiaopucun.com/tags/Knex/"/>
    
  </entry>
  
  <entry>
    <title>Test React Custom Hooks with Jest and Testing Library</title>
    <link href="https://jiaopucun.com/2024/02/01/test-react-custom-hooks-with-jest-and-testing-library/"/>
    <id>https://jiaopucun.com/2024/02/01/test-react-custom-hooks-with-jest-and-testing-library/</id>
    <published>2024-02-01T14:08:21.000Z</published>
    <updated>2024-02-25T14:03:27.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Prerequisite-Installation"><a href="#Prerequisite-Installation" class="headerlink" title="Prerequisite Installation"></a>Prerequisite Installation</h2><p>Assume that we already installed Jest, Testing Library and SWR.</p><h2 id="Custom-Hook"><a href="#Custom-Hook" class="headerlink" title="Custom Hook"></a>Custom Hook</h2><p>If you don’t know what is the custom hooks we recommend you to read the official document about custom hooks.</p><p>Before we write the test we should have a custom hook first.</p><p>We create a custom hook useIndex to fetch the data from API as follow:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> useSWR <span class="keyword">from</span> <span class="string">&quot;swr&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetcher</span> = (<span class="params">url</span>) =&gt; <span class="title function_">fetch</span>(url).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">useIndex</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, error &#125; = <span class="title function_">useSWR</span>(</span><br><span class="line">    <span class="string">&quot;https://api.github.com/repos/vercel/swr&quot;</span>,</span><br><span class="line">    fetcher</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    data,</span><br><span class="line">    error,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Then we use useIndex as follow:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useIndex &#125; <span class="keyword">from</span> <span class="string">&quot;./hook&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Index</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, error &#125; = <span class="title function_">useIndex</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="string">&quot;An error has occurred.&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!data) <span class="keyword">return</span> <span class="string">&quot;Loading...&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;data.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;data.subscribers_count&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> <span class="tag">&lt;<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;data.stargazers_count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">strong</span>&gt;</span> <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;data.forks_count&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Test-Custom-Hook"><a href="#Test-Custom-Hook" class="headerlink" title="Test Custom Hook"></a>Test Custom Hook</h2><p><strong>Beforehand</strong></p><p>There are one property and one function we need to know in Jest:</p><ul><li>jest.mock – used to spied on the behavior of a function.</li><li>mockImplementation – used as the implementation of the mock.</li></ul><p>There is one function we need to know in Testing Library:</p><ul><li>render – used to render the component virtually.</li></ul><p><strong>Case 1</strong></p><p>The first case is that we want to check “Loading…” is displayed when undefined data is returned from the API.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@testing-library/jest-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@testing-library/jest-dom/extend-expect&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; jest, test &#125; <span class="keyword">from</span> <span class="string">&#x27;@jest/globals&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&#x27;@testing-library/react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useIndex &#125; <span class="keyword">from</span> <span class="string">&#x27;./hook&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">IndexPage</span> <span class="keyword">from</span> <span class="string">&#x27;./index&#x27;</span>;</span><br><span class="line"></span><br><span class="line">jest.<span class="title function_">mock</span>(<span class="string">&#x27;./hook&#x27;</span>, <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">useIndex</span>: jest.<span class="title function_">fn</span>(<span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="literal">undefined</span>,</span><br><span class="line">  &#125;)),</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Assert &quot;Loading...&quot; is displayed when undefined data is returned from the API&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  (useIndex <span class="keyword">as</span> any).<span class="title function_">mockImplementation</span>(<span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">error</span>: <span class="literal">undefined</span>,</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; getByText &#125; = <span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Page</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span>,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">getByText</span>(<span class="string">&#x27;Loading...&#x27;</span>)).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>Case 2</strong></p><p>The second case is that we want to check “An error has occurred.” is displayed when an error is returned from the API.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@testing-library/jest-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@testing-library/jest-dom/extend-expect&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; jest, test &#125; <span class="keyword">from</span> <span class="string">&#x27;@jest/globals&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&#x27;@testing-library/react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useIndex &#125; <span class="keyword">from</span> <span class="string">&#x27;./hook&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">IndexPage</span> <span class="keyword">from</span> <span class="string">&#x27;./index&#x27;</span>;</span><br><span class="line"></span><br><span class="line">jest.<span class="title function_">mock</span>(<span class="string">&#x27;./hook&#x27;</span>, <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">useIndex</span>: jest.<span class="title function_">fn</span>(<span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="literal">undefined</span>,</span><br><span class="line">  &#125;)),</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Assert &quot;An error has occurred.&quot; is displayed when an error is returned from the API&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  (useIndex <span class="keyword">as</span> any).<span class="title function_">mockImplementation</span>(<span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">loadingError</span>: &#123; <span class="attr">response</span>: &#123; <span class="attr">status</span>: <span class="number">500</span> &#125; &#125;,</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; getByText &#125; = <span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Page</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span>,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">getByText</span>(<span class="string">&#x27;An error has occurred.&#x27;</span>)).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>Case 3</strong></p><p>And the third case is that we want to check data is displayed when there is no error.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@testing-library/jest-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@testing-library/jest-dom/extend-expect&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; jest, test &#125; <span class="keyword">from</span> <span class="string">&#x27;@jest/globals&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&#x27;@testing-library/react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useIndex &#125; <span class="keyword">from</span> <span class="string">&#x27;./hook&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">IndexPage</span> <span class="keyword">from</span> <span class="string">&#x27;./index&#x27;</span>;</span><br><span class="line"></span><br><span class="line">jest.<span class="title function_">mock</span>(<span class="string">&#x27;./hook&#x27;</span>, <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">useIndex</span>: jest.<span class="title function_">fn</span>(<span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="literal">undefined</span>,</span><br><span class="line">  &#125;)),</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Assert data is displayed when there is no error&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  (useIndex <span class="keyword">as</span> any).<span class="title function_">mockImplementation</span>(<span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">218115303</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;swr&#x27;</span>,</span><br><span class="line">      <span class="attr">description</span>: <span class="string">&#x27;React Hooks for Data Fetching&#x27;</span>,</span><br><span class="line">      <span class="attr">full_name</span>: <span class="string">&#x27;vercel/swr&#x27;</span>,</span><br><span class="line">      <span class="attr">owner</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">14985020</span>,</span><br><span class="line">        <span class="attr">login</span>: <span class="string">&#x27;vercel&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">loadingError</span>: <span class="literal">undefined</span>,</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; getByText &#125; = <span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Page</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span>,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">getByText</span>(<span class="string">&#x27;swr&#x27;</span>)).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Source: <a href="https://engineering.mobalab.net/2022/12/13/test-react-custom-hooks-with-jest-and-testing-library/">https://engineering.mobalab.net/2022/12/13/test-react-custom-hooks-with-jest-and-testing-library/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Prerequisite-Installation&quot;&gt;&lt;a href=&quot;#Prerequisite-Installation&quot; class=&quot;headerlink&quot; title=&quot;Prerequisite Installation&quot;&gt;&lt;/a&gt;Prerequisit</summary>
      
    
    
    
    <category term="Testing" scheme="https://jiaopucun.com/categories/Testing/"/>
    
    
    <category term="React" scheme="https://jiaopucun.com/tags/React/"/>
    
    <category term="Jest" scheme="https://jiaopucun.com/tags/Jest/"/>
    
  </entry>
  
  <entry>
    <title>Setup Jest with Vite and TypeScript</title>
    <link href="https://jiaopucun.com/2024/01/31/jest-vite-typescript/"/>
    <id>https://jiaopucun.com/2024/01/31/jest-vite-typescript/</id>
    <published>2024-01-31T13:35:38.000Z</published>
    <updated>2024-02-25T14:03:27.756Z</updated>
    
    <content type="html"><![CDATA[<ol><li>First, install <code>jest</code>:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># NPM</span></span><br><span class="line">npm i jest --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># yarn</span></span><br><span class="line">yarn add -D jest</span><br></pre></td></tr></table></figure><ol start="2"><li>Install <code>react-testing-library</code> packages:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm</span></span><br><span class="line">npm i @testing-library/jest-dom @testing-library/react @testing-library/user-event --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># yarn</span></span><br><span class="line">yarn add -D @testing-library/jest-dom @testing-library/react @testing-library/user-event</span><br></pre></td></tr></table></figure><ol start="3"><li>Add a script test to <code>package.json</code>:</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>Install SWC by this command:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm</span></span><br><span class="line">npm i @swc/core @swc/jest --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># yarn</span></span><br><span class="line">yarn add -D @swc/core @swc/jest</span><br></pre></td></tr></table></figure><p>Configure swc by creating <code>.swcrc</code> file at the root of the project:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .swcrc</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;jsc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es2017&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;parser&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;syntax&quot;</span><span class="punctuation">:</span> <span class="string">&quot;typescript&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tsx&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;decorators&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;dynamicImport&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;transform&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;react&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pragma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;React.createElement&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pragmaFrag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;React.Fragment&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;throwIfNamespace&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;development&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;useBuiltins&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;runtime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;automatic&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;hidden&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;jest&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strictMode&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lazy&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Note that if you use JSX, you need to set <code>jsc.transform.react.runtime</code> to <code>automatic</code> (as above). If you use <code>React.createElement</code>, you must set it to <code>classic</code>.</p><ol start="5"><li>Configure Jest</li></ol><p>Create a file <code>jest.config.cjs</code> at the root project:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">roots</span>: [<span class="string">&quot;&lt;rootDir&gt;/src&quot;</span>],</span><br><span class="line">  <span class="attr">collectCoverageFrom</span>: [</span><br><span class="line">    <span class="string">&quot;src/**/*.&#123;js,jsx,ts,tsx&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;!src/**/*.d.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;!src/mocks/**&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">coveragePathIgnorePatterns</span>: [],</span><br><span class="line">  <span class="attr">setupFilesAfterEnv</span>: [<span class="string">&quot;./config/jest/setupTests.js&quot;</span>],</span><br><span class="line">  <span class="attr">testEnvironment</span>: <span class="string">&quot;jsdom&quot;</span>,</span><br><span class="line">  <span class="attr">modulePaths</span>: [<span class="string">&quot;&lt;rootDir&gt;/src&quot;</span>],</span><br><span class="line">  <span class="attr">transform</span>: &#123;</span><br><span class="line">    <span class="string">&quot;^.+\\.(ts|js|tsx|jsx)$&quot;</span>: <span class="string">&quot;@swc/jest&quot;</span>,</span><br><span class="line">    <span class="string">&quot;^.+\\.css$&quot;</span>: <span class="string">&quot;&lt;rootDir&gt;/config/jest/cssTransform.cjs&quot;</span>,</span><br><span class="line">    <span class="string">&quot;^(?!.*\\.(js|jsx|mjs|cjs|ts|tsx|css|json)$)&quot;</span>:</span><br><span class="line">      <span class="string">&quot;&lt;rootDir&gt;/config/jest/fileTransform.cjs&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">transformIgnorePatterns</span>: [</span><br><span class="line">    <span class="string">&quot;[/\\\\]node_modules[/\\\\].+\\.(js|jsx|mjs|cjs|ts|tsx)$&quot;</span>,</span><br><span class="line">    <span class="string">&quot;^.+\\.module\\.(css|sass|scss)$&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">modulePaths</span>: [<span class="string">&quot;&lt;rootDir&gt;/src&quot;</span>],</span><br><span class="line">  <span class="attr">moduleNameMapper</span>: &#123;</span><br><span class="line">    <span class="string">&quot;^react-native$&quot;</span>: <span class="string">&quot;react-native-web&quot;</span>,</span><br><span class="line">    <span class="string">&quot;^.+\\.module\\.(css|sass|scss)$&quot;</span>: <span class="string">&quot;identity-obj-proxy&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">moduleFileExtensions</span>: [</span><br><span class="line">    <span class="comment">// Place tsx and ts to beginning as suggestion from Jest team</span></span><br><span class="line">    <span class="comment">// https://jestjs.io/docs/configuration#modulefileextensions-arraystring</span></span><br><span class="line">    <span class="string">&quot;tsx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;web.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;web.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;web.tsx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    <span class="string">&quot;web.jsx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jsx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;node&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">watchPlugins</span>: [</span><br><span class="line">    <span class="string">&quot;jest-watch-typeahead/filename&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jest-watch-typeahead/testname&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">resetMocks</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="6"><li>Create <code>config/jest/cssTransform.cjs</code> and <code>config/jest/fileTransform.cjs</code> to transform css and files. Those two files are from CRA.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/jest/cssTransform.cjs</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is a custom Jest transformer turning style imports into empty objects.</span></span><br><span class="line"><span class="comment">// http://facebook.github.io/jest/docs/en/webpack.html</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="title function_">process</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;module.exports = &#123;&#125;;&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">getCacheKey</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// The output is always the same.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;cssTransform&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/jest/fileTransform.cjs</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> camelcase = <span class="built_in">require</span>(<span class="string">&quot;camelcase&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is a custom Jest transformer turning file imports into filenames.</span></span><br><span class="line"><span class="comment">// http://facebook.github.io/jest/docs/en/webpack.html</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="title function_">process</span>(<span class="params">src, filename</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> assetFilename = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(path.<span class="title function_">basename</span>(filename));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (filename.<span class="title function_">match</span>(<span class="regexp">/\.svg$/</span>)) &#123;</span><br><span class="line">      <span class="comment">// Based on how SVGR generates a component name:</span></span><br><span class="line">      <span class="comment">// https://github.com/smooth-code/svgr/blob/01b194cf967347d43d4cbe6b434404731b87cf27/packages/core/src/state.js#L6</span></span><br><span class="line">      <span class="keyword">const</span> pascalCaseFilename = <span class="title function_">camelcase</span>(path.<span class="title function_">parse</span>(filename).<span class="property">name</span>, &#123;</span><br><span class="line">        <span class="attr">pascalCase</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">const</span> componentName = <span class="string">`Svg<span class="subst">$&#123;pascalCaseFilename&#125;</span>`</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`const React = require(&#x27;react&#x27;);</span></span><br><span class="line"><span class="string">      module.exports = &#123;</span></span><br><span class="line"><span class="string">        __esModule: true,</span></span><br><span class="line"><span class="string">        default: <span class="subst">$&#123;assetFilename&#125;</span>,</span></span><br><span class="line"><span class="string">        ReactComponent: React.forwardRef(function <span class="subst">$&#123;componentName&#125;</span>(props, ref) &#123;</span></span><br><span class="line"><span class="string">          return &#123;</span></span><br><span class="line"><span class="string">            $$typeof: Symbol.for(&#x27;react.element&#x27;),</span></span><br><span class="line"><span class="string">            type: &#x27;svg&#x27;,</span></span><br><span class="line"><span class="string">            ref: ref,</span></span><br><span class="line"><span class="string">            key: null,</span></span><br><span class="line"><span class="string">            props: Object.assign(&#123;&#125;, props, &#123;</span></span><br><span class="line"><span class="string">              children: <span class="subst">$&#123;assetFilename&#125;</span></span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">          &#125;;</span></span><br><span class="line"><span class="string">        &#125;),</span></span><br><span class="line"><span class="string">      &#125;;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`module.exports = <span class="subst">$&#123;assetFilename&#125;</span>;`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Remember to install <code>camelcase</code> as a dev dependency (do not install version 7, since it dropped the support for CommonJS):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm</span></span><br><span class="line">npm install --save-dev camelcase@6</span><br><span class="line"></span><br><span class="line"><span class="comment"># yarn</span></span><br><span class="line">yarn add -D camelcase@6</span><br></pre></td></tr></table></figure><ol start="7"><li>add ability to search test files and test names in pattern mode. Note that if you using Jest ≤ 26, please install <a href="mailto:&#x6a;&#x65;&#x73;&#x74;&#45;&#x77;&#x61;&#116;&#99;&#104;&#x2d;&#116;&#x79;&#112;&#101;&#x61;&#104;&#101;&#97;&#100;&#64;&#x30;&#x2e;&#x36;&#46;&#53;">&#x6a;&#x65;&#x73;&#x74;&#45;&#x77;&#x61;&#116;&#99;&#104;&#x2d;&#116;&#x79;&#112;&#101;&#x61;&#104;&#101;&#97;&#100;&#64;&#x30;&#x2e;&#x36;&#46;&#53;</a>, if you use Jest ≥ 27, please use jest-watch-typeahead^1.0.0:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm</span></span><br><span class="line">// For jest &lt;= 26</span><br><span class="line">npm i jest-watch-typeahead@0.6.5 --save-dev</span><br><span class="line">// For jest &gt;= 27</span><br><span class="line">npm i jest-watch-typeahead --save-dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># yarn</span></span><br><span class="line">// For jest &lt;= 26</span><br><span class="line">yarn add -D jest-watch-typeahead@0.6.5</span><br><span class="line">// For jest &gt;= 27</span><br><span class="line">yarn add -D jest-watch-typeahead</span><br></pre></td></tr></table></figure><ol start="8"><li>Everything you want to do to your test environment such as extends the jest matchers with @testing-library&#x2F;jest-dom, mock some APIs that’s not implemented in jdom, you can put to <code>config/jest/setupTests.js</code>:</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/jest/setupTests.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@testing-library/jest-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">matchMedia</span> = <span class="function">(<span class="params">query</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">matches</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">media</span>: query,</span><br><span class="line">  <span class="attr">onchange</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">addEventListener</span>: jest.<span class="title function_">fn</span>(),</span><br><span class="line">  <span class="attr">removeEventListener</span>: jest.<span class="title function_">fn</span>(),</span><br><span class="line">  <span class="attr">dispatchEvent</span>: jest.<span class="title function_">fn</span>(),</span><br><span class="line">  <span class="attr">addListener</span>: jest.<span class="title function_">fn</span>(),</span><br><span class="line">  <span class="attr">removeListener</span>: jest.<span class="title function_">fn</span>(),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable constant_">URL</span>, <span class="string">&quot;createObjectURL&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">value</span>: jest.<span class="title function_">fn</span>(),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="9"><li>To get started with the JSDOM test environment, the jest-environment-jsdom package must be installed if it’s not already:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm</span></span><br><span class="line">npm install --save-dev jest-environment-jsdom</span><br><span class="line"></span><br><span class="line"><span class="comment"># yarn</span></span><br><span class="line">yarn add --dev jest-environment-jsdom</span><br></pre></td></tr></table></figure><ol start="10"><li>Install other testing libraries, such as <code>react-test-renderer</code>:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm</span></span><br><span class="line">npm install --save-dev react-test-renderer</span><br><span class="line"></span><br><span class="line"><span class="comment"># yarn</span></span><br><span class="line">yarn add -D react-test-renderer</span><br></pre></td></tr></table></figure><ol start="11"><li>Run this command in your terminal:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm</span></span><br><span class="line">npm <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># yarn</span></span><br><span class="line">yarn <span class="built_in">test</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;First, install &lt;code&gt;jest&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1</summary>
      
    
    
    
    <category term="Testing" scheme="https://jiaopucun.com/categories/Testing/"/>
    
    
    <category term="TypeScript" scheme="https://jiaopucun.com/tags/TypeScript/"/>
    
    <category term="Vite" scheme="https://jiaopucun.com/tags/Vite/"/>
    
    <category term="Jest" scheme="https://jiaopucun.com/tags/Jest/"/>
    
  </entry>
  
  <entry>
    <title>How to create React functional components in TypeScript</title>
    <link href="https://jiaopucun.com/2024/01/30/how-to-create-react-functional-components-in-typescript/"/>
    <id>https://jiaopucun.com/2024/01/30/how-to-create-react-functional-components-in-typescript/</id>
    <published>2024-01-29T16:00:09.000Z</published>
    <updated>2024-02-25T14:03:27.708Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declaring type of props - see &quot;Typing Component Props&quot; for more examples</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AppProps</span> = &#123;</span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;; <span class="comment">/* use `interface` if exporting so that consumers can extend */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Easiest way to declare a Function Component; return type is inferred.</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params">&#123; message &#125;: AppProps</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// you can choose annotate the return type so an error is raised if you accidentally return some other type</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">App</span> = (&#123; message &#125;: <span class="title class_">AppProps</span>): <span class="title class_">React</span>.<span class="property">JSX</span>.<span class="property">Element</span> =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// you can also inline the type declaration; eliminates naming the prop types, but looks repetitive</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params">&#123; message &#125;: &#123; message: <span class="built_in">string</span> &#125;</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Alternatively, you can use `React.FunctionComponent` (or `React.FC`), if you prefer.</span></span><br><span class="line"><span class="comment">// With latest React types and TypeScript 5.1. it&#x27;s mostly a stylistic choice, otherwise discouraged.</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">App</span>: <span class="title class_">React</span>.<span class="property">FunctionComponent</span>&lt;&#123; <span class="attr">message</span>: <span class="built_in">string</span> &#125;&gt; = <span class="function">(<span class="params">&#123; message &#125;</span>) =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>If your component is defined as a regular function with the <code>function</code> keyword, then you cannot use <code>React.FunctionComponent</code> keyword, because TypeScript does not support specify types for function declarations. </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">AppProps</span> &#123;</span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params">&#123;message&#125;: AppProps</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello:&#123;message&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    
    <category term="TypeScript" scheme="https://jiaopucun.com/tags/TypeScript/"/>
    
    <category term="React" scheme="https://jiaopucun.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Debugging Node.js</title>
    <link href="https://jiaopucun.com/2024/01/24/debugging-node-js/"/>
    <id>https://jiaopucun.com/2024/01/24/debugging-node-js/</id>
    <published>2024-01-24T07:52:21.000Z</published>
    <updated>2024-02-25T14:03:27.661Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Adding-the-debugger-keyword-in-your-source-file"><a href="#Adding-the-debugger-keyword-in-your-source-file" class="headerlink" title="Adding the debugger keyword in your source file"></a>Adding the debugger keyword in your source file</h2><p>When a JavaScript application is executed through a debugger, execution halts when the <code>debugger</code> keyword is encountered, and control is passed to the developer.</p><p>For example, in your <code>index.ts</code> file:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">&quot;./calc.js&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> printMessage = (<span class="attr">msg</span>: <span class="built_in">string</span>): <span class="function"><span class="params">void</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Message: <span class="subst">$&#123;msg&#125;</span>`</span>);</span><br><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;Hello, TypeScript&quot;</span>;</span><br><span class="line"><span class="title function_">printMessage</span>(message);</span><br><span class="line"><span class="keyword">debugger</span>;</span><br><span class="line"><span class="keyword">let</span> total = <span class="title function_">sum</span>(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Total: <span class="subst">$&#123;total&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p>There will be no change in the output when the code is executed because Node.js ignores the <code>debugger</code> keyword by default.</p><h2 id="Using-Visual-Studio-Code-for-debugging"><a href="#Using-Visual-Studio-Code-for-debugging" class="headerlink" title="Using Visual Studio Code for debugging"></a>Using Visual Studio Code for debugging</h2><p>To set up the configuration for debugging, select <strong>Add Configuration</strong> from the <strong>Run</strong> menu and select <strong>Node.js</strong> from the list of environments when prompted, as shown in:</p><p><img src="/2024/01/24/debugging-node-js/figure_6-1.png" alt="Selecting the debugger environment"></p><p>The editor will create a <code>.vscode</code> folder in the project and add to it a file called <code>launch.json</code>, which is used to configure the debugger. Change the value of the <code>program</code> property so that the debugger executes the JavaScript code, as<br>shown below:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Launch Program&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;skipFiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;node_internals&gt;/**&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/dist/index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;outFiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;$&#123;workspaceFolder&#125;/**/*.js&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Save the changes to the <code>launch.json</code> file and select <strong>Start Debugging</strong> from the <strong>Run</strong> menu. Visual Studio Code will execute the <code>index.js</code> file under the<br>control of the Node.js debugger. Execution will continue as normal until the <code>debugger</code> statement is reached, at which point execution halts and control is transferred to the debugging pop-up, as shown below:</p><p><img src="/2024/01/24/debugging-node-js/figure_6-2.png" alt="Debugging an application using Visual Studio Code"></p><p>The state of the application is displayed in the sidebar, showing the variables that are set at the point that execution was halted. A standard set of debugging features is available, including setting watches, stepping into and over statements, and resuming execution. The Debug Console window allows JavaScript statements to be executed in the context of the application so that entering a variable name and pressing Return, for example, will return the value assigned to that variable.</p><h2 id="Using-the-remote-Node-js-debugging-feature"><a href="#Using-the-remote-Node-js-debugging-feature" class="headerlink" title="Using the remote Node.js debugging feature"></a>Using the remote Node.js debugging feature</h2><p>The integrated Node.js debugger is useful but awkward to use. The same features can be used remotely using the Google Chrome developer tools feature. First, start Node.js by running the command shown below:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --inspect-brk dist/index.js</span><br></pre></td></tr></table></figure><p>The <code>inspect-brk</code> argument starts the debugger and halts execution immediately. This is required for the example application because it runs and then exits. For applications that start and then enter an indefinite loop, such as a web server, the <code>inspect</code> argument can be used. When it starts, Node.js will produce a message like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Debugger listening on ws://127.0.0.1:9229/e3cf5393-23c8-4393-99a1</span><br><span class="line">For help, see: https://nodejs.org/en/docs/inspector</span><br></pre></td></tr></table></figure><p>The URL in the output is used to connect to the debugger and take control of execution. Open a new Chrome window and navigate to <code>chrome://inspect</code>. Click the <strong>Configure</strong> button and add the IP address and port from the URL from the previous message. For my machine, this is <code>127.0.0.1:9229</code>, as shown below:</p><p><img src="/2024/01/24/debugging-node-js/figure_6-3.png" alt="Configuring Chrome for remote Node.js debugging "></p><p>Click the Done button and wait a moment while Chrome locates the Node.js runtime.<br>Once it has been located, it will appear in the <strong>Remote Target</strong> list, as shown below:</p><p><img src="/2024/01/24/debugging-node-js/06-04.png" alt="Discovering the Node.js runtime"></p><p>Click the <strong>inspect</strong> link to open a new Chrome developer tools window that is connected to the Node.js runtime. Control of execution is handled by the standard developer tool buttons, and resuming execution will let the runtime proceed until the debugger statement is reached. The initial view of the code in the debugger window will be of the JavaScript code, but the source maps will be used once execution resumes, as shown below:</p><p><img src="/2024/01/24/debugging-node-js/06-05.png" alt="Debugging with the Chrome developer tools"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://livebook.manning.com/book/essential-typescript-5-third-edition/chapter-6/57">https://livebook.manning.com/book/essential-typescript-5-third-edition/chapter-6/57</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Adding-the-debugger-keyword-in-your-source-file&quot;&gt;&lt;a href=&quot;#Adding-the-debugger-keyword-in-your-source-file&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="Debugging" scheme="https://jiaopucun.com/categories/Debugging/"/>
    
    
    <category term="Node" scheme="https://jiaopucun.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Parsing Error: Cannot read file &#39;tsconfig.json&#39;</title>
    <link href="https://jiaopucun.com/2024/01/24/typescript-parsing-error-cannot-read-file/"/>
    <id>https://jiaopucun.com/2024/01/24/typescript-parsing-error-cannot-read-file/</id>
    <published>2024-01-24T07:40:29.000Z</published>
    <updated>2024-02-25T14:03:27.786Z</updated>
    
    <content type="html"><![CDATA[<p>To solve the error “Parsing Error: Cannot read file ‘tsconfig.json’”, update your <code>.eslintrc.js</code> file to set the <code>tsconfigRootDir</code> option to <code>__dirname</code> to force ESLint to resolve your project configuration relative to the folder where <code>.eslintrc.js</code> is located.</p><p>Note: If there is a <code>.eslintrc</code> file instead in your application, you should transform it into <code>.eslintrc.js</code> first.</p><p>Open your <code>.eslintrc.js</code> file and add or update your <code>parserOptions</code> object to look as follows.</p><p>.eslintrc.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">project</span>: <span class="string">&quot;tsconfig.json&quot;</span>,</span><br><span class="line">    <span class="attr">tsconfigRootDir</span>: __dirname,</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ... rest</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>By setting the <a href="https://eslint.org/docs/user-guide/configuring/language-options#specifying-parser-options">parserOptions</a> object we tell ESLint which JavaScript language options we want to support.</p><p>The <code>sourceType</code> option is set to <code>module</code> to indicate that we want to support ES6 Modules.</p><p>The <code>tsconfigRootDir</code> option is set to <code>__dirname</code>, so ESLint resolves our project config relative to the <code>.eslintrc.js</code> file.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;To solve the error “Parsing Error: Cannot read file ‘tsconfig.json’”, update your &lt;code&gt;.eslintrc.js&lt;/code&gt; file to set the &lt;code&gt;tsconfi</summary>
      
    
    
    
    
    <category term="TypeScript" scheme="https://jiaopucun.com/tags/TypeScript/"/>
    
    <category term="ESLint" scheme="https://jiaopucun.com/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>Modules in TypeScript</title>
    <link href="https://jiaopucun.com/2024/01/22/modules-in-typescript/"/>
    <id>https://jiaopucun.com/2024/01/22/modules-in-typescript/</id>
    <published>2024-01-22T07:01:32.000Z</published>
    <updated>2024-02-25T14:03:27.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="package-json-“type”-field"><a href="#package-json-“type”-field" class="headerlink" title="package.json “type” field"></a>package.json “type” field</h2><p>The <code>&quot;type&quot;</code> field defines the module format that Node.js uses for all <code>.js</code> files that have that <code>package.json</code> file as their nearest parent.</p><p>If the nearest parent <code>package.json</code> lacks a <code>&quot;type&quot;</code> field, or contains <code>&quot;type&quot;: &quot;commonjs&quot;</code>, <code>.js</code> files are treated as CommonJS. If the volume root is reached and no <code>package.json</code> is found, <code>.js</code> files are treated as CommonJS. In short, <strong>all <code>.js</code> files are treated as CommonJS modules unless <code>&quot;type&quot;: &quot;module&quot;</code> is defined in <code>package.json</code></strong>.</p><p>Node.js uses CommonJS by default, you need to enable the ES module support by setting <code>&quot;type&quot;: &quot;module&quot;</code> in your <code>package.json</code> file.</p><p>Suppose there are two <code>.js</code> files in your app and they are both written in ES module, the first <code>util.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">printMessage</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The message is: &quot;</span> + msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And you import it in the main file <code>index.js</code>,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; printMessage &#125; <span class="keyword">from</span> <span class="string">&quot;./util.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">printMessage</span>(<span class="string">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>Then if you try to run this file on Node.js, you might encounter an error.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure><p>Error:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import printMessage from &#x27;./util.js&#x27;;</span><br><span class="line">^^^^^^</span><br><span class="line"></span><br><span class="line">SyntaxError: Cannot use import statement outside a module</span><br></pre></td></tr></table></figure><p>There are two ways to fix this problem. You could rewrite your files into CommonJS format, the other way is to add <code>&quot;type&quot;: &quot;module&quot;</code> in your <code>package.json</code> file, which is much easier.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The message is: Hello</span><br></pre></td></tr></table></figure><p>TypeScript also consult the nearest <code>package.json</code> file to determine the module format when a file with a <code>.js</code> or <code>.ts</code> extension.</p><h2 id="TSConfig-Option-module-field"><a href="#TSConfig-Option-module-field" class="headerlink" title="TSConfig Option: module field"></a>TSConfig Option: <code>module</code> field</h2><p>This is a TypeScript compiler option field which can be found in the <code>tsconfig.json</code> file. It sets what module code is generated.</p><p>Allowed values:</p><ul><li>none</li><li>commonjs</li><li>amd</li><li>umd</li><li>system</li><li>es6&#x2F;es2015</li><li>es2020</li><li>es2022</li><li>esnext</li><li>node16</li><li>nodenext</li></ul><p>You very likely want <code>&quot;nodenext&quot;</code> for modern Node.js projects, <code>&quot;esnext&quot;</code> for others.</p><p>Here’s some example output for this file:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @filename: index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; valueOfPi &#125; <span class="keyword">from</span> <span class="string">&quot;./constants&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> twoPi = valueOfPi * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><strong>CommonJS</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="string">&quot;__esModule&quot;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">twoPi</span> = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> constants_1 = <span class="built_in">require</span>(<span class="string">&quot;./constants&quot;</span>);</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">twoPi</span> = constants_1.<span class="property">valueOfPi</span> * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><strong>UMD</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">factory</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">module</span> === <span class="string">&quot;object&quot;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="variable language_">module</span>.<span class="property">exports</span> === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> v = <span class="title function_">factory</span>(<span class="built_in">require</span>, <span class="built_in">exports</span>);</span><br><span class="line">    <span class="keyword">if</span> (v !== <span class="literal">undefined</span>) <span class="variable language_">module</span>.<span class="property">exports</span> = v;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">&quot;function&quot;</span> &amp;&amp; define.<span class="property">amd</span>) &#123;</span><br><span class="line">    <span class="title function_">define</span>([<span class="string">&quot;require&quot;</span>, <span class="string">&quot;exports&quot;</span>, <span class="string">&quot;./constants&quot;</span>], factory);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="keyword">function</span> (<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span></span>) &#123;</span><br><span class="line">  <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="string">&quot;__esModule&quot;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  <span class="built_in">exports</span>.<span class="property">twoPi</span> = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> constants_1 = <span class="built_in">require</span>(<span class="string">&quot;./constants&quot;</span>);</span><br><span class="line">  <span class="built_in">exports</span>.<span class="property">twoPi</span> = constants_1.<span class="property">valueOfPi</span> * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>AMD</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">define</span>([<span class="string">&quot;require&quot;</span>, <span class="string">&quot;exports&quot;</span>, <span class="string">&quot;./constants&quot;</span>], <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">  <span class="built_in">require</span>,</span></span><br><span class="line"><span class="params">  <span class="built_in">exports</span>,</span></span><br><span class="line"><span class="params">  constants_1</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="string">&quot;__esModule&quot;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  <span class="built_in">exports</span>.<span class="property">twoPi</span> = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">exports</span>.<span class="property">twoPi</span> = constants_1.<span class="property">valueOfPi</span> * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>System</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">System</span>.<span class="title function_">register</span>([<span class="string">&quot;./constants&quot;</span>], <span class="keyword">function</span> (<span class="params">exports_1, context_1</span>) &#123;</span><br><span class="line">  <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> constants_1, twoPi;</span><br><span class="line">  <span class="keyword">var</span> __moduleName = context_1 &amp;&amp; context_1.<span class="property">id</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">setters</span>: [</span><br><span class="line">      <span class="keyword">function</span> (<span class="params">constants_1_1</span>) &#123;</span><br><span class="line">        constants_1 = constants_1_1;</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">execute</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      exports_1(<span class="string">&quot;twoPi&quot;</span>, (twoPi = constants_1.<span class="property">valueOfPi</span> * <span class="number">2</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>ESNext</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; valueOfPi &#125; <span class="keyword">from</span> <span class="string">&quot;./constants&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> twoPi = valueOfPi * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><strong>ES2015&#x2F;ES6&#x2F;ES2020&#x2F;ES2022</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; valueOfPi &#125; <span class="keyword">from</span> <span class="string">&quot;./constants&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> twoPi = valueOfPi * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><strong>node16&#x2F;nodenext</strong></p><p>The emitted JavaScript uses either <code>CommonJS</code> or <code>ES2020</code> output depending on the file extension and the value of the <code>type</code> setting in the nearest <code>package.json</code>. If the value is <code>module</code>, the format is <code>ES2020</code>, otherwise <code>CommonJS</code>.</p><p><strong>None</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="string">&quot;__esModule&quot;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">twoPi</span> = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> constants_1 = <span class="built_in">require</span>(<span class="string">&quot;./constants&quot;</span>);</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">twoPi</span> = constants_1.<span class="property">valueOfPi</span> * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="Include-“-js”-extension-for-custom-modules"><a href="#Include-“-js”-extension-for-custom-modules" class="headerlink" title="Include “.js” extension for custom modules"></a>Include “.js” extension for custom modules</h2><p>If you want to use the official TypeScript compiler to generate JavaScript, you have to add the extension because</p><ol><li><a href="https://github.com/nodejs/node/issues/46006">Node.js refuses to allow extensionless relative imports</a></li><li><a href="https://github.com/microsoft/TypeScript/issues/16577">TypeScript refuses to add import extensions at compile time</a></li></ol><p>If you want or need to write extensionless imports in TypeScript, you need a bundler or an alternative build tool that can add the <code>.js</code> extensions. For example, you can transpile TypeScript to JavaScript using Babel and <a href="https://codeberg.org/karl/babel-plugin-add-import-extension.git">babel-plugin-add-import-extension</a>.</p><p>However, you’ll still need TypeScript (<code>tsc</code>) itself to do type checking and generate type declaration files, so you’ll need a <code>tsconfig.json</code> with <code>compilerOptions.moduleResolution</code> set to <code>&quot;Bundler&quot;</code>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;package-json-“type”-field&quot;&gt;&lt;a href=&quot;#package-json-“type”-field&quot; class=&quot;headerlink&quot; title=&quot;package.json “type” field&quot;&gt;&lt;/a&gt;package.jso</summary>
      
    
    
    
    
    <category term="TypeScript" scheme="https://jiaopucun.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Getting started with SWR</title>
    <link href="https://jiaopucun.com/2024/01/17/getting-started-with-swr/"/>
    <id>https://jiaopucun.com/2024/01/17/getting-started-with-swr/</id>
    <published>2024-01-17T02:11:39.000Z</published>
    <updated>2024-02-25T14:03:27.676Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://swr.vercel.app/">SWR</a> is a popular library which provides React Hooks for Data Fetching.</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Inside your React project directory, run the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i swr</span><br></pre></td></tr></table></figure><p>If you’re using yarn:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add swr</span><br></pre></td></tr></table></figure><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>For normal RESTful APIs with JSON data, first you need to create a fetcher function, which is just a wrapper of the native fetch:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fetcher</span> = (<span class="params">...args</span>) =&gt; <span class="title function_">fetch</span>(...args).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>());</span><br></pre></td></tr></table></figure><p>If you’re using Axios:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetcher</span> = (<span class="params">url</span>) =&gt; axios.<span class="title function_">get</span>(url).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="property">data</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, error &#125; = <span class="title function_">useSWR</span>(<span class="string">&quot;/api/data&quot;</span>, fetcher);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Normally, there’re 3 possible states of a request: “loading”, “ready”, or “error”. You can use the value of <code>data</code>, <code>error</code> and <code>isLoading</code> to determine the current state of the request, and return the corresponding UI.</p><h2 id="Make-It-Reusable"><a href="#Make-It-Reusable" class="headerlink" title="Make It Reusable"></a>Make It Reusable</h2><p>When building a web app, you might need to reuse the data in many places of the UI. It is incredibly easy to create reusable data hooks on top of SWR:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useUser</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, error, isLoading &#125; = <span class="title function_">useSWR</span>(<span class="string">`/api/user/<span class="subst">$&#123;id&#125;</span>`</span>, fetcher);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">user</span>: data,</span><br><span class="line">    isLoading,</span><br><span class="line">    <span class="attr">isError</span>: error,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And use it in your components:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Avatar</span>(<span class="params">&#123; id &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; user, isLoading, isError &#125; = <span class="title function_">useUser</span>(id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isLoading) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Spinner</span> /&gt;</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (isError) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Error</span> /&gt;</span></span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;user.avatar&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>By adopting this pattern, you can forget about fetching data in the imperative way: start the request, update the loading state, and return the final result. Instead, your code is more declarative: you just need to specify what data is used by the component.</p><iframe src="https://codesandbox.io/embed/lrd84n?view=Editor+%2B+Preview&module=%2Fsrc%2FApp.js"  style="width:100%; height: 500px; border:0; border-radius: 4px; overflow:hidden;"  title="kind-matsumoto"  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; data, error, isLoading, isValidating, mutate &#125; = <span class="title function_">useSWR</span>(</span><br><span class="line">  key,</span><br><span class="line">  fetcher,</span><br><span class="line">  options</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>The <code>key</code> is required, it’s a unique key string for the request (or a function &#x2F; array &#x2F; null). The rest arguments are optional.</p><p>You can set initial data to be returned when the request is loading with the <code>fallbackData</code> attribute in the options.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> useSWR <span class="keyword">from</span> <span class="string">&quot;swr&quot;</span>;</span><br><span class="line"><span class="comment">// The inital data</span></span><br><span class="line"><span class="keyword">const</span> initalState = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetcher</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetch</span>(...args).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useUser</span>(<span class="params">username</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, error, isLoading &#125; = <span class="title function_">useSWR</span>(</span><br><span class="line">    <span class="string">`https://api.github.com/users/<span class="subst">$&#123;username&#125;</span>`</span>,</span><br><span class="line">    fetcher,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// Set it as `fallbackData`</span></span><br><span class="line">      <span class="attr">fallbackData</span>: initalState,</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">user</span>: data,</span><br><span class="line">    isLoading,</span><br><span class="line">    <span class="attr">isError</span>: error,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; user, isLoading, isError &#125; = <span class="title function_">useUser</span>(<span class="string">&quot;rainyjune&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;user.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Start editing to see some magic happen!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Demo:</p><iframe src="https://codesandbox.io/embed/8rkpkp?view=Editor+%2B+Preview&module=%2Fsrc%2FApp.js"  style="width:100%; height: 500px; border:0; border-radius: 4px; overflow:hidden;"  title="dawn-river"  allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"  sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://swr.vercel.app/&quot;&gt;SWR&lt;/a&gt; is a popular library which provides React Hooks for Data Fetching.&lt;/p&gt;
&lt;h2 id=&quot;Installation&quot;&gt;&lt;a</summary>
      
    
    
    
    
    <category term="SWR" scheme="https://jiaopucun.com/tags/SWR/"/>
    
  </entry>
  
  <entry>
    <title>Middleware with Async Thunk</title>
    <link href="https://jiaopucun.com/2024/01/14/middleware-with-async-thunk/"/>
    <id>https://jiaopucun.com/2024/01/14/middleware-with-async-thunk/</id>
    <published>2024-01-14T13:36:46.000Z</published>
    <updated>2024-02-25T14:03:27.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="useState-vs-useReducer"><a href="#useState-vs-useReducer" class="headerlink" title="useState vs useReducer"></a>useState vs useReducer</h2><p>We can use the <code>useState</code> to internally maintain state of a react component but as soon the internal state gets complex the number of <code>useState</code> can get overwhelming. For this we can use the <code>useReducer</code>.</p><h2 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h2><p>For the sake of learning middleware to handle async operations the example has been kept simple. The following example is taken from the official react documentation. It has two buttons one is used to increment and other is used to decrement. The application uses <code>useReducer</code> to maintain its state.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;increment&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;decrement&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initialState);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      Count: &#123;state.count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;decrement&quot; &#125;)&#125;&gt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;increment&quot; &#125;)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lets suppose that on the button click we want to call an api, and increment it by the value from returned the api. I know its a superficial example but the point is to demonstrate how to handle <code>async</code> in <code>useReducer</code></p><p>As we know that reducers are pure function and can not have any side effect so we can not perform the api call inside the <code>useReducer</code>. To avoid this we can use <code>thunks</code></p><h2 id="Thunk"><a href="#Thunk" class="headerlink" title="Thunk"></a>Thunk</h2><p>What is a thunk? thunk is function which is returned by another function. Its more easier to explain it via code:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">notAThunk</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">aThunk</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Thunk is a piece of code encapsulated inside a function which can be called at a later time.</p><p>So instead of passing an object to the dispatch function we will pass a function. This passed function is <code>thunk</code>, and will be executed at a later time by the <code>middleware</code>. lets modify our code so it can handle the <code>thunk</code> via <code>middleware</code>. Inside Counter we will replace:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initialState);</span><br></pre></td></tr></table></figure><p>with the following code:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, orignalDispatch] = <span class="title function_">useReducer</span>(reducer, initialState);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">dispatch</span> = (<span class="params">action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isFunction</span>(action)) &#123;</span><br><span class="line">    <span class="title function_">action</span>(orignalDispatch);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">orignalDispatch</span>(action);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>We have renamed the <code>dispatch</code> returned by <code>useReducer</code> to <code>orignalDispatch</code>. In essence we have created a middleware. As the following code is executed whenever we dispatach an action and before the action is received by the reducer</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_">isFunction</span>(action)) &#123;</span><br><span class="line">  <span class="title function_">action</span>(orignalDispatch);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title function_">orignalDispatch</span>(action);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We have created a new function called <code>dispatch</code>. Our implementation first checks if the passed <code>action</code> is a type of function if it is a function then it is called with <code>orignalDispatch</code> as a arugment, otherwise we simply pass the action to <code>orignalDispatch</code>.</p><p>Now lets simulate a fake api call:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">asynIncrementApi</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() \* <span class="number">10</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>asynIncrementApi</code> returns a promise with a value between 1 to 10 after atleast <code>1000ms</code> have passed.</p><p>With api in place, Lets add a new button <code>Async Increment</code> to the <code>Counter</code>.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Count</span>: &#123;state.<span class="property">count</span>&#125;</span><br><span class="line">&lt;button onClick=&#123;<span class="function">() =&gt;</span> <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;decrement&quot;</span> &#125;)&#125;&gt;-&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;increment&quot; &#125;)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>Async Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Lets hook up <code>Async Increment</code> with event handler.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;button</span><br><span class="line">  onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">asynIncrementApi</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">        <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;increment_async&quot;</span>,</span><br><span class="line">          <span class="attr">count</span>: value,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  &#123;<span class="string">&quot; &quot;</span>&#125;</span><br><span class="line">  <span class="title class_">Async</span> <span class="title class_">Increment</span> &gt;&#123;<span class="string">&quot; &quot;</span>&#125;</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>When user clicks on the <code>Async Increment</code> button, its event handler is executed which makes a call to dispatch function. The <code>action</code> to dispatch function is our <code>thunk</code>.</p><p>In the above example following function is the <code>thunk</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">() =&gt; &#123;</span><br><span class="line">  <span class="title function_">asynIncrementApi</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;increment_async&quot;</span>,</span><br><span class="line">      <span class="attr">count</span>: value,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Inside the dispatch function our check <code>isFunction</code> returns <code>true</code> and executes the <code>thunk</code>. In this case our <code>thunk</code> ignores the parameters passed to it. It is because the <code>dispatch</code> is in our scope but there might be some case where the <code>dispatch</code> might not be in scope (like if code is outside the component or in a separate file) so its better to pass it.</p><p>Inside our <code>thunk</code> the backend api is called and as soon the promise returned by the api is resolved we dispatch a new action with type of <code>increment_async</code> and <code>count</code> with value returned from the backend.</p><p>This is all which is required to handle the asyc actions. Now lets update our <code>reducer</code> to handle the <code>increment_async</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&quot;increment_async&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + action.<span class="property">count</span> &#125;;</span><br></pre></td></tr></table></figure><p>Below is all the code and here is link to the <a href="https://codesandbox.io/s/pedantic-wozniak-8v27s?file=/src/App.js:387-464">codesandbox</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isFunction</span>(<span class="params">functionToCheck</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    functionToCheck &amp;&amp; &#123;&#125;.<span class="property">toString</span>.<span class="title function_">call</span>(functionToCheck) === <span class="string">&quot;[object Function]&quot;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(action.<span class="property">type</span>);</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;increment&quot;</span>:</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> &#125;;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;increment_async&quot;</span>:</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + action.<span class="property">count</span> &#125;;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;decrement&quot;</span>:</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span> &#125;;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">asynIncrementApi</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() \* <span class="number">10</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> [state, orignalDispatch] = <span class="title function_">useReducer</span>(reducer, initialState);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">dispatch</span> = (<span class="params">action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isFunction</span>(action)) &#123;</span><br><span class="line">    <span class="title function_">action</span>(orignalDispatch);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">orignalDispatch</span>(action);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    Count: &#123;state.count&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;decrement&quot; &#125;)&#125;&gt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;increment&quot; &#125;)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">      dispatch(() =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        asynIncrementApi().then((value) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          dispatch(&#123;</span></span><br><span class="line"><span class="language-xml">            type: &quot;increment_async&quot;,</span></span><br><span class="line"><span class="language-xml">            count: value</span></span><br><span class="line"><span class="language-xml">          &#125;);</span></span><br><span class="line"><span class="language-xml">        &#125;);</span></span><br><span class="line"><span class="language-xml">      &#125;);</span></span><br><span class="line"><span class="language-xml">    &#125;&#125;&gt;</span></span><br><span class="line"><span class="language-xml">    Async Increment</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Counter</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Refactor-the-middleware-into-a-separate-hook"><a href="#Refactor-the-middleware-into-a-separate-hook" class="headerlink" title="Refactor the middleware into a separate hook"></a>Refactor the middleware into a separate hook</h2><p>Lets create a new hook which encapsulates the logic of creating reducer and middleware into a separate hook.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">useThunkReducer</span> = (<span class="params">reducer, initialState</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initialState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> enhancedDispatch = <span class="title function_">useCallback</span>(</span><br><span class="line">    <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">action</span>(dispatch);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">dispatch</span>(action);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    [dispatch]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [state, enhancedDispatch];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Now we use <code>useThunkReducer</code> instead of <code>useReducer</code>. This example was inspired from <a href="https://github.com/FrontendMasters/pure-react-state-management">here</a>.</p><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p><a href="https://www.hassamali.com/posts/middleware-with-async-thunk">https://www.hassamali.com/posts/middleware-with-async-thunk</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;useState-vs-useReducer&quot;&gt;&lt;a href=&quot;#useState-vs-useReducer&quot; class=&quot;headerlink&quot; title=&quot;useState vs useReducer&quot;&gt;&lt;/a&gt;useState vs useReduc</summary>
      
    
    
    
    <category term="Frontend" scheme="https://jiaopucun.com/categories/Frontend/"/>
    
    
    <category term="React" scheme="https://jiaopucun.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>How to use images with Vite and Vue</title>
    <link href="https://jiaopucun.com/2024/01/10/how-to-use-images-with-vite-and-vue/"/>
    <id>https://jiaopucun.com/2024/01/10/how-to-use-images-with-vite-and-vue/</id>
    <published>2024-01-10T14:19:55.000Z</published>
    <updated>2024-02-25T14:03:27.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>You’ve basically got 3 different ways to do it. Put images in the public folder and reference them normally (just a forward slash and the image name). Import images directly into your view&#x2F;project and use them in your template. Use the native ESM <code>import.meta.url</code> to assign images to variables, or create a function to use multiple images more easily. I’ll follow up at the end about referencing images from an API.</p><h2 id="1-Public-folder"><a href="#1-Public-folder" class="headerlink" title="1. Public folder"></a>1. Public folder</h2><p>The simplest solution is to put your assets into the <a href="https://vitejs.dev/guide/assets.html#the-public-directory">public folder</a>, and then reference them as you normally would.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// add circle.svg to the public directory</span><br><span class="line">// public images are served at the root path so you only need &#x27;/&#x27; + your image path</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;/circle.svg&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="2-Import-files-individually"><a href="#2-Import-files-individually" class="headerlink" title="2. Import files individually"></a>2. Import files individually</h2><p>You can import each image you need as a variable that can then be referenced where you need it. The obvious drawback to this is if you have multiple images.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import imgUrl from &quot;./assets/img.png&quot;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;img :src=&quot;imgUrl&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="3-Import-images-with-import-meta-url"><a href="#3-Import-images-with-import-meta-url" class="headerlink" title="3. Import images with import.meta.url"></a>3. Import images with import.meta.url</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import.meta">import.meta.url</a> is a native ESM feature that exposes the current module’s URL. Combining it with the native <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL">URL constructor</a>, we can obtain the full, resolved URL of a static asset using relative path from a JavaScript module:</p><p>More on this from the Vite docs <a href="https://vitejs.dev/guide/assets.html#new-url-url-import-meta-url">here</a>.</p><ol><li>Similar to example #2, you assign your image path to a constant and then use it in your template. Be aware you have to write out the entire path to the file i.e. <code>./assets/img.png</code>:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const imgUrl = new URL(&quot;./assets/img.png&quot;, import.meta.url).href;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;img :src=&quot;imgUrl&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>Dynamically import images using a function and template literals</li></ol><p>I’ve found this to be the most useful approach, especially with multiple images.</p><p>Be aware, in the Vite docs, the <code>./dir/</code> part of the path is a placeholder — update it to the path and folder of your project.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// from the docs</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getImageUrl</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">`./dir/<span class="subst">$&#123;name&#125;</span>.png`</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>).<span class="property">href</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// updated with your project&#x27;s assets folder setup</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getImageUrl</span>(<span class="params">name, ext</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">`../assets/img/<span class="subst">$&#123;name&#125;</span>.png`</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>).<span class="property">href</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// works with svg and other file formats as well</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getImageUrl</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">`../assets/img/<span class="subst">$&#123;name&#125;</span>.svg`</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>).<span class="property">href</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>You can also define a second parameter in the function so the image extension can be dynamic as well i.e. <code>.jpg</code>, <code>.png</code>, <code>.svg</code> etc.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// where &#x27;name&#x27; is the actual name of the file, and &#x27;ext&#x27; is the extension</span><br><span class="line">// i.e. myjpg.jpg</span><br><span class="line"></span><br><span class="line">function getImageUrl(name, ext) &#123;</span><br><span class="line">  return new URL(`./assets/img/$&#123;name&#125;.$&#123;ext&#125;`, import.meta.url).href;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;img :src=&quot;getImageUrl(&#x27;myjpg&#x27;, &#x27;jpg&#x27;)&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">  &lt;img :src=&quot;getImageUrl(&#x27;mysvg&#x27;, &#x27;svg&#x27;)&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="4-Using-dynamic-images-from-an-API"><a href="#4-Using-dynamic-images-from-an-API" class="headerlink" title="4. Using dynamic images from an API"></a>4. Using dynamic images from an API</h2><p>Using images from an API doesn’t require any special treatment outside of normal data rendering in Vue. Just make your API request, get your data, and render it in the template.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">// declare an empty array variable to hold your data</span><br><span class="line">const photos = ref([]);</span><br><span class="line"></span><br><span class="line">//create a function to fetch your data</span><br><span class="line">function getImages() &#123;</span><br><span class="line">  fetch(&quot;https://jsonplaceholder.typicode.com/albums/1/photos&quot;)</span><br><span class="line">    .then((response) =&gt; response.json())</span><br><span class="line">    .then((data) =&gt; &#123;</span><br><span class="line">      photos.value = data;</span><br><span class="line">      console.log(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getImages();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  // loop over photos array with some bootstrap classes for styling</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;col-lg-3&quot; v-for=&quot;(item, index) in photos&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">        &lt;img :src=&quot;item.url&quot; class=&quot;w-100&quot; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="5-Dynamic-inline-background-images"><a href="#5-Dynamic-inline-background-images" class="headerlink" title="5. Dynamic inline background images"></a>5. Dynamic inline background images</h2><p>I’ll add a little extra section here to quickly run over using dynamic background images with inline style tags. I’ll use the same function approach as in example #3.3, but use it inline.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// where &#x27;name&#x27; is the actual name of the file, and &#x27;ext&#x27; is the extension</span><br><span class="line">// i.e. myjpg.jpg</span><br><span class="line"></span><br><span class="line">function getImageUrl(name, ext) &#123;</span><br><span class="line">  return new URL(`./assets/img/$&#123;name&#125;.$&#123;ext&#125;`, import.meta.url).href;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      class=&quot;row&quot;</span><br><span class="line">      :style=&quot;&#123;</span><br><span class="line">        background: &#x27;url(&#x27; + getImageUrl(&#x27;myjpg&#x27;, &#x27;jpg&#x27;) + &#x27;)&#x27;,</span><br><span class="line">        &#x27;background-size&#x27;: &#x27;cover&#x27;,</span><br><span class="line">      &#125;&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;div class=&quot;col-lg-3&quot;&gt;</span><br><span class="line">        &lt;h1&gt;Background images!&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Using images with Vite and Vue seemed like a head scratcher initially. I still don’t fully understand why it’s so counterintuitive when referencing local and&#x2F;or dynamic assets. But hopefully this gives you a better idea. Again, I found the approach of using a function with dynamic file name and extension parameters to work best for multiple images with different formats. Be sure to check out the Vite docs for more info.</p><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p><a href="https://medium.com/@andrewmasonmedia/how-to-use-images-with-vite-and-vue-937307a150c0">https:&#x2F;&#x2F;medium.com&#x2F;@andrewmasonmedia&#x2F;how-to-use-images-with-vite-and-vue-937307a150c0</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;You’ve basically got 3 different ways to do it. Put images</summary>
      
    
    
    
    <category term="Frontend" scheme="https://jiaopucun.com/categories/Frontend/"/>
    
    
    <category term="Vite" scheme="https://jiaopucun.com/tags/Vite/"/>
    
    <category term="Vue" scheme="https://jiaopucun.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>How to set up Prettier and automatic formatting on VS Code</title>
    <link href="https://jiaopucun.com/2024/01/10/how-to-set-up-prettier-and-automatic-formatting-on-vs-code/"/>
    <id>https://jiaopucun.com/2024/01/10/how-to-set-up-prettier-and-automatic-formatting-on-vs-code/</id>
    <published>2024-01-10T01:44:46.000Z</published>
    <updated>2024-02-25T14:03:27.740Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Prettier</strong> is a code formatter that makes your code look neat and consistent. To learn more about Prettier, please visit the website <a href="https://prettier.io/">here</a>.</p><p>Below is an easy way to set up Prettier on your VS Code and allow automatic formatting.</p><h2 id="Step-1-Install-Prettier"><a href="#Step-1-Install-Prettier" class="headerlink" title="Step 1: Install Prettier"></a>Step 1: Install Prettier</h2><p>Click on the extension tab and type in Prettier.</p><p><img src="/2024/01/10/how-to-set-up-prettier-and-automatic-formatting-on-vs-code/screenshot_20240110094925.png"></p><p>Once found, click on it to proceed to installation.</p><h2 id="Step-2-Set-autosave"><a href="#Step-2-Set-autosave" class="headerlink" title="Step 2: Set autosave"></a>Step 2: Set autosave</h2><p>Once installation is successful, open the settings of your VS Code. You can do this on Windows by pressing both <code>Ctrl</code> and <code>,</code>. Click on the <strong>formatting</strong> section of the <strong>Text Editor</strong> tab and enable <strong>Format on Save</strong> Mode.</p><p><img src="/2024/01/10/how-to-set-up-prettier-and-automatic-formatting-on-vs-code/screenshot_20240110095241.png"></p><h2 id="Step-3-Format-your-code"><a href="#Step-3-Format-your-code" class="headerlink" title="Step 3: Format your code"></a>Step 3: Format your code</h2><p>Now, highlight your code and right-click. Select <strong>Format Document</strong>.</p><p><img src="/2024/01/10/how-to-set-up-prettier-and-automatic-formatting-on-vs-code/screenshot_20240110095846.png"></p><p>Once you click on <strong>Format Document</strong>, a dialog box will tell you to configure your code formatter. This is to set your default code formatter. Click on the <strong>configure</strong> button.</p><p><img src="/2024/01/10/how-to-set-up-prettier-and-automatic-formatting-on-vs-code/screenshot_20240110095916.png"></p><h2 id="Step-4-Select-Prettier-as-the-default"><a href="#Step-4-Select-Prettier-as-the-default" class="headerlink" title="Step 4: Select Prettier as the default"></a>Step 4: Select Prettier as the default</h2><p>After you click on <strong>configure</strong>, select <strong>Prettier</strong> as the default formatter.</p><p><img src="/2024/01/10/how-to-set-up-prettier-and-automatic-formatting-on-vs-code/screenshot_20240110095938.png"></p><p>And that’s it!</p><p>Now, your code should be formatted with Prettier anytime you save your file.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Prettier&lt;/strong&gt; is a code formatter that makes your code look neat and consistent. To learn more about Prettier, please visit t</summary>
      
    
    
    
    <category term="Tools" scheme="https://jiaopucun.com/categories/Tools/"/>
    
    
    <category term="VS Code" scheme="https://jiaopucun.com/tags/VS-Code/"/>
    
    <category term="Prettier" scheme="https://jiaopucun.com/tags/Prettier/"/>
    
  </entry>
  
  <entry>
    <title>How to update React Context from inside a child component?</title>
    <link href="https://jiaopucun.com/2024/01/09/how-to-update-react-context-from-inside-a-child-component/"/>
    <id>https://jiaopucun.com/2024/01/09/how-to-update-react-context-from-inside-a-child-component/</id>
    <published>2024-01-09T05:00:24.000Z</published>
    <updated>2024-02-25T14:03:27.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Using-Hooks"><a href="#Using-Hooks" class="headerlink" title="Using Hooks"></a>Using Hooks</h2><p>Hooks were introduced in 16.8.0 so the following code requires a minimum version of 16.8.0 (scroll down for the class components example). <a href="https://codesandbox.io/s/react-context-4c174">CodeSandbox Demo</a></p><h3 id="1-Setting-parent-state-for-dynamic-context"><a href="#1-Setting-parent-state-for-dynamic-context" class="headerlink" title="1. Setting parent state for dynamic context"></a>1. Setting parent state for dynamic context</h3><p>Firstly, in order to have a dynamic context which can be passed to the consumers, I’ll use the parent’s state. This ensures that I’ve a single source of truth going forth. For example, my parent App will look like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [language, setLanguage] = <span class="title function_">useState</span>(<span class="string">&quot;en&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> value = &#123; language, setLanguage &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    ...</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>The <code>language</code> is stored in the state. We will pass both <code>language</code> and the setter function <code>setLanguage</code> via context later.</p><h3 id="2-Creating-a-context"><a href="#2-Creating-a-context" class="headerlink" title="2. Creating a context"></a>2. Creating a context</h3><p>Next, I created a language context like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set the defaults</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LanguageContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(&#123;</span><br><span class="line">  <span class="attr">language</span>: <span class="string">&quot;en&quot;</span>,</span><br><span class="line">  <span class="attr">setLanguage</span>: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Here I’m setting the defaults for <code>language</code> (‘en’) and a <code>setLanguage</code> function which will be sent by the context provider to the consumer(s). These are only defaults and I’ll provide their values when using the provider component in the parent <code>App</code>.</p><p>Note: the <code>LanguageContext</code> remains same whether you use hooks or class based components.</p><h3 id="3-Creating-a-context-consumer"><a href="#3-Creating-a-context-consumer" class="headerlink" title="3. Creating a context consumer"></a>3. Creating a context consumer</h3><p>In order to have the language switcher set the language, it should have the access to the language setter function via context. It can look something like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">LanguageSwitcher</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; language, setLanguage &#125; = <span class="title function_">useContext</span>(<span class="title class_">LanguageContext</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setLanguage(&quot;jp&quot;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      Switch Language (Current: &#123;language&#125;)</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Here I’m just setting the language to ‘jp’ but you may have your own logic to set languages for this.</p><h3 id="4-Wrapping-the-consumer-in-a-provider"><a href="#4-Wrapping-the-consumer-in-a-provider" class="headerlink" title="4. Wrapping the consumer in a provider"></a>4. Wrapping the consumer in a provider</h3><p>Now I’ll render my language switcher component in a <code>LanguageContext.Provider</code> and pass in the values which have to be sent via context to any level deeper. Here’s how my parent <code>App</code> look like:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [language, setLanguage] = <span class="title function_">useState</span>(<span class="string">&quot;en&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> value = &#123; language, setLanguage &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">LanguageContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Current Language: &#123;language&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Click button to change to jp<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* Can be nested */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">LanguageSwitcher</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">LanguageContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Now, whenever the language switcher is clicked it updates the context dynamically.</p><p><a href="https://codesandbox.io/s/react-context-4c174">CodeSandbox Demo</a></p><h2 id="Using-class-components"><a href="#Using-class-components" class="headerlink" title="Using class components"></a>Using class components</h2><p>The latest <a href="https://reactjs.org/docs/context.html">context API</a> was introduced in React 16.3 which provides a great way of having a dynamic context. The following code requires a minimum version of 16.3.0. <a href="https://codesandbox.io/s/x7xrmnr954">CodeSandbox Demo</a></p><h3 id="1-Setting-parent-state-for-dynamic-context-1"><a href="#1-Setting-parent-state-for-dynamic-context-1" class="headerlink" title="1. Setting parent state for dynamic context"></a>1. Setting parent state for dynamic context</h3><p>Firstly, in order to have a dynamic context which can be passed to the consumers, I’ll use the parent’s state. This ensures that I’ve a single source of truth going forth. For example, my parent App will look like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  setLanguage = <span class="function"><span class="params">language</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; language &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">language</span>: <span class="string">&quot;en&quot;</span>,</span><br><span class="line">    <span class="attr">setLanguage</span>: <span class="variable language_">this</span>.<span class="property">setLanguage</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>language</code> is stored in the state along with a language setter method, which you may keep outside the state tree.</p><h3 id="2-Creating-a-context-1"><a href="#2-Creating-a-context-1" class="headerlink" title="2. Creating a context"></a>2. Creating a context</h3><p>Next, I created a language context like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set the defaults</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LanguageContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(&#123;</span><br><span class="line">  <span class="attr">language</span>: <span class="string">&quot;en&quot;</span>,</span><br><span class="line">  <span class="attr">setLanguage</span>: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Here I’m setting the defaults for <code>language</code> (‘en’) and a <code>setLanguage</code> function which will be sent by the context provider to the consumer(s). These are only defaults and I’ll provide their values when using the provider component in the parent <code>App</code>.</p><h3 id="3-Creating-a-context-consumer-1"><a href="#3-Creating-a-context-consumer-1" class="headerlink" title="3. Creating a context consumer"></a>3. Creating a context consumer</h3><p>In order to have the language switcher set the language, it should have the access to the language setter function via context. It can look something like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LanguageSwitcher</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">LanguageContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;(&#123; language, setLanguage &#125;) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setLanguage(&quot;jp&quot;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">            Switch Language (Current: &#123;language&#125;)</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">LanguageContext.Consumer</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here I’m just setting the language to ‘jp’ but you may have your own logic to set languages for this.</p><h3 id="4-Wrapping-the-consumer-in-a-provider-1"><a href="#4-Wrapping-the-consumer-in-a-provider-1" class="headerlink" title="4. Wrapping the consumer in a provider"></a>4. Wrapping the consumer in a provider</h3><p>Now I’ll render my language switcher component in a <code>LanguageContext.Provider</code> and pass in the values which have to be sent via context to any level deeper. Here’s how my parent <code>App</code> look like:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  setLanguage = <span class="function"><span class="params">language</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; language &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">language</span>: <span class="string">&quot;en&quot;</span>,</span><br><span class="line">    <span class="attr">setLanguage</span>: <span class="variable language_">this</span>.<span class="property">setLanguage</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">LanguageContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;this.state&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Current Language: &#123;this.state.language&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Click button to change to jp<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* Can be nested */&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">LanguageSwitcher</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">LanguageContext.Provider</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, whenever the language switcher is clicked it updates the context dynamically.</p><p><a href="https://codesandbox.io/s/x7xrmnr954">CodeSandbox Demo</a></p><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p><a href="https://stackoverflow.com/a/51573816">https://stackoverflow.com/a/51573816</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Using-Hooks&quot;&gt;&lt;a href=&quot;#Using-Hooks&quot; class=&quot;headerlink&quot; title=&quot;Using Hooks&quot;&gt;&lt;/a&gt;Using Hooks&lt;/h2&gt;&lt;p&gt;Hooks were introduced in 16.8.0 so</summary>
      
    
    
    
    <category term="Frontend" scheme="https://jiaopucun.com/categories/Frontend/"/>
    
    
    <category term="React" scheme="https://jiaopucun.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Best way to do async request (ajax and side effects) in ReactJs using hooks, Redux style - useReducer()</title>
    <link href="https://jiaopucun.com/2024/01/07/best-way-to-do-async-in-reactjs-using-hooks/"/>
    <id>https://jiaopucun.com/2024/01/07/best-way-to-do-async-in-reactjs-using-hooks/</id>
    <published>2024-01-07T13:40:20.000Z</published>
    <updated>2024-02-25T14:03:27.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="How-to-fetch-data-with-React-Hooks"><a href="#How-to-fetch-data-with-React-Hooks" class="headerlink" title="How to fetch data with React Hooks?"></a>How to fetch data with React Hooks?</h2><p>You will mostly end-up with Robin’s blog post regarding the fecth method. But the problem using useState() is that we can’t execute any other code after fetch success.</p><p>for an example:- do one fetch, if that fetch is successfull then call some JavaScript like clear the form using useState(), if fails display error message. That’s somehow difficult if we use useState().</p><h2 id="fetch-using-useState"><a href="#fetch-using-useState" class="headerlink" title="fetch using useState()"></a>fetch using useState()</h2><p>I created a codesandbox based on best practices to fetch data using hooks. Please feel free to update the script to make some Js after the fetch.</p><p><img src="/2024/01/07/best-way-to-do-async-in-reactjs-using-hooks/my-codesandbox.png"></p><p>in that codesandbox, try to execute some Js after the fetch. It won’t work becase it’s sync code.</p><h2 id="Always-use-useReducer-to-fetch-data"><a href="#Always-use-useReducer-to-fetch-data" class="headerlink" title="Always use useReducer() to fetch data"></a>Always use useReducer() to fetch data</h2><p>I am not big fan of useState() method due to it’s nature. I decided to use only useReducer() to fetch data and async operations. It’s same like Redux style.</p><ol><li>Create two useReducer()</li><li>one for sync and the other for async (ajax and side effects)</li><li>use the async reducer as a main and call the other reducer inside.</li><li>if you see the code, you can easily understand</li></ol><h2 id="Reducer-for-sync-only-for-state-changes"><a href="#Reducer-for-sync-only-for-state-changes" class="headerlink" title="Reducer for sync - only for state changes"></a>Reducer for sync - only for state changes</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(action.<span class="property">type</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;INIT_LOAD&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">isLoading</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">isError</span>: <span class="literal">false</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;LOAD_SUCCESS&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">isLoading</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">isError</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">data</span>: action.<span class="property">data</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;LOAD_ERROR&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">isLoading</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">isError</span>: <span class="literal">true</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reducer-for-async-side-effects-and-fetch"><a href="#Reducer-for-async-side-effects-and-fetch" class="headerlink" title="Reducer for async - side effects and fetch"></a>Reducer for async - side effects and fetch</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dispatchMiddleware</span>(<span class="params">dispatch</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> action =&gt; &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;LOAD&quot;</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;LOAD&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">axios</span>(<span class="string">&quot;https://api.github.com/users&quot;</span>);</span><br><span class="line">          <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;LOAD_SUCCESS&quot;</span>, <span class="attr">data</span>: result.<span class="property">data</span> &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;LOAD_ERROR&quot;</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">dispatch</span>(action);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Users</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatchBase] = <span class="title function_">useReducer</span>(reducer, initialState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">dispatchMiddleware</span>(dispatchBase);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;rendering...&quot;</span>, state);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">load</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;in load()&quot;</span>);</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;INIT_LOAD&quot;</span> &#125;);</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;LOAD&quot;</span> &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;load() - done&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="title class_">Display</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (state.<span class="property">isLoading</span>) &#123;</span><br><span class="line">    <span class="title class_">Display</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state.<span class="property">isError</span>) &#123;</span><br><span class="line">    <span class="title class_">Display</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Error<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title class_">Display</span> = state.<span class="property">data</span>.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;item.login&#125;</span>&gt;</span>&#123;item.login&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;load&#125;</span>&gt;</span>Load<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;Display&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Full-code"><a href="#Full-code" class="headerlink" title="Full code"></a>Full code</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dispatchMiddleware</span>(<span class="params">dispatch</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> action =&gt; &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;LOAD&quot;</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;LOAD&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">axios</span>(<span class="string">&quot;https://api.github.com/users&quot;</span>);</span><br><span class="line">          <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;LOAD_SUCCESS&quot;</span>, <span class="attr">data</span>: result.<span class="property">data</span> &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;LOAD_ERROR&quot;</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">dispatch</span>(action);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(action.<span class="property">type</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;INIT_LOAD&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">isLoading</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">isError</span>: <span class="literal">false</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;LOAD_SUCCESS&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">isLoading</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">isError</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">data</span>: action.<span class="property">data</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;LOAD_ERROR&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">isLoading</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">isError</span>: <span class="literal">true</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  <span class="attr">isLoading</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">isError</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">data</span>: []</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Users</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatchBase] = <span class="title function_">useReducer</span>(reducer, initialState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">dispatchMiddleware</span>(dispatchBase);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;rendering...&quot;</span>, state);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">load</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;in load()&quot;</span>);</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;INIT_LOAD&quot;</span> &#125;);</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;LOAD&quot;</span> &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;load() - done&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="title class_">Display</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (state.<span class="property">isLoading</span>) &#123;</span><br><span class="line">    <span class="title class_">Display</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state.<span class="property">isError</span>) &#123;</span><br><span class="line">    <span class="title class_">Display</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Error<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title class_">Display</span> = state.<span class="property">data</span>.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;item.login&#125;</span>&gt;</span>&#123;item.login&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;load&#125;</span>&gt;</span>Load<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;Display&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The full code is available in the <a href="https://codesandbox.io/s/5227w5pkln">codesandbox</a></p><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><ul><li><a href="http://mkumaran.net/2019/bestWayToDoAsyncInReactJsUsingHooks/">http://mkumaran.net/2019/bestWayToDoAsyncInReactJsUsingHooks/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;How-to-fetch-data-with-React-Hooks&quot;&gt;&lt;a href=&quot;#How-to-fetch-data-with-React-Hooks&quot; class=&quot;headerlink&quot; title=&quot;How to fetch data with R</summary>
      
    
    
    
    <category term="Frontend" scheme="https://jiaopucun.com/categories/Frontend/"/>
    
    
    <category term="React" scheme="https://jiaopucun.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Adding Vite to your existing React project</title>
    <link href="https://jiaopucun.com/2024/01/02/adding-vite-to-your-existing-react-project/"/>
    <id>https://jiaopucun.com/2024/01/02/adding-vite-to-your-existing-react-project/</id>
    <published>2024-01-02T08:36:32.000Z</published>
    <updated>2024-02-25T14:03:27.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Step-1-Preparation"><a href="#Step-1-Preparation" class="headerlink" title="Step 1: Preparation"></a>Step 1: Preparation</h2><p>Before exploring Vite, ensure your current React project is secure by creating a backup of its files and configurations. This backup allows for easy restoration if any unwanted changes occur during the Vite transition.</p><p>Verify that Node.js and npm (Node Package Manager) are installed on your development machine. These tools are prerequisites for working effectively with Vite.</p><h2 id="Step-2-Creating-a-Vite-Project"><a href="#Step-2-Creating-a-Vite-Project" class="headerlink" title="Step 2: Creating a Vite Project"></a>Step 2: Creating a Vite Project</h2><p>To introduce Vite into your existing React project, the initial step involves establishing a separate Vite project alongside it. This approach ensures that Vite operates independently without interfering with your existing project structure.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init @vitejs/app my-vite-app --template react</span><br></pre></td></tr></table></figure><p>To tailor the Vite project to your needs, replace the placeholder “my-vite-app” with your desired project name. This personalized identifier will distinguish your Vite project from others.</p><h2 id="Step-3-Copying-Dependencies-and-Configurations"><a href="#Step-3-Copying-Dependencies-and-Configurations" class="headerlink" title="Step 3: Copying Dependencies and Configurations"></a>Step 3: Copying Dependencies and Configurations</h2><p>Locate the newly created Vite project directory and transfer the relevant files: package.json, package-lock.json, and vite.config.js to your existing React project’s directory.</p><h2 id="Step-4-Installing-Dependencies"><a href="#Step-4-Installing-Dependencies" class="headerlink" title="Step 4: Installing Dependencies"></a>Step 4: Installing Dependencies</h2><p>To fully integrate Vite into your existing React project, execute the following command within the project directory:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="Step-5-Configuring-Your-Existing-React-Code"><a href="#Step-5-Configuring-Your-Existing-React-Code" class="headerlink" title="Step 5: Configuring Your Existing React Code"></a>Step 5: Configuring Your Existing React Code</h2><p>Pay close attention to React components, entry points, and import paths. Proper configuration of these elements is crucial for unlocking the efficiency and performance benefits of Vite.</p><h2 id="Step-6-Starting-the-Development-Server"><a href="#Step-6-Starting-the-Development-Server" class="headerlink" title="Step 6: Starting the Development Server"></a>Step 6: Starting the Development Server</h2><p>To activate the Vite dev server within your project directory, execute the following command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>Enjoy the real-time feedback loop provided by Vite, allowing you to iterate on your code and observe the results seamlessly.</p><h2 id="Step-7-Adjusting-Configuration"><a href="#Step-7-Adjusting-Configuration" class="headerlink" title="Step 7: Adjusting Configuration"></a>Step 7: Adjusting Configuration</h2><p>The vite.config.js file, located in your project directory, serves as the central hub for modifying Vite’s behavior.</p><h2 id="Step-8-Testing-and-Debugging"><a href="#Step-8-Testing-and-Debugging" class="headerlink" title="Step 8: Testing and Debugging"></a>Step 8: Testing and Debugging</h2><p>Once Vite is integrated with your React project, conduct thorough testing to identify and address any potential issues.</p><h2 id="Step-9-Building-for-Production"><a href="#Step-9-Building-for-Production" class="headerlink" title="Step 9: Building for Production"></a>Step 9: Building for Production</h2><p>Execute the following command within your project directory to initiate the production build process:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>This optimization process reduces the size of your code, improves loading performance, and ensures that your application runs smoothly in production setups.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion:"></a>Conclusion:</h2><p>Integrating Vite into your React project can revolutionize your development experience. Its lightning-fast dev server, production-optimized builds, and compatibility with various frameworks and libraries can streamline your workflow and elevate your project’s quality.</p><p>Web development is a rapidly evolving field, and embracing modern tools like Vite can significantly impact your productivity and the performance of your applications. Embrace the power of Vite and witness its transformative effects on your development process.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Step-1-Preparation&quot;&gt;&lt;a href=&quot;#Step-1-Preparation&quot; class=&quot;headerlink&quot; title=&quot;Step 1: Preparation&quot;&gt;&lt;/a&gt;Step 1: Preparation&lt;/h2&gt;&lt;p&gt;Befo</summary>
      
    
    
    
    <category term="Frontend" scheme="https://jiaopucun.com/categories/Frontend/"/>
    
    
    <category term="React" scheme="https://jiaopucun.com/tags/React/"/>
    
    <category term="Vite" scheme="https://jiaopucun.com/tags/Vite/"/>
    
  </entry>
  
  <entry>
    <title>CORS &amp; Vite</title>
    <link href="https://jiaopucun.com/2024/01/02/cors-vite/"/>
    <id>https://jiaopucun.com/2024/01/02/cors-vite/</id>
    <published>2024-01-02T03:28:54.000Z</published>
    <updated>2024-02-25T14:03:27.614Z</updated>
    
    <content type="html"><![CDATA[<p>CORS is enabled by default in Vite dev server, and it allows any origin. However, you might also need to do more configurations if the API server is on another domain, which is very common during the development environment.</p><p>In this case, you need to edit the <code>vite.config.ts</code> or <code>vite.config.js</code> file in your project and configure custom proxy rules for the dev server.</p><p>Example:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="comment">// string shorthand: http://localhost:5173/foo -&gt; http://localhost:4567/foo</span></span><br><span class="line">      <span class="string">&#x27;/foo&#x27;</span>: <span class="string">&#x27;http://localhost:4567&#x27;</span>,</span><br><span class="line">      <span class="comment">// with options: http://localhost:5173/api/bar-&gt; http://jsonplaceholder.typicode.com/bar</span></span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://jsonplaceholder.typicode.com&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// with RegEx: http://localhost:5173/fallback/ -&gt; http://jsonplaceholder.typicode.com/</span></span><br><span class="line">      <span class="string">&#x27;^/fallback/.*&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://jsonplaceholder.typicode.com&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/fallback/</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// Using the proxy instance</span></span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://jsonplaceholder.typicode.com&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">configure</span>: <span class="function">(<span class="params">proxy, options</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// proxy will be an instance of &#x27;http-proxy&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// Proxying websockets or socket.io: ws://localhost:5173/socket.io -&gt; ws://localhost:5174/socket.io</span></span><br><span class="line">      <span class="string">&#x27;/socket.io&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;ws://localhost:5174&#x27;</span>,</span><br><span class="line">        <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;CORS is enabled by default in Vite dev server, and it allows any origin. However, you might also need to do more configurations if the AP</summary>
      
    
    
    
    <category term="Frontend" scheme="https://jiaopucun.com/categories/Frontend/"/>
    
    
    <category term="Vite" scheme="https://jiaopucun.com/tags/Vite/"/>
    
  </entry>
  
  <entry>
    <title>create-react-app is dead</title>
    <link href="https://jiaopucun.com/2024/01/02/create-react-app-is-dead/"/>
    <id>https://jiaopucun.com/2024/01/02/create-react-app-is-dead/</id>
    <published>2024-01-02T02:36:23.000Z</published>
    <updated>2024-02-25T14:03:27.661Z</updated>
    
    <content type="html"><![CDATA[<p>For many years <a href="https://create-react-app.dev/">create-react-app</a> was a go-to method for starting a React project. It was the easiest way for beginners to start a React project locally.</p><p>On March 16, 2023, React published new docs and dropped support for the old docs. In the new docs, they no longer recommend CRA as a solution for creating React applications. Let’s start with talking about what went wrong with CRA.</p><h2 id="What-are-the-problems-with-create-react-app"><a href="#What-are-the-problems-with-create-react-app" class="headerlink" title="What are the problems with create-react-app"></a>What are the problems with create-react-app</h2><h3 id="Performance"><a href="#Performance" class="headerlink" title="Performance:"></a>Performance:</h3><p>CRA comes by default with 205 MBs on dependencies in node_modules. As opposed to its alternative <a href="https://vitejs.dev/">Vite</a> which has only 34 MBs.</p><p>Dependency size hurts not only us developers but also our users. This is what we deal with:</p><ul><li>Slower updates during development.</li><li>The local server takes longer to start.</li><li>Slower builds(this results in higher CI costs).</li><li>Slower user experience for users.</li></ul><p>The last part is the most detrimental. Remember that every time a user goes to your website. It waits for a server to send a full JS bundler. The bigger the bundler the longer the request will take.</p><p>This can drastically lower your conversions and be bad for SEO metrics like <a href="https://web.dev/fcp/">FCP</a> or LCP[<a href="https://web.dev/lcp/]">https://web.dev/lcp/]</a>.</p><h3 id="Poly-filling-core-node-js-modules"><a href="#Poly-filling-core-node-js-modules" class="headerlink" title="Poly filling core node.js modules:"></a>Poly filling core node.js modules:</h3><p>What is a polyfill? Polyfill is used to compile your code that won’t run in the browser and turn that into something that does. It’s used for old browsers that might not have support for new JS methods like Array.filter etc.</p><p>Node.js was created to be server-side javascript. Its internal modules like crypto and fs were never meant to be used in the browser.</p><p>This is an extremely bad pattern. These packages were never meant to run in a browser.</p><p>Luckily create-react-app v5 removed those polyfills. Although we can still find those bad patterns in older react repositories.</p><h3 id="Custom-configuration"><a href="#Custom-configuration" class="headerlink" title="Custom configuration:"></a>Custom configuration:</h3><p>create-react-app comes with a lot of limitations. An example is using a library called <a href="https://tailwindcss.com/">Tailwind</a>, because you can’t override the PostCSS configuration. You would have to do something called an <strong>eject</strong>.</p><p>What is an eject? Trust me you don’t want to know, but I will tell you anyway.</p><p>Eject means create-react-app drops all of the configuration files: Babel, Webpack and node_modules that it uses natively inside your code base.</p><p>After ejecting you will basically maintain a fork of CRA. This is a nightmare. That’s why tools like <a href="https://craco.js.org/">Craco</a> came to help.</p><p>Craco stands for: Create react app configuration override. As it the name suggests it basically overrides the create-react-app configuration adding another layer of complexity on top.</p><p>You can imagine how horrible maintaining a project like this is. Every time something in CRA changes Craco has to change accordingly.</p><h2 id="Alternatives"><a href="#Alternatives" class="headerlink" title="Alternatives:"></a>Alternatives:</h2><p>Let’s give CRA a break and let’s talk about alternatives. New react docs recommend four technologies: NextJS, Remix, Gatsby, and Expo.</p><p>We will not talk about Expo as it’s mobile technology. I will also add one additional that in my opinion resembles CRA the most.</p><h3 id="Next-js"><a href="#Next-js" class="headerlink" title="Next.js"></a>Next.js</h3><p><a href="https://nextjs.org/">NextJS</a> is a full-stack React framework. Besides building user interfaces you can also create an API.</p><p>It’s maintained by a company Vercel which offers deployment services. They make it super easy to deploy the NextJS app onto their platform.</p><h3 id="Remix"><a href="#Remix" class="headerlink" title="Remix"></a>Remix</h3><p><a href="https://remix.run/">Remix</a> is also a full-stack React framework. One of the more interesting features that it offers is nested routes.</p><p>One way nested routes can be very useful is parallel fetching. Multiple data sources are fetched in the same way, which gives a much better user experience.</p><h3 id="Gatsby"><a href="#Gatsby" class="headerlink" title="Gatsby"></a>Gatsby</h3><p><a href="https://www.gatsbyjs.com/">Gatsby</a> focuses on making it easy to integrate your app with a CMS. What’s nice about Gatsby is its GraphQL data layer. It helps you integrate content, APIs, and various services onto your application.</p><h3 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h3><p>Vite isn’t recommended by React docs, but it’s the most similar to CRA, because it supports client-side rendering.</p><p>They make it super easy to start developing React projects locally. It offers all of the advanced features that you want from a development tool like HMR, super quick server starts, native TS support, etc.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary:"></a>Summary:</h2><p>If you already know React. That’s great, but you need to know how to use this skill most effectively. create-react-app just doesn’t cut it anymore. The project was super important for the React ecosystem. We have to acknowledge how much it contributed.</p><p>I won’t tell you what to use instead, but I can tell you how I make choices currently.</p><p>If I need a frontend with an API. I go with NextJS.</p><p>If I need only frontend. I go with Vite with React.</p><p>You are free to use other tools highlighted here like Gatsby or Remix.</p><h2 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h2><ul><li><a href="https://medium.com/@dawid.niegrebecki/create-react-app-is-dead-what-to-use-instead-fcdd46b70295">Create-react-app is dead. What to use instead?</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;For many years &lt;a href=&quot;https://create-react-app.dev/&quot;&gt;create-react-app&lt;/a&gt; was a go-to method for starting a React project. It was the e</summary>
      
    
    
    
    <category term="Frontend" scheme="https://jiaopucun.com/categories/Frontend/"/>
    
    
    <category term="React" scheme="https://jiaopucun.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>How to reset MySQL root password on Windows</title>
    <link href="https://jiaopucun.com/2024/01/01/how-to-reset-mysql-root-password-on-windows/"/>
    <id>https://jiaopucun.com/2024/01/01/how-to-reset-mysql-root-password-on-windows/</id>
    <published>2024-01-01T13:39:57.000Z</published>
    <updated>2024-02-25T14:03:27.708Z</updated>
    
    <content type="html"><![CDATA[<p>If you assigned a root password previously but have forgotten it, you can assign a new password. </p><p>On Windows, use the following procedure to reset the password for the MySQL <code>&#39;root&#39;@&#39;localhost&#39;</code> account. To change the password for a <code>root</code> account with a different host name part, modify the instructions to use that host name.</p><ol><li>Log on to your system as Administrator.</li><li>Stop the MySQL server if it is running.</li><li>Create a text file containing the password-assignment statement on a single line. Replace the password with the password that you want to use.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;MyNewPass&#x27;;</span><br></pre></td></tr></table></figure></li><li>Save the file. This example assumes that you name the file <code>C:\mysql-init.txt</code>.</li><li>Open a console window to get to the command prompt: From the <strong>Start</strong> menu, select <strong>Run</strong>, then enter <strong>cmd</strong> as the command to be run.</li><li>Start the MySQL server with the <code>init_file</code> system variable set to name the file (notice that the backslash in the option value is doubled):<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; cd &quot;C:\Program Files\MySQL\MySQL Server 8.0\bin&quot;</span><br><span class="line">C:\&gt; mysqld.exe --init-file=C:\\mysql-init.txt</span><br></pre></td></tr></table></figure>If you installed MySQL to a different location, adjust the <strong>cd</strong> command accordingly.</li></ol><p>The server executes the contents of the file named by the <code>init_file</code> system variable at startup, changing the <code>&#39;root&#39;@&#39;localhost&#39;</code> account password.</p><p>To have server output to appear in the console window rather than in a log file, add the <code>--console</code> option to the mysqld command.</p><p>If you installed MySQL using the MySQL Installation Wizard, you may need to specify a <code>--defaults-file</code> option and <code>--datadir</code> option. For example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt; mysqld.exe</span><br><span class="line">         --defaults-file=&quot;C:\\ProgramData\\MySQL\\MySQL Server 8.0\\my.ini&quot;</span><br><span class="line">         --datadir=&quot;C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Data&quot;</span><br><span class="line">         --init-file=C:\\mysql-init.txt</span><br></pre></td></tr></table></figure><p>The appropriate <code>--defaults-file</code> setting can be found using the Services Manager: From the <strong>Start</strong> menu, select <strong>Control Panel</strong>, then <strong>Administrative Tools</strong>, then <strong>Services</strong>. Find the MySQL service in the list, right-click it, and choose the <strong>Properties</strong> option. The Path to executable field contains the <code>--defaults-file</code> setting.</p><ol start="7"><li>After the server has started successfully, delete <code>C:\mysql-init.txt</code>.</li></ol><p>You should now be able to connect to the MySQL server as <code>root</code> using the new password. Stop the MySQL server and restart it normally. If you run the server as a service, start it from the Windows Services window. If you start the server manually, use whatever command you normally use.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;If you assigned a root password previously but have forgotten it, you can assign a new password. &lt;/p&gt;
&lt;p&gt;On Windows, use the following pr</summary>
      
    
    
    
    <category term="Database" scheme="https://jiaopucun.com/categories/Database/"/>
    
    
    <category term="MySQL" scheme="https://jiaopucun.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Type &#39;T | undefined&#39; is not assignable to type &#39;T&#39;. &#39;T&#39; could be instantiated with an arbitrary type which could be unrelated to &#39;T | undefined&#39;</title>
    <link href="https://jiaopucun.com/2023/12/30/T-undefined/"/>
    <id>https://jiaopucun.com/2023/12/30/T-undefined/</id>
    <published>2023-12-30T13:42:53.000Z</published>
    <updated>2024-02-25T14:03:27.609Z</updated>
    
    <content type="html"><![CDATA[<p>This is a sample TypeScript generic class, which implements a generic <code>Stack</code> class.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">elements</span>: T[] = [];</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> size: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">isEmpty</span>(): <span class="built_in">boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">elements</span>.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">isFull</span>(): <span class="built_in">boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">elements</span>.<span class="property">length</span> === <span class="variable language_">this</span>.<span class="property">size</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">push</span>(<span class="attr">element</span>: T): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">elements</span>.<span class="property">length</span> === <span class="variable language_">this</span>.<span class="property">size</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;The stack is overflow!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">elements</span>.<span class="title function_">push</span>(element);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">pop</span>(): T &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">elements</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;The stack is empty!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">elements</span>.<span class="title function_">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The code above looks promising, but TypeScript issues an error</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Type &#x27;T | undefined&#x27; is not assignable to type &#x27;T&#x27;.</span><br><span class="line">  &#x27;T&#x27; could be instantiated with an arbitrary type which could be unrelated to &#x27;T | undefined&#x27;.</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Approach-1-operator"><a href="#Approach-1-operator" class="headerlink" title="Approach 1. ! operator"></a>Approach 1. ! operator</h3><p>If you want to return <code>T</code> you should tell TS to exclude <code>undefined</code> from resulting type by using the <code>!</code> operator.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">    <span class="title function_">pop</span>(): T &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">elements</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;The stack is empty!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">elements</span>.<span class="title function_">pop</span>()!; <span class="comment">// &lt;==</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Approach-2-union-type"><a href="#Approach-2-union-type" class="headerlink" title="Approach 2. union type"></a>Approach 2. union type</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">    <span class="title function_">pop</span>(): T | <span class="literal">undefined</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">elements</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;The stack is empty!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">elements</span>.<span class="title function_">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This is a sample TypeScript generic class, which implements a generic &lt;code&gt;Stack&lt;/code&gt; class.&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;</summary>
      
    
    
    
    
    <category term="TypeScript" scheme="https://jiaopucun.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>How to loop through objects keys and values in Javascript?</title>
    <link href="https://jiaopucun.com/2023/12/15/loop-through-object-javascript/"/>
    <id>https://jiaopucun.com/2023/12/15/loop-through-object-javascript/</id>
    <published>2023-12-15T11:43:45.000Z</published>
    <updated>2024-02-25T14:03:27.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="How-to-loop-through-objects-in-JavaScript"><a href="#How-to-loop-through-objects-in-JavaScript" class="headerlink" title="How to loop through objects in JavaScript?"></a>How to loop through objects in JavaScript?</h1><p>The various methods that can be used to loop through objects in JavaScript are:</p><ul><li>Using a for…in loop</li><li>Object.keys method</li><li>Object.values method</li><li>Object.entries method</li></ul><h2 id="for…in-Loop"><a href="#for…in-Loop" class="headerlink" title="for…in Loop"></a>for…in Loop</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;john.doe@example.com&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">dob</span>: <span class="string">&#x27;08/02/1989&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">active</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> user) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;user[key]&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object-keys-Method"><a href="#Object-keys-Method" class="headerlink" title="Object.keys() Method"></a>Object.keys() Method</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> courses = &#123;</span><br><span class="line">    <span class="attr">java</span>: <span class="number">10</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">javascript</span>: <span class="number">55</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">nodejs</span>: <span class="number">5</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">php</span>: <span class="number">15</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// convert object to key&#x27;s array</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(courses);</span><br><span class="line"></span><br><span class="line"><span class="comment">// print all keys</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(keys);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [ &#x27;java&#x27;, &#x27;javascript&#x27;, &#x27;nodejs&#x27;, &#x27;php&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// iterate over object</span></span><br><span class="line"></span><br><span class="line">keys.<span class="title function_">forEach</span>(<span class="function">(<span class="params">key, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;courses[key]&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// java: 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript: 55</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// nodejs: 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// php: 15</span></span><br></pre></td></tr></table></figure><h2 id="Object-values-Method"><a href="#Object-values-Method" class="headerlink" title="Object.values() Method"></a>Object.values() Method</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> animals = &#123;</span><br><span class="line">    <span class="attr">tiger</span>: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">cat</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">monkey</span>: <span class="number">3</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">elephant</span>: <span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// iterate over object values</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(animals).<span class="title function_">forEach</span>(<span class="function"><span class="params">val</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(val));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h2 id="Object-entries-Method"><a href="#Object-entries-Method" class="headerlink" title="Object.entries() Method"></a>Object.entries() Method</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> animals = &#123;</span><br><span class="line">    <span class="attr">tiger</span>: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">cat</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">monkey</span>: <span class="number">3</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">elephant</span>: <span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(animals);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(entries);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [ [ &#x27;tiger&#x27;, 1 ],</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   [ &#x27;cat&#x27;, 2 ],</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   [ &#x27;monkey&#x27;, 3 ],</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   [ &#x27;elephant&#x27;, 4 ] ]</span></span><br></pre></td></tr></table></figure><p>To loop over the array returned by Object.entries(), you can either use the for…of loop or the forEach() method as shown below:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// `for...of` loop</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(animals)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `forEach()` method</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">entries</span>(animals).<span class="title function_">forEach</span>(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;How-to-loop-through-objects-in-JavaScript&quot;&gt;&lt;a href=&quot;#How-to-loop-through-objects-in-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;How to loo</summary>
      
    
    
    
    
  </entry>
  
</feed>
