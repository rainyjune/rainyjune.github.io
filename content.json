{"meta":{"title":"SummerTown","subtitle":"","description":"","author":"rainyjune","url":"https://jiaopucun.com","root":"/"},"pages":[{"title":"About","date":"un33fin33","updated":"un00fin00","comments":true,"path":"about/index.html","permalink":"https://jiaopucun.com/about/index.html","excerpt":"","text":"I am a seasoned Front end engineer with 11 years of experience in the area, and I have hands-on experience in building applications with React, TypeScript and Node.js. In addition, I am passionate about solving challenges and improving user experience. I am available for hiring! What I can do? Web Application Development with jQuery Backbone React Node.js SSR Micro Frontend PHP and MySQL Third-party Software Development WordPress Themes and Plugins Hexo Themes and Plugins EasyUI Extensions Mini Program Developement WeChat Mini Program Baidu Mini Program Browser Extensions Development Google Chrome Extension Translation Service From Chinese to English From English to Chinese Contact MeEmail: &#114;&#97;&#x69;&#110;&#x79;&#106;&#117;&#110;&#101;&#x40;&#108;&#105;&#x76;&#101;&#x2e;&#99;&#x6e;WeChat: rainyjune335"},{"title":"Projects","date":"un66fin66","updated":"un00fin00","comments":true,"path":"projects/index.html","permalink":"https://jiaopucun.com/projects/index.html","excerpt":"","text":"Yuan Pad - YuanPad is a PHP + React guestbook app. Yuan Player - A free and open source media library written in JavaScript. TypeScript Tutorial in Chinese - TypeScript 中文教程 @rainyjune&#x2F;docusaurus-plugin-baidu-analytics - Baidu Analytics plugin for Docusaurus Yuan Weather - Just another weather app, available on Web, Mini Programe and more."},{"title":"Useful Links","date":"un44fin44","updated":"un00fin00","comments":true,"path":"links/index.html","permalink":"https://jiaopucun.com/links/index.html","excerpt":"","text":"Polyfills base64.js - A polyfill for base64 functions atob and btoa. json2.js - JSON in JavaScript Libraries js-cookie - A simple, lightweight JavaScript API for handling browser cookies. CSS Flexbugs - A community-curated list of flexbox issues and cross-browser workarounds for them. Tools Mozilla SSL Configuration Generator - An easy-to-use secure configuration generator for web, database, and mail software. Simply select the software you are using and receive a configuration file that is both safe and compatible."}],"posts":[{"title":"How to disable Windows Defender","slug":"how-to-disable-windows-defender","date":"un00fin00","updated":"un00fin00","comments":true,"path":"2024/02/25/how-to-disable-windows-defender/","link":"","permalink":"https://jiaopucun.com/2024/02/25/how-to-disable-windows-defender/","excerpt":"","text":"One of the solutions is to rename the registry key HKLM\\SYSTEM\\CurrentControlSet\\Services\\WinDefend to HKLM\\SYSTEM\\CurrentControlSet\\Services\\WinDefend-BLOCKED (for example).To learn how, read on. Renaming the registry key requires a restart in Safe modeAs far as I know, the registry key HKLM\\SYSTEM\\CurrentControlSet\\Services\\WinDefend cannot be renamed starting windows normally. To start in Safe mode, press WinKey + R, type msconfig and hit Enter. In the System Configuration window that opens, click the Boot tab, and then check Safe boot as shown in the screenshot below. Click Apply and then press WinKey + x followed by u and u to shut down. Once the computer has turned off, press the physical power button to turn it on again. This will start your computer in Safe mode. In Safe mode, rename the registry keyOnce you have entered Safe mode, open the registry editor – press WinKey + R, type regedit and hit Enter. Right-click the HKLM\\SYSTEM\\CurrentControlSet\\Services\\WinDefend key and rename it to WinDefend-BLOCKED. That’s it! All that remains is to leave the Safe mode and restart normally. Use the same procedure as before (msconfig) – but this time uncheck Safe boot before restarting. From: https://superuser.com/questions/1698370/how-to-disable-windows-defender","categories":[],"tags":[]},{"title":"Create a Hapi Server with Knex and MySQL","slug":"create-a-hapi-server-with-knex-and-mysql","date":"un44fin44","updated":"un00fin00","comments":true,"path":"2024/02/22/create-a-hapi-server-with-knex-and-mysql/","link":"","permalink":"https://jiaopucun.com/2024/02/22/create-a-hapi-server-with-knex-and-mysql/","excerpt":"","text":"In this article I am going to show you how to build a simple API server with hapi and MySQL. I am using Knex as a SQL query builder. And in order to pass the database instance to the request object, I use server decorations property. Rest of the code consists of a simple procedure explained here in detail. To see it in action follow the steps below: Setup the project and install dependencies: 123mkdir myServercd myServernpm -y init Install dependencies: 1npm i @hapi/hapi mysql2 knex Create a file named server.js with the contents below: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253const hapi = require(&quot;@hapi/hapi&quot;);const knex = require(&quot;knex&quot;);// Controller function for &#x27;/users&#x27; routefunction test(req, res) &#123; // We can access our database over request object return req.database.schema.hasTable(&quot;users&quot;).then(function (exists) &#123; // Check if users table exists in the database and return the JSON object below return &#123; doesTableExist: exists, &#125;; &#125;);&#125;async function run() &#123; // Define server with its options const server = hapi.server(&#123; port: 3000, host: &quot;localhost&quot;, &#125;); // Define routes array const routes = [ &#123; method: &quot;GET&quot;, // Method of the route path: &quot;/doesTableExist&quot;, // Path of the route handler: test, // Handler aka controller of the route &#125;, ]; server.route(routes); // Create a database instance const database = knex(&#123; client: &quot;mysql2&quot;, // Database client connection: &#123; host: &quot;localhost&quot;, user: &quot;root&quot;, password: &quot;root&quot;, database: &quot;myDatabase&quot;, &#125;, &#125;); // Attach database instance to request object under the name of &#x27;database&#x27; server.decorate(&quot;request&quot;, &quot;database&quot;, database); // Initialize the server await server.start(); console.log(`Running`);&#125;run(); Configure and run your MySQL server and modify database instance with proper values(host, user, password, database). If you want to use another SQL database check out the supported clients here and install the one you need. Run the server with command below: 1node server.js Check out the route we defined in our code to see it works: 1http://localhost:3000/doesTableExist","categories":[{"name":"Backend","slug":"Backend","permalink":"https://jiaopucun.com/categories/Backend/"}],"tags":[{"name":"hapi","slug":"hapi","permalink":"https://jiaopucun.com/tags/hapi/"},{"name":"MySQL","slug":"MySQL","permalink":"https://jiaopucun.com/tags/MySQL/"},{"name":"Knex","slug":"Knex","permalink":"https://jiaopucun.com/tags/Knex/"}]},{"title":"Test React Custom Hooks with Jest and Testing Library","slug":"test-react-custom-hooks-with-jest-and-testing-library","date":"un44fin44","updated":"un00fin00","comments":true,"path":"2024/02/01/test-react-custom-hooks-with-jest-and-testing-library/","link":"","permalink":"https://jiaopucun.com/2024/02/01/test-react-custom-hooks-with-jest-and-testing-library/","excerpt":"","text":"Prerequisite InstallationAssume that we already installed Jest, Testing Library and SWR. Custom HookIf you don’t know what is the custom hooks we recommend you to read the official document about custom hooks. Before we write the test we should have a custom hook first. We create a custom hook useIndex to fetch the data from API as follow: 123456789101112131415import useSWR from &quot;swr&quot;;const fetcher = (url) =&gt; fetch(url).then((res) =&gt; res.json());export const useIndex = () =&gt; &#123; const &#123; data, error &#125; = useSWR( &quot;https://api.github.com/repos/vercel/swr&quot;, fetcher ); return &#123; data, error, &#125;;&#125;; Then we use useIndex as follow: 1234567891011121314151617181920import React from &quot;react&quot;;import &#123; useIndex &#125; from &quot;./hook&quot;;export default function Index() &#123; const &#123; data, error &#125; = useIndex(); if (error) return &quot;An error has occurred.&quot;; if (!data) return &quot;Loading...&quot;; return ( &lt;&gt; &lt;h1&gt;&#123;data.name&#125;&lt;/h1&gt; &lt;strong&gt;&#123;data.subscribers_count&#125;&lt;/strong&gt; &lt;strong&gt; &#123;data.stargazers_count&#125; &lt;/strong&gt; &lt;strong&gt;&#123;data.forks_count&#125;&lt;/strong&gt; &lt;/&gt; );&#125; Test Custom HookBeforehand There are one property and one function we need to know in Jest: jest.mock – used to spied on the behavior of a function. mockImplementation – used as the implementation of the mock. There is one function we need to know in Testing Library: render – used to render the component virtually. Case 1 The first case is that we want to check “Loading…” is displayed when undefined data is returned from the API. 12345678910111213141516171819202122232425262728293031import &#x27;@testing-library/jest-dom&#x27;;import &#x27;@testing-library/jest-dom/extend-expect&#x27;;import &#123; jest, test &#125; from &#x27;@jest/globals&#x27;;import &#123; render &#125; from &#x27;@testing-library/react&#x27;;import &#123; BrowserRouter &#125; from &#x27;react-router-dom&#x27;;import &#123; useIndex &#125; from &#x27;./hook&#x27;;import IndexPage from &#x27;./index&#x27;;jest.mock(&#x27;./hook&#x27;, () =&gt; (&#123; useIndex: jest.fn(() =&gt; (&#123; data: &#123;&#125;, error: undefined, &#125;)),&#125;));test(&#x27;Assert &quot;Loading...&quot; is displayed when undefined data is returned from the API&#x27;, () =&gt; &#123; (useIndex as any).mockImplementation(() =&gt; (&#123; data: undefined, error: undefined, &#125;)); const &#123; getByText &#125; = render( &lt;BrowserRouter&gt; &lt;Page /&gt; &lt;/BrowserRouter&gt;, ); expect(getByText(&#x27;Loading...&#x27;)).toBeInTheDocument();&#125;); Case 2 The second case is that we want to check “An error has occurred.” is displayed when an error is returned from the API. 12345678910111213141516171819202122232425262728293031import &#x27;@testing-library/jest-dom&#x27;;import &#x27;@testing-library/jest-dom/extend-expect&#x27;;import &#123; jest, test &#125; from &#x27;@jest/globals&#x27;;import &#123; render &#125; from &#x27;@testing-library/react&#x27;;import &#123; BrowserRouter &#125; from &#x27;react-router-dom&#x27;;import &#123; useIndex &#125; from &#x27;./hook&#x27;;import IndexPage from &#x27;./index&#x27;;jest.mock(&#x27;./hook&#x27;, () =&gt; (&#123; useIndex: jest.fn(() =&gt; (&#123; data: &#123;&#125;, error: undefined, &#125;)),&#125;));test(&#x27;Assert &quot;An error has occurred.&quot; is displayed when an error is returned from the API&#x27;, () =&gt; &#123; (useIndex as any).mockImplementation(() =&gt; (&#123; data: &#123;&#125;, loadingError: &#123; response: &#123; status: 500 &#125; &#125;, &#125;)); const &#123; getByText &#125; = render( &lt;BrowserRouter&gt; &lt;Page /&gt; &lt;/BrowserRouter&gt;, ); expect(getByText(&#x27;An error has occurred.&#x27;)).toBeInTheDocument();&#125;); Case 3 And the third case is that we want to check data is displayed when there is no error. 12345678910111213141516171819202122232425262728293031323334353637383940import &#x27;@testing-library/jest-dom&#x27;;import &#x27;@testing-library/jest-dom/extend-expect&#x27;;import &#123; jest, test &#125; from &#x27;@jest/globals&#x27;;import &#123; render &#125; from &#x27;@testing-library/react&#x27;;import &#123; BrowserRouter &#125; from &#x27;react-router-dom&#x27;;import &#123; useIndex &#125; from &#x27;./hook&#x27;;import IndexPage from &#x27;./index&#x27;;jest.mock(&#x27;./hook&#x27;, () =&gt; (&#123; useIndex: jest.fn(() =&gt; (&#123; data: &#123;&#125;, error: undefined, &#125;)),&#125;));test(&#x27;Assert data is displayed when there is no error&#x27;, () =&gt; &#123; (useIndex as any).mockImplementation(() =&gt; (&#123; data: &#123; id: 218115303, name: &#x27;swr&#x27;, description: &#x27;React Hooks for Data Fetching&#x27;, full_name: &#x27;vercel/swr&#x27;, owner: &#123; id: 14985020, login: &#x27;vercel&#x27; &#125; &#125;, loadingError: undefined, &#125;)); const &#123; getByText &#125; = render( &lt;BrowserRouter&gt; &lt;Page /&gt; &lt;/BrowserRouter&gt;, ); expect(getByText(&#x27;swr&#x27;)).toBeInTheDocument();&#125;); Source: https://engineering.mobalab.net/2022/12/13/test-react-custom-hooks-with-jest-and-testing-library/","categories":[{"name":"Testing","slug":"Testing","permalink":"https://jiaopucun.com/categories/Testing/"}],"tags":[{"name":"React","slug":"React","permalink":"https://jiaopucun.com/tags/React/"},{"name":"Jest","slug":"Jest","permalink":"https://jiaopucun.com/tags/Jest/"}]},{"title":"Setup Jest with Vite and TypeScript","slug":"jest-vite-typescript","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2024/01/31/jest-vite-typescript/","link":"","permalink":"https://jiaopucun.com/2024/01/31/jest-vite-typescript/","excerpt":"","text":"First, install jest: 12345# NPMnpm i jest --save-dev# yarnyarn add -D jest Install react-testing-library packages: 12345# npmnpm i @testing-library/jest-dom @testing-library/react @testing-library/user-event --save-dev# yarnyarn add -D @testing-library/jest-dom @testing-library/react @testing-library/user-event Add a script test to package.json: 1&quot;test&quot;: &quot;jest&quot; Install SWC by this command: 12345# npmnpm i @swc/core @swc/jest --save-dev# yarnyarn add -D @swc/core @swc/jest Configure swc by creating .swcrc file at the root of the project: 1234567891011121314151617181920212223242526272829303132// .swcrc&#123; &quot;jsc&quot;: &#123; &quot;target&quot;: &quot;es2017&quot;, &quot;parser&quot;: &#123; &quot;syntax&quot;: &quot;typescript&quot;, &quot;tsx&quot;: true, &quot;decorators&quot;: false, &quot;dynamicImport&quot;: false &#125;, &quot;transform&quot;: &#123; &quot;react&quot;: &#123; &quot;pragma&quot;: &quot;React.createElement&quot;, &quot;pragmaFrag&quot;: &quot;React.Fragment&quot;, &quot;throwIfNamespace&quot;: true, &quot;development&quot;: false, &quot;useBuiltins&quot;: false, &quot;runtime&quot;: &quot;automatic&quot; &#125;, &quot;hidden&quot;: &#123; &quot;jest&quot;: true &#125; &#125; &#125;, &quot;module&quot;: &#123; &quot;type&quot;: &quot;commonjs&quot;, &quot;strict&quot;: false, &quot;strictMode&quot;: true, &quot;lazy&quot;: false, &quot;noInterop&quot;: false &#125;&#125; Note that if you use JSX, you need to set jsc.transform.react.runtime to automatic (as above). If you use React.createElement, you must set it to classic. Configure Jest Create a file jest.config.cjs at the root project: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546module.exports = &#123; roots: [&quot;&lt;rootDir&gt;/src&quot;], collectCoverageFrom: [ &quot;src/**/*.&#123;js,jsx,ts,tsx&#125;&quot;, &quot;!src/**/*.d.ts&quot;, &quot;!src/mocks/**&quot;, ], coveragePathIgnorePatterns: [], setupFilesAfterEnv: [&quot;./config/jest/setupTests.js&quot;], testEnvironment: &quot;jsdom&quot;, modulePaths: [&quot;&lt;rootDir&gt;/src&quot;], transform: &#123; &quot;^.+\\\\.(ts|js|tsx|jsx)$&quot;: &quot;@swc/jest&quot;, &quot;^.+\\\\.css$&quot;: &quot;&lt;rootDir&gt;/config/jest/cssTransform.cjs&quot;, &quot;^(?!.*\\\\.(js|jsx|mjs|cjs|ts|tsx|css|json)$)&quot;: &quot;&lt;rootDir&gt;/config/jest/fileTransform.cjs&quot;, &#125;, transformIgnorePatterns: [ &quot;[/\\\\\\\\]node_modules[/\\\\\\\\].+\\\\.(js|jsx|mjs|cjs|ts|tsx)$&quot;, &quot;^.+\\\\.module\\\\.(css|sass|scss)$&quot;, ], modulePaths: [&quot;&lt;rootDir&gt;/src&quot;], moduleNameMapper: &#123; &quot;^react-native$&quot;: &quot;react-native-web&quot;, &quot;^.+\\\\.module\\\\.(css|sass|scss)$&quot;: &quot;identity-obj-proxy&quot;, &#125;, moduleFileExtensions: [ // Place tsx and ts to beginning as suggestion from Jest team // https://jestjs.io/docs/configuration#modulefileextensions-arraystring &quot;tsx&quot;, &quot;ts&quot;, &quot;web.js&quot;, &quot;js&quot;, &quot;web.ts&quot;, &quot;web.tsx&quot;, &quot;json&quot;, &quot;web.jsx&quot;, &quot;jsx&quot;, &quot;node&quot;, ], watchPlugins: [ &quot;jest-watch-typeahead/filename&quot;, &quot;jest-watch-typeahead/testname&quot;, ], resetMocks: true,&#125;; Create config/jest/cssTransform.cjs and config/jest/fileTransform.cjs to transform css and files. Those two files are from CRA. 123456789101112131415// config/jest/cssTransform.cjs&quot;use strict&quot;;// This is a custom Jest transformer turning style imports into empty objects.// http://facebook.github.io/jest/docs/en/webpack.htmlmodule.exports = &#123; process() &#123; return &quot;module.exports = &#123;&#125;;&quot;; &#125;, getCacheKey() &#123; // The output is always the same. return &quot;cssTransform&quot;; &#125;,&#125;; 1234567891011121314151617181920212223242526272829303132333435363738394041// config/jest/fileTransform.cjs&quot;use strict&quot;;const path = require(&quot;path&quot;);const camelcase = require(&quot;camelcase&quot;);// This is a custom Jest transformer turning file imports into filenames.// http://facebook.github.io/jest/docs/en/webpack.htmlmodule.exports = &#123; process(src, filename) &#123; const assetFilename = JSON.stringify(path.basename(filename)); if (filename.match(/\\.svg$/)) &#123; // Based on how SVGR generates a component name: // https://github.com/smooth-code/svgr/blob/01b194cf967347d43d4cbe6b434404731b87cf27/packages/core/src/state.js#L6 const pascalCaseFilename = camelcase(path.parse(filename).name, &#123; pascalCase: true, &#125;); const componentName = `Svg$&#123;pascalCaseFilename&#125;`; return `const React = require(&#x27;react&#x27;); module.exports = &#123; __esModule: true, default: $&#123;assetFilename&#125;, ReactComponent: React.forwardRef(function $&#123;componentName&#125;(props, ref) &#123; return &#123; $$typeof: Symbol.for(&#x27;react.element&#x27;), type: &#x27;svg&#x27;, ref: ref, key: null, props: Object.assign(&#123;&#125;, props, &#123; children: $&#123;assetFilename&#125; &#125;) &#125;; &#125;), &#125;;`; &#125; return `module.exports = $&#123;assetFilename&#125;;`; &#125;,&#125;; Remember to install camelcase as a dev dependency (do not install version 7, since it dropped the support for CommonJS): 12345# npmnpm install --save-dev camelcase@6# yarnyarn add -D camelcase@6 add ability to search test files and test names in pattern mode. Note that if you using Jest ≤ 26, please install &#106;&#x65;&#115;&#x74;&#45;&#x77;&#x61;&#x74;&#x63;&#104;&#x2d;&#116;&#121;&#112;&#x65;&#97;&#x68;&#x65;&#97;&#x64;&#x40;&#48;&#46;&#54;&#46;&#53;, if you use Jest ≥ 27, please use jest-watch-typeahead^1.0.0: 123456789101112# npm// For jest &lt;= 26npm i jest-watch-typeahead@0.6.5 --save-dev// For jest &gt;= 27npm i jest-watch-typeahead --save-dev# yarn// For jest &lt;= 26yarn add -D jest-watch-typeahead@0.6.5// For jest &gt;= 27yarn add -D jest-watch-typeahead Everything you want to do to your test environment such as extends the jest matchers with @testing-library&#x2F;jest-dom, mock some APIs that’s not implemented in jdom, you can put to config/jest/setupTests.js: 123456789101112131415161718// config/jest/setupTests.jsimport &quot;@testing-library/jest-dom&quot;;window.matchMedia = (query) =&gt; (&#123; matches: false, media: query, onchange: null, addEventListener: jest.fn(), removeEventListener: jest.fn(), dispatchEvent: jest.fn(), addListener: jest.fn(), removeListener: jest.fn(),&#125;);Object.defineProperty(URL, &quot;createObjectURL&quot;, &#123; writable: true, value: jest.fn(),&#125;); To get started with the JSDOM test environment, the jest-environment-jsdom package must be installed if it’s not already: 12345# npmnpm install --save-dev jest-environment-jsdom# yarnyarn add --dev jest-environment-jsdom Install other testing libraries, such as react-test-renderer: 12345# npmnpm install --save-dev react-test-renderer# yarnyarn add -D react-test-renderer Run this command in your terminal: 12345# npmnpm test# yarnyarn test","categories":[{"name":"Testing","slug":"Testing","permalink":"https://jiaopucun.com/categories/Testing/"}],"tags":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://jiaopucun.com/tags/TypeScript/"},{"name":"Vite","slug":"Vite","permalink":"https://jiaopucun.com/tags/Vite/"},{"name":"Jest","slug":"Jest","permalink":"https://jiaopucun.com/tags/Jest/"}]},{"title":"How to create React functional components in TypeScript","slug":"how-to-create-react-functional-components-in-typescript","date":"un22fin22","updated":"un00fin00","comments":true,"path":"2024/01/30/how-to-create-react-functional-components-in-typescript/","link":"","permalink":"https://jiaopucun.com/2024/01/30/how-to-create-react-functional-components-in-typescript/","excerpt":"","text":"12345678910111213141516171819// Declaring type of props - see &quot;Typing Component Props&quot; for more examplestype AppProps = &#123; message: string;&#125;; /* use `interface` if exporting so that consumers can extend */// Easiest way to declare a Function Component; return type is inferred.const App = (&#123; message &#125;: AppProps) =&gt; &lt;div&gt;&#123;message&#125;&lt;/div&gt;;// you can choose annotate the return type so an error is raised if you accidentally return some other typeconst App = (&#123; message &#125;: AppProps): React.JSX.Element =&gt; &lt;div&gt;&#123;message&#125;&lt;/div&gt;;// you can also inline the type declaration; eliminates naming the prop types, but looks repetitiveconst App = (&#123; message &#125;: &#123; message: string &#125;) =&gt; &lt;div&gt;&#123;message&#125;&lt;/div&gt;;// Alternatively, you can use `React.FunctionComponent` (or `React.FC`), if you prefer.// With latest React types and TypeScript 5.1. it&#x27;s mostly a stylistic choice, otherwise discouraged.const App: React.FunctionComponent&lt;&#123; message: string &#125;&gt; = (&#123; message &#125;) =&gt; ( &lt;div&gt;&#123;message&#125;&lt;/div&gt;); If your component is defined as a regular function with the function keyword, then you cannot use React.FunctionComponent keyword, because TypeScript does not support specify types for function declarations. 123456interface AppProps &#123; message: string;&#125;export default function App(&#123;message&#125;: AppProps) &#123; return &lt;p&gt;Hello:&#123;message&#125;&lt;/p&gt;&#125;","categories":[],"tags":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://jiaopucun.com/tags/TypeScript/"},{"name":"React","slug":"React","permalink":"https://jiaopucun.com/tags/React/"}]},{"title":"Debugging Node.js","slug":"debugging-node-js","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2024/01/24/debugging-node-js/","link":"","permalink":"https://jiaopucun.com/2024/01/24/debugging-node-js/","excerpt":"","text":"Adding the debugger keyword in your source fileWhen a JavaScript application is executed through a debugger, execution halts when the debugger keyword is encountered, and control is passed to the developer. For example, in your index.ts file: 1234567import &#123; sum &#125; from &quot;./calc.js&quot;;let printMessage = (msg: string): void =&gt; console.log(`Message: $&#123;msg&#125;`);let message = &quot;Hello, TypeScript&quot;;printMessage(message);debugger;let total = sum(100, 200, 300);console.log(`Total: $&#123;total&#125;`); There will be no change in the output when the code is executed because Node.js ignores the debugger keyword by default. Using Visual Studio Code for debuggingTo set up the configuration for debugging, select Add Configuration from the Run menu and select Node.js from the list of environments when prompted, as shown in: The editor will create a .vscode folder in the project and add to it a file called launch.json, which is used to configure the debugger. Change the value of the program property so that the debugger executes the JavaScript code, asshown below: 12345678910111213&#123; &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ &#123; &quot;type&quot;: &quot;node&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;name&quot;: &quot;Launch Program&quot;, &quot;skipFiles&quot;: [&quot;&lt;node_internals&gt;/**&quot;], &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/dist/index.js&quot;, &quot;outFiles&quot;: [&quot;$&#123;workspaceFolder&#125;/**/*.js&quot;] &#125; ]&#125; Save the changes to the launch.json file and select Start Debugging from the Run menu. Visual Studio Code will execute the index.js file under thecontrol of the Node.js debugger. Execution will continue as normal until the debugger statement is reached, at which point execution halts and control is transferred to the debugging pop-up, as shown below: The state of the application is displayed in the sidebar, showing the variables that are set at the point that execution was halted. A standard set of debugging features is available, including setting watches, stepping into and over statements, and resuming execution. The Debug Console window allows JavaScript statements to be executed in the context of the application so that entering a variable name and pressing Return, for example, will return the value assigned to that variable. Using the remote Node.js debugging featureThe integrated Node.js debugger is useful but awkward to use. The same features can be used remotely using the Google Chrome developer tools feature. First, start Node.js by running the command shown below: 1node --inspect-brk dist/index.js The inspect-brk argument starts the debugger and halts execution immediately. This is required for the example application because it runs and then exits. For applications that start and then enter an indefinite loop, such as a web server, the inspect argument can be used. When it starts, Node.js will produce a message like this: 12Debugger listening on ws://127.0.0.1:9229/e3cf5393-23c8-4393-99a1For help, see: https://nodejs.org/en/docs/inspector The URL in the output is used to connect to the debugger and take control of execution. Open a new Chrome window and navigate to chrome://inspect. Click the Configure button and add the IP address and port from the URL from the previous message. For my machine, this is 127.0.0.1:9229, as shown below: Click the Done button and wait a moment while Chrome locates the Node.js runtime.Once it has been located, it will appear in the Remote Target list, as shown below: Click the inspect link to open a new Chrome developer tools window that is connected to the Node.js runtime. Control of execution is handled by the standard developer tool buttons, and resuming execution will let the runtime proceed until the debugger statement is reached. The initial view of the code in the debugger window will be of the JavaScript code, but the source maps will be used once execution resumes, as shown below: References https://livebook.manning.com/book/essential-typescript-5-third-edition/chapter-6/57","categories":[{"name":"Debugging","slug":"Debugging","permalink":"https://jiaopucun.com/categories/Debugging/"}],"tags":[{"name":"Node","slug":"Node","permalink":"https://jiaopucun.com/tags/Node/"}]},{"title":"Parsing Error: Cannot read file 'tsconfig.json'","slug":"typescript-parsing-error-cannot-read-file","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2024/01/24/typescript-parsing-error-cannot-read-file/","link":"","permalink":"https://jiaopucun.com/2024/01/24/typescript-parsing-error-cannot-read-file/","excerpt":"","text":"To solve the error “Parsing Error: Cannot read file ‘tsconfig.json’”, update your .eslintrc.js file to set the tsconfigRootDir option to __dirname to force ESLint to resolve your project configuration relative to the folder where .eslintrc.js is located. Note: If there is a .eslintrc file instead in your application, you should transform it into .eslintrc.js first. Open your .eslintrc.js file and add or update your parserOptions object to look as follows. .eslintrc.js 12345678module.exports = &#123; parserOptions: &#123; project: &quot;tsconfig.json&quot;, tsconfigRootDir: __dirname, sourceType: &quot;module&quot;, &#125;, // ... rest&#125;; By setting the parserOptions object we tell ESLint which JavaScript language options we want to support. The sourceType option is set to module to indicate that we want to support ES6 Modules. The tsconfigRootDir option is set to __dirname, so ESLint resolves our project config relative to the .eslintrc.js file.","categories":[],"tags":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://jiaopucun.com/tags/TypeScript/"},{"name":"ESLint","slug":"ESLint","permalink":"https://jiaopucun.com/tags/ESLint/"}]},{"title":"Modules in TypeScript","slug":"modules-in-typescript","date":"un11fin11","updated":"un00fin00","comments":true,"path":"2024/01/22/modules-in-typescript/","link":"","permalink":"https://jiaopucun.com/2024/01/22/modules-in-typescript/","excerpt":"","text":"package.json “type” fieldThe &quot;type&quot; field defines the module format that Node.js uses for all .js files that have that package.json file as their nearest parent. If the nearest parent package.json lacks a &quot;type&quot; field, or contains &quot;type&quot;: &quot;commonjs&quot;, .js files are treated as CommonJS. If the volume root is reached and no package.json is found, .js files are treated as CommonJS. In short, all .js files are treated as CommonJS modules unless &quot;type&quot;: &quot;module&quot; is defined in package.json. Node.js uses CommonJS by default, you need to enable the ES module support by setting &quot;type&quot;: &quot;module&quot; in your package.json file. Suppose there are two .js files in your app and they are both written in ES module, the first util.js: 123export function printMessage(msg) &#123; console.log(&quot;The message is: &quot; + msg);&#125; And you import it in the main file index.js, 123import &#123; printMessage &#125; from &quot;./util.js&quot;;printMessage(&quot;Hello&quot;); Then if you try to run this file on Node.js, you might encounter an error. 1node index.js Error: 1234import printMessage from &#x27;./util.js&#x27;;^^^^^^SyntaxError: Cannot use import statement outside a module There are two ways to fix this problem. You could rewrite your files into CommonJS format, the other way is to add &quot;type&quot;: &quot;module&quot; in your package.json file, which is much easier. 1234// package.json&#123; &quot;type&quot;: &quot;module&quot;&#125; Output: 1The message is: Hello TypeScript also consult the nearest package.json file to determine the module format when a file with a .js or .ts extension. TSConfig Option: module fieldThis is a TypeScript compiler option field which can be found in the tsconfig.json file. It sets what module code is generated. Allowed values: none commonjs amd umd system es6&#x2F;es2015 es2020 es2022 esnext node16 nodenext You very likely want &quot;nodenext&quot; for modern Node.js projects, &quot;esnext&quot; for others. Here’s some example output for this file: 1234// @filename: index.tsimport &#123; valueOfPi &#125; from &quot;./constants&quot;;export const twoPi = valueOfPi * 2; CommonJS 12345&quot;use strict&quot;;Object.defineProperty(exports, &quot;__esModule&quot;, &#123; value: true &#125;);exports.twoPi = void 0;const constants_1 = require(&quot;./constants&quot;);exports.twoPi = constants_1.valueOfPi * 2; UMD 1234567891011121314(function (factory) &#123; if (typeof module === &quot;object&quot; &amp;&amp; typeof module.exports === &quot;object&quot;) &#123; var v = factory(require, exports); if (v !== undefined) module.exports = v; &#125; else if (typeof define === &quot;function&quot; &amp;&amp; define.amd) &#123; define([&quot;require&quot;, &quot;exports&quot;, &quot;./constants&quot;], factory); &#125;&#125;)(function (require, exports) &#123; &quot;use strict&quot;; Object.defineProperty(exports, &quot;__esModule&quot;, &#123; value: true &#125;); exports.twoPi = void 0; const constants_1 = require(&quot;./constants&quot;); exports.twoPi = constants_1.valueOfPi * 2;&#125;); AMD 12345678910define([&quot;require&quot;, &quot;exports&quot;, &quot;./constants&quot;], function ( require, exports, constants_1) &#123; &quot;use strict&quot;; Object.defineProperty(exports, &quot;__esModule&quot;, &#123; value: true &#125;); exports.twoPi = void 0; exports.twoPi = constants_1.valueOfPi * 2;&#125;); System 123456789101112131415System.register([&quot;./constants&quot;], function (exports_1, context_1) &#123; &quot;use strict&quot;; var constants_1, twoPi; var __moduleName = context_1 &amp;&amp; context_1.id; return &#123; setters: [ function (constants_1_1) &#123; constants_1 = constants_1_1; &#125;, ], execute: function () &#123; exports_1(&quot;twoPi&quot;, (twoPi = constants_1.valueOfPi * 2)); &#125;, &#125;;&#125;); ESNext 12import &#123; valueOfPi &#125; from &quot;./constants&quot;;export const twoPi = valueOfPi * 2; ES2015&#x2F;ES6&#x2F;ES2020&#x2F;ES2022 12import &#123; valueOfPi &#125; from &quot;./constants&quot;;export const twoPi = valueOfPi * 2; node16&#x2F;nodenext The emitted JavaScript uses either CommonJS or ES2020 output depending on the file extension and the value of the type setting in the nearest package.json. If the value is module, the format is ES2020, otherwise CommonJS. None 12345&quot;use strict&quot;;Object.defineProperty(exports, &quot;__esModule&quot;, &#123; value: true &#125;);exports.twoPi = void 0;const constants_1 = require(&quot;./constants&quot;);exports.twoPi = constants_1.valueOfPi * 2; Include “.js” extension for custom modulesIf you want to use the official TypeScript compiler to generate JavaScript, you have to add the extension because Node.js refuses to allow extensionless relative imports TypeScript refuses to add import extensions at compile time If you want or need to write extensionless imports in TypeScript, you need a bundler or an alternative build tool that can add the .js extensions. For example, you can transpile TypeScript to JavaScript using Babel and babel-plugin-add-import-extension. However, you’ll still need TypeScript (tsc) itself to do type checking and generate type declaration files, so you’ll need a tsconfig.json with compilerOptions.moduleResolution set to &quot;Bundler&quot;.","categories":[],"tags":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://jiaopucun.com/tags/TypeScript/"}]},{"title":"Getting started with SWR","slug":"getting-started-with-swr","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2024/01/17/getting-started-with-swr/","link":"","permalink":"https://jiaopucun.com/2024/01/17/getting-started-with-swr/","excerpt":"","text":"SWR is a popular library which provides React Hooks for Data Fetching. InstallationInside your React project directory, run the following: 1npm i swr If you’re using yarn: 1yarn add swr Quick StartFor normal RESTful APIs with JSON data, first you need to create a fetcher function, which is just a wrapper of the native fetch: 1const fetcher = (...args) =&gt; fetch(...args).then((res) =&gt; res.json()); If you’re using Axios: 12345678import axios from &quot;axios&quot;;const fetcher = (url) =&gt; axios.get(url).then((res) =&gt; res.data);function App() &#123; const &#123; data, error &#125; = useSWR(&quot;/api/data&quot;, fetcher); // ...&#125; Normally, there’re 3 possible states of a request: “loading”, “ready”, or “error”. You can use the value of data, error and isLoading to determine the current state of the request, and return the corresponding UI. Make It ReusableWhen building a web app, you might need to reuse the data in many places of the UI. It is incredibly easy to create reusable data hooks on top of SWR: 123456789function useUser(id) &#123; const &#123; data, error, isLoading &#125; = useSWR(`/api/user/$&#123;id&#125;`, fetcher); return &#123; user: data, isLoading, isError: error, &#125;;&#125; And use it in your components: 1234567function Avatar(&#123; id &#125;) &#123; const &#123; user, isLoading, isError &#125; = useUser(id); if (isLoading) return &lt;Spinner /&gt;; if (isError) return &lt;Error /&gt;; return &lt;img src=&#123;user.avatar&#125; /&gt;;&#125; By adopting this pattern, you can forget about fetching data in the imperative way: start the request, update the loading state, and return the final result. Instead, your code is more declarative: you just need to specify what data is used by the component. API12345const &#123; data, error, isLoading, isValidating, mutate &#125; = useSWR( key, fetcher, options); The key is required, it’s a unique key string for the request (or a function &#x2F; array &#x2F; null). The rest arguments are optional. You can set initial data to be returned when the request is loading with the fallbackData attribute in the options. 12345678910111213141516171819202122232425262728293031323334import useSWR from &quot;swr&quot;;// The inital dataconst initalState = &#123; name: &quot;&quot;,&#125;;function fetcher(...args) &#123; return fetch(...args).then((res) =&gt; res.json());&#125;function useUser(username) &#123; const &#123; data, error, isLoading &#125; = useSWR( `https://api.github.com/users/$&#123;username&#125;`, fetcher, &#123; // Set it as `fallbackData` fallbackData: initalState, &#125; ); return &#123; user: data, isLoading, isError: error, &#125;;&#125;export default function App() &#123; const &#123; user, isLoading, isError &#125; = useUser(&quot;rainyjune&quot;); return ( &lt;div className=&quot;App&quot;&gt; &lt;h1&gt;Hello &#123;user.name&#125;&lt;/h1&gt; &lt;h2&gt;Start editing to see some magic happen!&lt;/h2&gt; &lt;/div&gt; );&#125; Demo:","categories":[],"tags":[{"name":"SWR","slug":"SWR","permalink":"https://jiaopucun.com/tags/SWR/"}]},{"title":"Middleware with Async Thunk","slug":"middleware-with-async-thunk","date":"un00fin00","updated":"un00fin00","comments":true,"path":"2024/01/14/middleware-with-async-thunk/","link":"","permalink":"https://jiaopucun.com/2024/01/14/middleware-with-async-thunk/","excerpt":"","text":"useState vs useReducerWe can use the useState to internally maintain state of a react component but as soon the internal state gets complex the number of useState can get overwhelming. For this we can use the useReducer. useReducerFor the sake of learning middleware to handle async operations the example has been kept simple. The following example is taken from the official react documentation. It has two buttons one is used to increment and other is used to decrement. The application uses useReducer to maintain its state. 1234567891011121314151617181920212223const initialState = &#123; count: 0 &#125;;function reducer(state, action) &#123; switch (action.type) &#123; case &quot;increment&quot;: return &#123; count: state.count + 1 &#125;; case &quot;decrement&quot;: return &#123; count: state.count - 1 &#125;; default: throw new Error(); &#125;&#125;function Counter() &#123; const [state, dispatch] = useReducer(reducer, initialState); return ( &lt;&gt; Count: &#123;state.count&#125; &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: &quot;decrement&quot; &#125;)&#125;&gt;-&lt;/button&gt; &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: &quot;increment&quot; &#125;)&#125;&gt;+&lt;/button&gt; &lt;/&gt; );&#125; Lets suppose that on the button click we want to call an api, and increment it by the value from returned the api. I know its a superficial example but the point is to demonstrate how to handle async in useReducer As we know that reducers are pure function and can not have any side effect so we can not perform the api call inside the useReducer. To avoid this we can use thunks ThunkWhat is a thunk? thunk is function which is returned by another function. Its more easier to explain it via code: 123function notAThunk() &#123; return function aThunk() &#123;&#125;;&#125; Thunk is a piece of code encapsulated inside a function which can be called at a later time. So instead of passing an object to the dispatch function we will pass a function. This passed function is thunk, and will be executed at a later time by the middleware. lets modify our code so it can handle the thunk via middleware. Inside Counter we will replace: 1const [state, dispatch] = useReducer(reducer, initialState); with the following code: 123456789const [state, orignalDispatch] = useReducer(reducer, initialState);const dispatch = (action) =&gt; &#123; if (isFunction(action)) &#123; action(orignalDispatch); &#125; else &#123; orignalDispatch(action); &#125;&#125;; We have renamed the dispatch returned by useReducer to orignalDispatch. In essence we have created a middleware. As the following code is executed whenever we dispatach an action and before the action is received by the reducer 12345if (isFunction(action)) &#123; action(orignalDispatch);&#125; else &#123; orignalDispatch(action);&#125; We have created a new function called dispatch. Our implementation first checks if the passed action is a type of function if it is a function then it is called with orignalDispatch as a arugment, otherwise we simply pass the action to orignalDispatch. Now lets simulate a fake api call: 1234567const asynIncrementApi = () =&gt; &#123; return new Promise((resolve) =&gt; &#123; setTimeout(() =&gt; &#123; resolve(Math.floor(Math.random() \\* 10) + 1); &#125;, 1000); &#125;);&#125;; asynIncrementApi returns a promise with a value between 1 to 10 after atleast 1000ms have passed. With api in place, Lets add a new button Async Increment to the Counter. 1234Count: &#123;state.count&#125;&lt;button onClick=&#123;() =&gt; dispatch(&#123; type: &quot;decrement&quot; &#125;)&#125;&gt;-&lt;/button&gt;&lt;button onClick=&#123;() =&gt; dispatch(&#123; type: &quot;increment&quot; &#125;)&#125;&gt;+&lt;/button&gt;&lt;button&gt;Async Increment&lt;/button&gt; Lets hook up Async Increment with event handler. 12345678910111213141516&lt;button onClick=&#123;() =&gt; &#123; dispatch(() =&gt; &#123; asynIncrementApi().then((value) =&gt; &#123; console.log(value); dispatch(&#123; type: &quot;increment_async&quot;, count: value, &#125;); &#125;); &#125;); &#125;&#125;&gt; &#123;&quot; &quot;&#125; Async Increment &gt;&#123;&quot; &quot;&#125;&lt;/button&gt; When user clicks on the Async Increment button, its event handler is executed which makes a call to dispatch function. The action to dispatch function is our thunk. In the above example following function is the thunk 12345678() =&gt; &#123; asynIncrementApi().then((value) =&gt; &#123; dispatch(&#123; type: &quot;increment_async&quot;, count: value, &#125;); &#125;);&#125;; Inside the dispatch function our check isFunction returns true and executes the thunk. In this case our thunk ignores the parameters passed to it. It is because the dispatch is in our scope but there might be some case where the dispatch might not be in scope (like if code is outside the component or in a separate file) so its better to pass it. Inside our thunk the backend api is called and as soon the promise returned by the api is resolved we dispatch a new action with type of increment_async and count with value returned from the backend. This is all which is required to handle the asyc actions. Now lets update our reducer to handle the increment_async. 12case &quot;increment_async&quot;:return &#123; count: state.count + action.count &#125;; Below is all the code and here is link to the codesandbox 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273import &quot;./styles.css&quot;;import &#123; useReducer &#125; from &quot;react&quot;;function isFunction(functionToCheck) &#123; return ( functionToCheck &amp;&amp; &#123;&#125;.toString.call(functionToCheck) === &quot;[object Function]&quot; );&#125;const initialState = &#123; count: 0 &#125;;function reducer(state, action) &#123; console.log(action.type); switch (action.type) &#123; case &quot;increment&quot;: return &#123; count: state.count + 1 &#125;; case &quot;increment_async&quot;: return &#123; count: state.count + action.count &#125;; case &quot;decrement&quot;: return &#123; count: state.count - 1 &#125;; default: throw new Error(); &#125;&#125;const asynIncrementApi = () =&gt; &#123; return new Promise((resolve) =&gt; &#123; setTimeout(() =&gt; &#123; resolve(Math.floor(Math.random() \\* 10) + 1); &#125;, 1000); &#125;);&#125;;function Counter() &#123;const [state, orignalDispatch] = useReducer(reducer, initialState);const dispatch = (action) =&gt; &#123; if (isFunction(action)) &#123; action(orignalDispatch); &#125; else &#123; orignalDispatch(action); &#125;&#125;;return ( &lt;&gt; Count: &#123;state.count&#125; &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: &quot;decrement&quot; &#125;)&#125;&gt;-&lt;/button&gt; &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: &quot;increment&quot; &#125;)&#125;&gt;+&lt;/button&gt; &lt;button onClick=&#123;() =&gt; &#123; dispatch(() =&gt; &#123; asynIncrementApi().then((value) =&gt; &#123; dispatch(&#123; type: &quot;increment_async&quot;, count: value &#125;); &#125;); &#125;); &#125;&#125;&gt; Async Increment &lt;/button&gt; &lt;/&gt;);&#125;export default function App() &#123; return ( &lt;div className=&quot;App&quot;&gt; &lt;Counter /&gt; &lt;/div&gt; );&#125; Refactor the middleware into a separate hookLets create a new hook which encapsulates the logic of creating reducer and middleware into a separate hook. 12345678910111213141516const useThunkReducer = (reducer, initialState) =&gt; &#123; const [state, dispatch] = useReducer(reducer, initialState); const enhancedDispatch = useCallback( (action) =&gt; &#123; if (typeof action === &quot;function&quot;) &#123; action(dispatch); &#125; else &#123; dispatch(action); &#125; &#125;, [dispatch] ); return [state, enhancedDispatch];&#125;; Now we use useThunkReducer instead of useReducer. This example was inspired from here. Sourcehttps://www.hassamali.com/posts/middleware-with-async-thunk","categories":[{"name":"Frontend","slug":"Frontend","permalink":"https://jiaopucun.com/categories/Frontend/"}],"tags":[{"name":"React","slug":"React","permalink":"https://jiaopucun.com/tags/React/"}]},{"title":"How to use images with Vite and Vue","slug":"how-to-use-images-with-vite-and-vue","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2024/01/10/how-to-use-images-with-vite-and-vue/","link":"","permalink":"https://jiaopucun.com/2024/01/10/how-to-use-images-with-vite-and-vue/","excerpt":"","text":"IntroYou’ve basically got 3 different ways to do it. Put images in the public folder and reference them normally (just a forward slash and the image name). Import images directly into your view&#x2F;project and use them in your template. Use the native ESM import.meta.url to assign images to variables, or create a function to use multiple images more easily. I’ll follow up at the end about referencing images from an API. 1. Public folderThe simplest solution is to put your assets into the public folder, and then reference them as you normally would. 1234// add circle.svg to the public directory// public images are served at the root path so you only need &#x27;/&#x27; + your image path&lt;img src=&quot;/circle.svg&quot;&gt; 2. Import files individuallyYou can import each image you need as a variable that can then be referenced where you need it. The obvious drawback to this is if you have multiple images. 1234567&lt;script setup&gt;import imgUrl from &quot;./assets/img.png&quot;;&lt;/script&gt;&lt;template&gt; &lt;img :src=&quot;imgUrl&quot; /&gt;&lt;/template&gt; 3. Import images with import.meta.urlimport.meta.url is a native ESM feature that exposes the current module’s URL. Combining it with the native URL constructor, we can obtain the full, resolved URL of a static asset using relative path from a JavaScript module: More on this from the Vite docs here. Similar to example #2, you assign your image path to a constant and then use it in your template. Be aware you have to write out the entire path to the file i.e. ./assets/img.png: 1234567&lt;script setup&gt;const imgUrl = new URL(&quot;./assets/img.png&quot;, import.meta.url).href;&lt;/script&gt;&lt;template&gt; &lt;img :src=&quot;imgUrl&quot; /&gt;&lt;/template&gt; Dynamically import images using a function and template literals I’ve found this to be the most useful approach, especially with multiple images. Be aware, in the Vite docs, the ./dir/ part of the path is a placeholder — update it to the path and folder of your project. 1234567891011121314// from the docsfunction getImageUrl(name) &#123; return new URL(`./dir/$&#123;name&#125;.png`, import.meta.url).href;&#125;// updated with your project&#x27;s assets folder setupfunction getImageUrl(name, ext) &#123; return new URL(`../assets/img/$&#123;name&#125;.png`, import.meta.url).href;&#125;// works with svg and other file formats as wellfunction getImageUrl(name) &#123; return new URL(`../assets/img/$&#123;name&#125;.svg`, import.meta.url).href;&#125; You can also define a second parameter in the function so the image extension can be dynamic as well i.e. .jpg, .png, .svg etc. 12345678910111213&lt;script setup&gt;// where &#x27;name&#x27; is the actual name of the file, and &#x27;ext&#x27; is the extension// i.e. myjpg.jpgfunction getImageUrl(name, ext) &#123; return new URL(`./assets/img/$&#123;name&#125;.$&#123;ext&#125;`, import.meta.url).href;&#125;&lt;/script&gt;&lt;template&gt; &lt;img :src=&quot;getImageUrl(&#x27;myjpg&#x27;, &#x27;jpg&#x27;)&quot; alt=&quot;&quot; /&gt; &lt;img :src=&quot;getImageUrl(&#x27;mysvg&#x27;, &#x27;svg&#x27;)&quot; alt=&quot;&quot; /&gt;&lt;/template&gt; 4. Using dynamic images from an APIUsing images from an API doesn’t require any special treatment outside of normal data rendering in Vue. Just make your API request, get your data, and render it in the template. 1234567891011121314151617181920212223242526272829&lt;script setup&gt;import &#123; ref &#125; from &quot;vue&quot;;// declare an empty array variable to hold your dataconst photos = ref([]);//create a function to fetch your datafunction getImages() &#123; fetch(&quot;https://jsonplaceholder.typicode.com/albums/1/photos&quot;) .then((response) =&gt; response.json()) .then((data) =&gt; &#123; photos.value = data; console.log(data); &#125;);&#125;getImages();&lt;/script&gt;&lt;template&gt; // loop over photos array with some bootstrap classes for styling &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-lg-3&quot; v-for=&quot;(item, index) in photos&quot; :key=&quot;index&quot;&gt; &lt;img :src=&quot;item.url&quot; class=&quot;w-100&quot; /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt; 5. Dynamic inline background imagesI’ll add a little extra section here to quickly run over using dynamic background images with inline style tags. I’ll use the same function approach as in example #3.3, but use it inline. 123456789101112131415161718192021222324&lt;script setup&gt;// where &#x27;name&#x27; is the actual name of the file, and &#x27;ext&#x27; is the extension// i.e. myjpg.jpgfunction getImageUrl(name, ext) &#123; return new URL(`./assets/img/$&#123;name&#125;.$&#123;ext&#125;`, import.meta.url).href;&#125;&lt;/script&gt;&lt;template&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot; :style=&quot;&#123; background: &#x27;url(&#x27; + getImageUrl(&#x27;myjpg&#x27;, &#x27;jpg&#x27;) + &#x27;)&#x27;, &#x27;background-size&#x27;: &#x27;cover&#x27;, &#125;&quot; &gt; &lt;div class=&quot;col-lg-3&quot;&gt; &lt;h1&gt;Background images!&lt;/h1&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt; ConclusionUsing images with Vite and Vue seemed like a head scratcher initially. I still don’t fully understand why it’s so counterintuitive when referencing local and&#x2F;or dynamic assets. But hopefully this gives you a better idea. Again, I found the approach of using a function with dynamic file name and extension parameters to work best for multiple images with different formats. Be sure to check out the Vite docs for more info. Sourcehttps:&#x2F;&#x2F;medium.com&#x2F;@andrewmasonmedia&#x2F;how-to-use-images-with-vite-and-vue-937307a150c0","categories":[{"name":"Frontend","slug":"Frontend","permalink":"https://jiaopucun.com/categories/Frontend/"}],"tags":[{"name":"Vite","slug":"Vite","permalink":"https://jiaopucun.com/tags/Vite/"},{"name":"Vue","slug":"Vue","permalink":"https://jiaopucun.com/tags/Vue/"}]},{"title":"How to set up Prettier and automatic formatting on VS Code","slug":"how-to-set-up-prettier-and-automatic-formatting-on-vs-code","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2024/01/10/how-to-set-up-prettier-and-automatic-formatting-on-vs-code/","link":"","permalink":"https://jiaopucun.com/2024/01/10/how-to-set-up-prettier-and-automatic-formatting-on-vs-code/","excerpt":"","text":"Prettier is a code formatter that makes your code look neat and consistent. To learn more about Prettier, please visit the website here. Below is an easy way to set up Prettier on your VS Code and allow automatic formatting. Step 1: Install PrettierClick on the extension tab and type in Prettier. Once found, click on it to proceed to installation. Step 2: Set autosaveOnce installation is successful, open the settings of your VS Code. You can do this on Windows by pressing both Ctrl and ,. Click on the formatting section of the Text Editor tab and enable Format on Save Mode. Step 3: Format your codeNow, highlight your code and right-click. Select Format Document. Once you click on Format Document, a dialog box will tell you to configure your code formatter. This is to set your default code formatter. Click on the configure button. Step 4: Select Prettier as the defaultAfter you click on configure, select Prettier as the default formatter. And that’s it! Now, your code should be formatted with Prettier anytime you save your file.","categories":[{"name":"Tools","slug":"Tools","permalink":"https://jiaopucun.com/categories/Tools/"}],"tags":[{"name":"VS Code","slug":"VS-Code","permalink":"https://jiaopucun.com/tags/VS-Code/"},{"name":"Prettier","slug":"Prettier","permalink":"https://jiaopucun.com/tags/Prettier/"}]},{"title":"How to update React Context from inside a child component?","slug":"how-to-update-react-context-from-inside-a-child-component","date":"un22fin22","updated":"un00fin00","comments":true,"path":"2024/01/09/how-to-update-react-context-from-inside-a-child-component/","link":"","permalink":"https://jiaopucun.com/2024/01/09/how-to-update-react-context-from-inside-a-child-component/","excerpt":"","text":"Using HooksHooks were introduced in 16.8.0 so the following code requires a minimum version of 16.8.0 (scroll down for the class components example). CodeSandbox Demo 1. Setting parent state for dynamic contextFirstly, in order to have a dynamic context which can be passed to the consumers, I’ll use the parent’s state. This ensures that I’ve a single source of truth going forth. For example, my parent App will look like this: 12345678const App = () =&gt; &#123; const [language, setLanguage] = useState(&quot;en&quot;); const value = &#123; language, setLanguage &#125;; return ( ... );&#125;; The language is stored in the state. We will pass both language and the setter function setLanguage via context later. 2. Creating a contextNext, I created a language context like this: 12345// set the defaultsconst LanguageContext = React.createContext(&#123; language: &quot;en&quot;, setLanguage: () =&gt; &#123;&#125;&#125;); Here I’m setting the defaults for language (‘en’) and a setLanguage function which will be sent by the context provider to the consumer(s). These are only defaults and I’ll provide their values when using the provider component in the parent App. Note: the LanguageContext remains same whether you use hooks or class based components. 3. Creating a context consumerIn order to have the language switcher set the language, it should have the access to the language setter function via context. It can look something like this: 12345678const LanguageSwitcher = () =&gt; &#123; const &#123; language, setLanguage &#125; = useContext(LanguageContext); return ( &lt;button onClick=&#123;() =&gt; setLanguage(&quot;jp&quot;)&#125;&gt; Switch Language (Current: &#123;language&#125;) &lt;/button&gt; );&#125;; Here I’m just setting the language to ‘jp’ but you may have your own logic to set languages for this. 4. Wrapping the consumer in a providerNow I’ll render my language switcher component in a LanguageContext.Provider and pass in the values which have to be sent via context to any level deeper. Here’s how my parent App look like: 123456789101112131415const App = () =&gt; &#123; const [language, setLanguage] = useState(&quot;en&quot;); const value = &#123; language, setLanguage &#125;; return ( &lt;LanguageContext.Provider value=&#123;value&#125;&gt; &lt;h2&gt;Current Language: &#123;language&#125;&lt;/h2&gt; &lt;p&gt;Click button to change to jp&lt;/p&gt; &lt;div&gt; &#123;/* Can be nested */&#125; &lt;LanguageSwitcher /&gt; &lt;/div&gt; &lt;/LanguageContext.Provider&gt; );&#125;; Now, whenever the language switcher is clicked it updates the context dynamically. CodeSandbox Demo Using class componentsThe latest context API was introduced in React 16.3 which provides a great way of having a dynamic context. The following code requires a minimum version of 16.3.0. CodeSandbox Demo 1. Setting parent state for dynamic contextFirstly, in order to have a dynamic context which can be passed to the consumers, I’ll use the parent’s state. This ensures that I’ve a single source of truth going forth. For example, my parent App will look like this: 123456789101112class App extends Component &#123; setLanguage = language =&gt; &#123; this.setState(&#123; language &#125;); &#125;; state = &#123; language: &quot;en&quot;, setLanguage: this.setLanguage &#125;; ...&#125; The language is stored in the state along with a language setter method, which you may keep outside the state tree. 2. Creating a contextNext, I created a language context like this: 12345// set the defaultsconst LanguageContext = React.createContext(&#123; language: &quot;en&quot;, setLanguage: () =&gt; &#123;&#125;&#125;); Here I’m setting the defaults for language (‘en’) and a setLanguage function which will be sent by the context provider to the consumer(s). These are only defaults and I’ll provide their values when using the provider component in the parent App. 3. Creating a context consumerIn order to have the language switcher set the language, it should have the access to the language setter function via context. It can look something like this: 12345678910111213class LanguageSwitcher extends Component &#123; render() &#123; return ( &lt;LanguageContext.Consumer&gt; &#123;(&#123; language, setLanguage &#125;) =&gt; ( &lt;button onClick=&#123;() =&gt; setLanguage(&quot;jp&quot;)&#125;&gt; Switch Language (Current: &#123;language&#125;) &lt;/button&gt; )&#125; &lt;/LanguageContext.Consumer&gt; ); &#125;&#125; Here I’m just setting the language to ‘jp’ but you may have your own logic to set languages for this. 4. Wrapping the consumer in a providerNow I’ll render my language switcher component in a LanguageContext.Provider and pass in the values which have to be sent via context to any level deeper. Here’s how my parent App look like: 1234567891011121314151617181920212223class App extends Component &#123; setLanguage = language =&gt; &#123; this.setState(&#123; language &#125;); &#125;; state = &#123; language: &quot;en&quot;, setLanguage: this.setLanguage &#125;; render() &#123; return ( &lt;LanguageContext.Provider value=&#123;this.state&#125;&gt; &lt;h2&gt;Current Language: &#123;this.state.language&#125;&lt;/h2&gt; &lt;p&gt;Click button to change to jp&lt;/p&gt; &lt;div&gt; &#123;/* Can be nested */&#125; &lt;LanguageSwitcher /&gt; &lt;/div&gt; &lt;/LanguageContext.Provider&gt; ); &#125;&#125; Now, whenever the language switcher is clicked it updates the context dynamically. CodeSandbox Demo Sourcehttps://stackoverflow.com/a/51573816","categories":[{"name":"Frontend","slug":"Frontend","permalink":"https://jiaopucun.com/categories/Frontend/"}],"tags":[{"name":"React","slug":"React","permalink":"https://jiaopucun.com/tags/React/"}]},{"title":"Best way to do async request (ajax and side effects) in ReactJs using hooks, Redux style - useReducer()","slug":"best-way-to-do-async-in-reactjs-using-hooks","date":"un00fin00","updated":"un00fin00","comments":true,"path":"2024/01/07/best-way-to-do-async-in-reactjs-using-hooks/","link":"","permalink":"https://jiaopucun.com/2024/01/07/best-way-to-do-async-in-reactjs-using-hooks/","excerpt":"","text":"How to fetch data with React Hooks?You will mostly end-up with Robin’s blog post regarding the fecth method. But the problem using useState() is that we can’t execute any other code after fetch success. for an example:- do one fetch, if that fetch is successfull then call some JavaScript like clear the form using useState(), if fails display error message. That’s somehow difficult if we use useState(). fetch using useState()I created a codesandbox based on best practices to fetch data using hooks. Please feel free to update the script to make some Js after the fetch. in that codesandbox, try to execute some Js after the fetch. It won’t work becase it’s sync code. Always use useReducer() to fetch dataI am not big fan of useState() method due to it’s nature. I decided to use only useReducer() to fetch data and async operations. It’s same like Redux style. Create two useReducer() one for sync and the other for async (ajax and side effects) use the async reducer as a main and call the other reducer inside. if you see the code, you can easily understand Reducer for sync - only for state changes123456789101112131415161718192021222324252627function reducer(state, action) &#123; console.log(action.type); switch (action.type) &#123; case &quot;INIT_LOAD&quot;: return &#123; ...state, isLoading: true, isError: false &#125;; case &quot;LOAD_SUCCESS&quot;: return &#123; ...state, isLoading: false, isError: false, data: action.data &#125;; case &quot;LOAD_ERROR&quot;: return &#123; ...state, isLoading: false, isError: true &#125;; default: return state; &#125;&#125; Reducer for async - side effects and fetch123456789101112131415161718function dispatchMiddleware(dispatch) &#123; return async action =&gt; &#123; switch (action.type) &#123; case &quot;LOAD&quot;: console.log(&quot;LOAD&quot;); try &#123; const result = await axios(&quot;https://api.github.com/users&quot;); dispatch(&#123; type: &quot;LOAD_SUCCESS&quot;, data: result.data &#125;); &#125; catch (e) &#123; dispatch(&#123; type: &quot;LOAD_ERROR&quot; &#125;); &#125; break; default: return dispatch(action); &#125; &#125;;&#125; Component12345678910111213141516171819202122232425262728293031export default function Users() &#123; const [state, dispatchBase] = useReducer(reducer, initialState); const dispatch = dispatchMiddleware(dispatchBase); console.log(&quot;rendering...&quot;, state); function load() &#123; console.log(&quot;in load()&quot;); dispatch(&#123; type: &quot;INIT_LOAD&quot; &#125;); dispatch(&#123; type: &quot;LOAD&quot; &#125;); console.log(&quot;load() - done&quot;); &#125; let Display = null; if (state.isLoading) &#123; Display = &lt;div&gt;Loading...&lt;/div&gt;; &#125; else if (state.isError) &#123; Display = &lt;div&gt;Error&lt;/div&gt;; &#125; else &#123; Display = state.data.map(item =&gt; &lt;div key=&#123;item.login&#125;&gt;&#123;item.login&#125;&lt;/div&gt;); &#125; return ( &lt;div&gt; &lt;button onClick=&#123;load&#125;&gt;Load&lt;/button&gt; &#123;Display&#125; &lt;/div&gt; );&#125; Full code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687import React, &#123; useReducer &#125; from &quot;react&quot;;import axios from &quot;axios&quot;;function dispatchMiddleware(dispatch) &#123; return async action =&gt; &#123; switch (action.type) &#123; case &quot;LOAD&quot;: console.log(&quot;LOAD&quot;); try &#123; const result = await axios(&quot;https://api.github.com/users&quot;); dispatch(&#123; type: &quot;LOAD_SUCCESS&quot;, data: result.data &#125;); &#125; catch (e) &#123; dispatch(&#123; type: &quot;LOAD_ERROR&quot; &#125;); &#125; break; default: return dispatch(action); &#125; &#125;;&#125;function reducer(state, action) &#123; console.log(action.type); switch (action.type) &#123; case &quot;INIT_LOAD&quot;: return &#123; ...state, isLoading: true, isError: false &#125;; case &quot;LOAD_SUCCESS&quot;: return &#123; ...state, isLoading: false, isError: false, data: action.data &#125;; case &quot;LOAD_ERROR&quot;: return &#123; ...state, isLoading: false, isError: true &#125;; default: return state; &#125;&#125;const initialState = &#123; isLoading: false, isError: false, data: []&#125;;export default function Users() &#123; const [state, dispatchBase] = useReducer(reducer, initialState); const dispatch = dispatchMiddleware(dispatchBase); console.log(&quot;rendering...&quot;, state); function load() &#123; console.log(&quot;in load()&quot;); dispatch(&#123; type: &quot;INIT_LOAD&quot; &#125;); dispatch(&#123; type: &quot;LOAD&quot; &#125;); console.log(&quot;load() - done&quot;); &#125; let Display = null; if (state.isLoading) &#123; Display = &lt;div&gt;Loading...&lt;/div&gt;; &#125; else if (state.isError) &#123; Display = &lt;div&gt;Error&lt;/div&gt;; &#125; else &#123; Display = state.data.map(item =&gt; &lt;div key=&#123;item.login&#125;&gt;&#123;item.login&#125;&lt;/div&gt;); &#125; return ( &lt;div&gt; &lt;button onClick=&#123;load&#125;&gt;Load&lt;/button&gt; &#123;Display&#125; &lt;/div&gt; );&#125; The full code is available in the codesandbox Source http://mkumaran.net/2019/bestWayToDoAsyncInReactJsUsingHooks/","categories":[{"name":"Frontend","slug":"Frontend","permalink":"https://jiaopucun.com/categories/Frontend/"}],"tags":[{"name":"React","slug":"React","permalink":"https://jiaopucun.com/tags/React/"}]},{"title":"Adding Vite to your existing React project","slug":"adding-vite-to-your-existing-react-project","date":"un22fin22","updated":"un00fin00","comments":true,"path":"2024/01/02/adding-vite-to-your-existing-react-project/","link":"","permalink":"https://jiaopucun.com/2024/01/02/adding-vite-to-your-existing-react-project/","excerpt":"","text":"Step 1: PreparationBefore exploring Vite, ensure your current React project is secure by creating a backup of its files and configurations. This backup allows for easy restoration if any unwanted changes occur during the Vite transition. Verify that Node.js and npm (Node Package Manager) are installed on your development machine. These tools are prerequisites for working effectively with Vite. Step 2: Creating a Vite ProjectTo introduce Vite into your existing React project, the initial step involves establishing a separate Vite project alongside it. This approach ensures that Vite operates independently without interfering with your existing project structure. 1npm init @vitejs/app my-vite-app --template react To tailor the Vite project to your needs, replace the placeholder “my-vite-app” with your desired project name. This personalized identifier will distinguish your Vite project from others. Step 3: Copying Dependencies and ConfigurationsLocate the newly created Vite project directory and transfer the relevant files: package.json, package-lock.json, and vite.config.js to your existing React project’s directory. Step 4: Installing DependenciesTo fully integrate Vite into your existing React project, execute the following command within the project directory: 1npm install Step 5: Configuring Your Existing React CodePay close attention to React components, entry points, and import paths. Proper configuration of these elements is crucial for unlocking the efficiency and performance benefits of Vite. Step 6: Starting the Development ServerTo activate the Vite dev server within your project directory, execute the following command: 1npm run dev Enjoy the real-time feedback loop provided by Vite, allowing you to iterate on your code and observe the results seamlessly. Step 7: Adjusting ConfigurationThe vite.config.js file, located in your project directory, serves as the central hub for modifying Vite’s behavior. Step 8: Testing and DebuggingOnce Vite is integrated with your React project, conduct thorough testing to identify and address any potential issues. Step 9: Building for ProductionExecute the following command within your project directory to initiate the production build process: 1npm run build This optimization process reduces the size of your code, improves loading performance, and ensures that your application runs smoothly in production setups. Conclusion:Integrating Vite into your React project can revolutionize your development experience. Its lightning-fast dev server, production-optimized builds, and compatibility with various frameworks and libraries can streamline your workflow and elevate your project’s quality. Web development is a rapidly evolving field, and embracing modern tools like Vite can significantly impact your productivity and the performance of your applications. Embrace the power of Vite and witness its transformative effects on your development process.","categories":[{"name":"Frontend","slug":"Frontend","permalink":"https://jiaopucun.com/categories/Frontend/"}],"tags":[{"name":"React","slug":"React","permalink":"https://jiaopucun.com/tags/React/"},{"name":"Vite","slug":"Vite","permalink":"https://jiaopucun.com/tags/Vite/"}]},{"title":"CORS & Vite","slug":"cors-vite","date":"un22fin22","updated":"un00fin00","comments":true,"path":"2024/01/02/cors-vite/","link":"","permalink":"https://jiaopucun.com/2024/01/02/cors-vite/","excerpt":"","text":"CORS is enabled by default in Vite dev server, and it allows any origin. However, you might also need to do more configurations if the API server is on another domain, which is very common during the development environment. In this case, you need to edit the vite.config.ts or vite.config.js file in your project and configure custom proxy rules for the dev server. Example: 123456789101112131415161718192021222324252627282930313233export default defineConfig(&#123; server: &#123; proxy: &#123; // string shorthand: http://localhost:5173/foo -&gt; http://localhost:4567/foo &#x27;/foo&#x27;: &#x27;http://localhost:4567&#x27;, // with options: http://localhost:5173/api/bar-&gt; http://jsonplaceholder.typicode.com/bar &#x27;/api&#x27;: &#123; target: &#x27;http://jsonplaceholder.typicode.com&#x27;, changeOrigin: true, rewrite: (path) =&gt; path.replace(/^\\/api/, &#x27;&#x27;), &#125;, // with RegEx: http://localhost:5173/fallback/ -&gt; http://jsonplaceholder.typicode.com/ &#x27;^/fallback/.*&#x27;: &#123; target: &#x27;http://jsonplaceholder.typicode.com&#x27;, changeOrigin: true, rewrite: (path) =&gt; path.replace(/^\\/fallback/, &#x27;&#x27;), &#125;, // Using the proxy instance &#x27;/api&#x27;: &#123; target: &#x27;http://jsonplaceholder.typicode.com&#x27;, changeOrigin: true, configure: (proxy, options) =&gt; &#123; // proxy will be an instance of &#x27;http-proxy&#x27; &#125;, &#125;, // Proxying websockets or socket.io: ws://localhost:5173/socket.io -&gt; ws://localhost:5174/socket.io &#x27;/socket.io&#x27;: &#123; target: &#x27;ws://localhost:5174&#x27;, ws: true, &#125;, &#125;, &#125;,&#125;)","categories":[{"name":"Frontend","slug":"Frontend","permalink":"https://jiaopucun.com/categories/Frontend/"}],"tags":[{"name":"Vite","slug":"Vite","permalink":"https://jiaopucun.com/tags/Vite/"}]},{"title":"create-react-app is dead","slug":"create-react-app-is-dead","date":"un22fin22","updated":"un00fin00","comments":true,"path":"2024/01/02/create-react-app-is-dead/","link":"","permalink":"https://jiaopucun.com/2024/01/02/create-react-app-is-dead/","excerpt":"","text":"For many years create-react-app was a go-to method for starting a React project. It was the easiest way for beginners to start a React project locally. On March 16, 2023, React published new docs and dropped support for the old docs. In the new docs, they no longer recommend CRA as a solution for creating React applications. Let’s start with talking about what went wrong with CRA. What are the problems with create-react-appPerformance:CRA comes by default with 205 MBs on dependencies in node_modules. As opposed to its alternative Vite which has only 34 MBs. Dependency size hurts not only us developers but also our users. This is what we deal with: Slower updates during development. The local server takes longer to start. Slower builds(this results in higher CI costs). Slower user experience for users. The last part is the most detrimental. Remember that every time a user goes to your website. It waits for a server to send a full JS bundler. The bigger the bundler the longer the request will take. This can drastically lower your conversions and be bad for SEO metrics like FCP or LCP[https://web.dev/lcp/]. Poly filling core node.js modules:What is a polyfill? Polyfill is used to compile your code that won’t run in the browser and turn that into something that does. It’s used for old browsers that might not have support for new JS methods like Array.filter etc. Node.js was created to be server-side javascript. Its internal modules like crypto and fs were never meant to be used in the browser. This is an extremely bad pattern. These packages were never meant to run in a browser. Luckily create-react-app v5 removed those polyfills. Although we can still find those bad patterns in older react repositories. Custom configuration:create-react-app comes with a lot of limitations. An example is using a library called Tailwind, because you can’t override the PostCSS configuration. You would have to do something called an eject. What is an eject? Trust me you don’t want to know, but I will tell you anyway. Eject means create-react-app drops all of the configuration files: Babel, Webpack and node_modules that it uses natively inside your code base. After ejecting you will basically maintain a fork of CRA. This is a nightmare. That’s why tools like Craco came to help. Craco stands for: Create react app configuration override. As it the name suggests it basically overrides the create-react-app configuration adding another layer of complexity on top. You can imagine how horrible maintaining a project like this is. Every time something in CRA changes Craco has to change accordingly. Alternatives:Let’s give CRA a break and let’s talk about alternatives. New react docs recommend four technologies: NextJS, Remix, Gatsby, and Expo. We will not talk about Expo as it’s mobile technology. I will also add one additional that in my opinion resembles CRA the most. Next.jsNextJS is a full-stack React framework. Besides building user interfaces you can also create an API. It’s maintained by a company Vercel which offers deployment services. They make it super easy to deploy the NextJS app onto their platform. RemixRemix is also a full-stack React framework. One of the more interesting features that it offers is nested routes. One way nested routes can be very useful is parallel fetching. Multiple data sources are fetched in the same way, which gives a much better user experience. GatsbyGatsby focuses on making it easy to integrate your app with a CMS. What’s nice about Gatsby is its GraphQL data layer. It helps you integrate content, APIs, and various services onto your application. ViteVite isn’t recommended by React docs, but it’s the most similar to CRA, because it supports client-side rendering. They make it super easy to start developing React projects locally. It offers all of the advanced features that you want from a development tool like HMR, super quick server starts, native TS support, etc. Summary:If you already know React. That’s great, but you need to know how to use this skill most effectively. create-react-app just doesn’t cut it anymore. The project was super important for the React ecosystem. We have to acknowledge how much it contributed. I won’t tell you what to use instead, but I can tell you how I make choices currently. If I need a frontend with an API. I go with NextJS. If I need only frontend. I go with Vite with React. You are free to use other tools highlighted here like Gatsby or Remix. References: Create-react-app is dead. What to use instead?","categories":[{"name":"Frontend","slug":"Frontend","permalink":"https://jiaopucun.com/categories/Frontend/"}],"tags":[{"name":"React","slug":"React","permalink":"https://jiaopucun.com/tags/React/"}]},{"title":"How to reset MySQL root password on Windows","slug":"how-to-reset-mysql-root-password-on-windows","date":"un11fin11","updated":"un00fin00","comments":true,"path":"2024/01/01/how-to-reset-mysql-root-password-on-windows/","link":"","permalink":"https://jiaopucun.com/2024/01/01/how-to-reset-mysql-root-password-on-windows/","excerpt":"","text":"If you assigned a root password previously but have forgotten it, you can assign a new password. On Windows, use the following procedure to reset the password for the MySQL &#39;root&#39;@&#39;localhost&#39; account. To change the password for a root account with a different host name part, modify the instructions to use that host name. Log on to your system as Administrator. Stop the MySQL server if it is running. Create a text file containing the password-assignment statement on a single line. Replace the password with the password that you want to use.1ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;MyNewPass&#x27;; Save the file. This example assumes that you name the file C:\\mysql-init.txt. Open a console window to get to the command prompt: From the Start menu, select Run, then enter cmd as the command to be run. Start the MySQL server with the init_file system variable set to name the file (notice that the backslash in the option value is doubled):12C:\\&gt; cd &quot;C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin&quot;C:\\&gt; mysqld.exe --init-file=C:\\\\mysql-init.txt If you installed MySQL to a different location, adjust the cd command accordingly. The server executes the contents of the file named by the init_file system variable at startup, changing the &#39;root&#39;@&#39;localhost&#39; account password. To have server output to appear in the console window rather than in a log file, add the --console option to the mysqld command. If you installed MySQL using the MySQL Installation Wizard, you may need to specify a --defaults-file option and --datadir option. For example: 1234C:\\&gt; mysqld.exe --defaults-file=&quot;C:\\\\ProgramData\\\\MySQL\\\\MySQL Server 8.0\\\\my.ini&quot; --datadir=&quot;C:\\\\ProgramData\\\\MySQL\\\\MySQL Server 8.0\\\\Data&quot; --init-file=C:\\\\mysql-init.txt The appropriate --defaults-file setting can be found using the Services Manager: From the Start menu, select Control Panel, then Administrative Tools, then Services. Find the MySQL service in the list, right-click it, and choose the Properties option. The Path to executable field contains the --defaults-file setting. After the server has started successfully, delete C:\\mysql-init.txt. You should now be able to connect to the MySQL server as root using the new password. Stop the MySQL server and restart it normally. If you run the server as a service, start it from the Windows Services window. If you start the server manually, use whatever command you normally use.","categories":[{"name":"Database","slug":"Database","permalink":"https://jiaopucun.com/categories/Database/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://jiaopucun.com/tags/MySQL/"}]},{"title":"Type 'T | undefined' is not assignable to type 'T'. 'T' could be instantiated with an arbitrary type which could be unrelated to 'T | undefined'","slug":"T-undefined","date":"un66fin66","updated":"un00fin00","comments":true,"path":"2023/12/30/T-undefined/","link":"","permalink":"https://jiaopucun.com/2023/12/30/T-undefined/","excerpt":"","text":"This is a sample TypeScript generic class, which implements a generic Stack class. 12345678910111213141516171819202122232425class Stack&lt;T&gt; &#123; private elements: T[] = []; constructor(private size: number) &#123; &#125; isEmpty(): boolean &#123; return this.elements.length === 0; &#125; isFull(): boolean &#123; return this.elements.length === this.size; &#125; push(element: T): void &#123; if (this.elements.length === this.size) &#123; throw new Error(&#x27;The stack is overflow!&#x27;); &#125; this.elements.push(element); &#125; pop(): T &#123; if (this.elements.length == 0) &#123; throw new Error(&#x27;The stack is empty!&#x27;); &#125; return this.elements.pop(); &#125;&#125; The code above looks promising, but TypeScript issues an error 12Type &#x27;T | undefined&#x27; is not assignable to type &#x27;T&#x27;. &#x27;T&#x27; could be instantiated with an arbitrary type which could be unrelated to &#x27;T | undefined&#x27;. SolutionApproach 1. ! operatorIf you want to return T you should tell TS to exclude undefined from resulting type by using the ! operator. 123456789class Stack&lt;T&gt; &#123; // ..... pop(): T &#123; if (this.elements.length == 0) &#123; throw new Error(&#x27;The stack is empty!&#x27;); &#125; return this.elements.pop()!; // &lt;== &#125;&#125; Approach 2. union type123456789class Stack&lt;T&gt; &#123; // ..... pop(): T | undefined &#123; if (this.elements.length == 0) &#123; throw new Error(&#x27;The stack is empty!&#x27;); &#125; return this.elements.pop(); &#125;&#125;","categories":[],"tags":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://jiaopucun.com/tags/TypeScript/"}]},{"title":"How to loop through objects keys and values in Javascript?","slug":"loop-through-object-javascript","date":"un55fin55","updated":"un00fin00","comments":true,"path":"2023/12/15/loop-through-object-javascript/","link":"","permalink":"https://jiaopucun.com/2023/12/15/loop-through-object-javascript/","excerpt":"","text":"How to loop through objects in JavaScript?The various methods that can be used to loop through objects in JavaScript are: Using a for…in loop Object.keys method Object.values method Object.entries method for…in Loop12345678910111213141516171819const user = &#123; name: &#x27;John Doe&#x27;, email: &#x27;john.doe@example.com&#x27;, age: 25, dob: &#x27;08/02/1989&#x27;, active: true&#125;;for (const key in user) &#123; if (user.hasOwnProperty(key)) &#123; console.log(`$&#123;key&#125;: $&#123;user[key]&#125;`); &#125;&#125; Object.keys() Method123456789101112131415161718192021222324252627282930313233const courses = &#123; java: 10, javascript: 55, nodejs: 5, php: 15&#125;;// convert object to key&#x27;s arrayconst keys = Object.keys(courses);// print all keysconsole.log(keys);// [ &#x27;java&#x27;, &#x27;javascript&#x27;, &#x27;nodejs&#x27;, &#x27;php&#x27; ]// iterate over objectkeys.forEach((key, index) =&gt; &#123; console.log(`$&#123;key&#125;: $&#123;courses[key]&#125;`);&#125;);// java: 10// javascript: 55// nodejs: 5// php: 15 Object.values() Method123456789101112131415161718const animals = &#123; tiger: 1, cat: 2, monkey: 3, elephant: 4&#125;;// iterate over object valuesObject.values(animals).forEach(val =&gt; console.log(val));// 1// 2// 3// 4 Object.entries() Method1234567891011121314151617181920const animals = &#123; tiger: 1, cat: 2, monkey: 3, elephant: 4&#125;;const entries = Object.entries(animals);console.log(entries);// [ [ &#x27;tiger&#x27;, 1 ],// [ &#x27;cat&#x27;, 2 ],// [ &#x27;monkey&#x27;, 3 ],// [ &#x27;elephant&#x27;, 4 ] ] To loop over the array returned by Object.entries(), you can either use the for…of loop or the forEach() method as shown below: 12345678910// `for...of` loopfor (const [key, value] of Object.entries(animals)) &#123; console.log(`$&#123;key&#125;: $&#123;value&#125;`);&#125;// `forEach()` methodObject.entries(animals).forEach(([key, value]) =&gt; &#123; console.log(`$&#123;key&#125;: $&#123;value&#125;`)&#125;);","categories":[],"tags":[]},{"title":"Use NVM to Install Multiple Node Versions on Windows","slug":"Use-NVM-to-Install-Multiple-Node-Versions-on-Windows","date":"un11fin11","updated":"un00fin00","comments":true,"path":"2023/12/11/Use-NVM-to-Install-Multiple-Node-Versions-on-Windows/","link":"","permalink":"https://jiaopucun.com/2023/12/11/Use-NVM-to-Install-Multiple-Node-Versions-on-Windows/","excerpt":"","text":"If you’re building a web application with any modern framework, chances are you’ll need to install node at some point. Since different projects have different environment setups, you may need to install multiple versions of node on your workstation. As node doesn’t provide any out-of-the-box functionality to have multiple versions of node installed on the same operating system, we’ll have to use NVM, which stands for node version manager, to have multiple node versions. PrerequisitesBefore we install multiple node versions via NVM, you will need to uninstall the current node version. Install NVMDownload nvm-setup.exe from this link. Double-click it and follow the prompts to install NVM, and don’t worry; everything remains default, so there is no need to customize anything. Verify your installation by typing the following command in cmd. 1nvm --version You’ll see a version number in the output if your installation succeeds. Otherwise, you’ll see node is not recognized as internal command in the output. UsageRemember in the prerequisites that we noted the node version. Well, we will use that now by typing the following command in cmd to install node. For our example, we had 18.17.0, so we’ll use that. 1nvm install 18.17.0 To use the installed version, we type the following in cmd. 1nvm use 18.17.0 One more handy command is nvm list which will display all the installed versions of node on your workstation. It’ll also tell you which version is currently being used by displaying ‘🞷‘ in front of the version number. 123PS E:\\htdocs&gt; nvm list * 18.17.0 18.16.1 (Currently using 64-bit executable) SummaryThat’s it. Now you can have multiple versions of node installed on your machine. To recap, run: nvm install &lt;version&gt; to install a specified version. nvm use &lt;version&gt; to switch between different versions. nvm list to list all versions installed on your workstation. nvm list available to list all versions available for installation. Happy decoding!","categories":[{"name":"Tools","slug":"Tools","permalink":"https://jiaopucun.com/categories/Tools/"}],"tags":[{"name":"Node","slug":"Node","permalink":"https://jiaopucun.com/tags/Node/"}]},{"title":"Sending Emails with Nodemailer","slug":"sending-emails-with-nodemailer","date":"un22fin22","updated":"un00fin00","comments":true,"path":"2023/05/30/sending-emails-with-nodemailer/","link":"","permalink":"https://jiaopucun.com/2023/05/30/sending-emails-with-nodemailer/","excerpt":"","text":"What is NodemailerNodemailer is a Node.JS npm module for sending emails. This has been the go to solution to most NodeJS developers for email delivery in their applications. How to use NodemailerExecute the following command in the Node.js command prompt: 1npm install nodemailer or 1yarn add nodemailer ExampleIn this example, I am using Mailgun to send emails. You can sign up and get the STMP information required. 12345678910111213141516171819202122232425262728293031&quot;use strict&quot;;const nodemailer = require(&quot;nodemailer&quot;);// async..await is not allowed in global scope, must use a wrapperasync function main() &#123; // create reusable transporter object using the default SMTP transport let transporter = nodemailer.createTransport(&#123; host: &quot;smtp.mailgun.org&quot;, port: 587, secure: false, // true for 465, false for other ports auth: &#123; user: &#x27;YOUR MAILGUN USERNAME&#x27;, // &lt;= Input your username here pass: &#x27;YOUR PASSWORD&#x27;, // &lt;= Input your password here &#125;, &#125;); // send mail with defined transport object let info = await transporter.sendMail(&#123; from: &#x27;&quot;Admin&quot; &lt;no-reply@example.com&gt;&#x27;, // sender address to: &quot;someone@example.com&quot;, // list of receivers subject: &quot;Hi there&quot;, // Subject line text: &quot;Hello world?&quot;, // plain text body html: &quot;&lt;b&gt;Hello world with nodemailer&lt;/b&gt;&quot;, // html body &#125;); console.log(&quot;Message sent: %s&quot;, info.messageId); // Message sent: &lt;b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com&gt;&#125;main().catch(console.error); If you have your own custom domains, Zoho Mail provides a free plan with custom domain support, it supports SMTP protocol as well. Nodemailer for StrapiStrapi is an open-source headless CMS. There is a Nodemailer plugin you can use in your project. In your console, excute the following command to install it: 12345# using yarnyarn add @strapi/provider-email-nodemailer# using npmnpm install @strapi/provider-email-nodemailer --save Then edit the file config/plugins.js in your Strapi project: 12345678910111213141516171819202122module.exports = (&#123; env &#125;) =&gt; (&#123; // ... email: &#123; config: &#123; provider: &#x27;nodemailer&#x27;, providerOptions: &#123; host: env(&#x27;SMTP_HOST&#x27;, &#x27;smtp.example.com&#x27;), port: env(&#x27;SMTP_PORT&#x27;, 587), auth: &#123; user: env(&#x27;SMTP_USERNAME&#x27;), pass: env(&#x27;SMTP_PASSWORD&#x27;), &#125;, // ... any custom nodemailer options &#125;, settings: &#123; defaultFrom: &#x27;hello@example.com&#x27;, defaultReplyTo: &#x27;hello@example.com&#x27;, &#125;, &#125;, &#125;, // ...&#125;); After that you will be able to view your Email configuration and test email delivery at the Strapi Dashboard:","categories":[],"tags":[{"name":"Strapi","slug":"Strapi","permalink":"https://jiaopucun.com/tags/Strapi/"},{"name":"Nodemailer","slug":"Nodemailer","permalink":"https://jiaopucun.com/tags/Nodemailer/"}]},{"title":"Create a PostgreSQL Database with Amazon RDS","slug":"create-a-postgresql-database-with-zmazon-rds","date":"un22fin22","updated":"un00fin00","comments":true,"path":"2023/05/09/create-a-postgresql-database-with-zmazon-rds/","link":"","permalink":"https://jiaopucun.com/2023/05/09/create-a-postgresql-database-with-zmazon-rds/","excerpt":"","text":"Enter the RDS ConsoleVisit the AWS management console and search “RDS” in the search box. Create a PostgreSQL DB InstanceEngine OptionsYou now have options to select your engine. For this tutorial, choose the PostgreSQL icon, choose Engine Version and choose the Free Tier template. Settings DB instance identifier: Type a name for the DB instance that is unique for your account in the Region you selected. Master username: Type a username that you will use to log in to your DB instance. Master password: Type a password that contains from 8 to 41 printable ASCII characters (excluding &#x2F;,”, and @) for your master user password. Confirm password: Retype your password. Storage Storage type: Select General Purpose SSD (gp3). Allocated storage: Select the default of 20 to allocate 20 GB of storage for your database. Storage autoscaling: Uncheck this option. Connectivity Public accessibility: Choose Yes. This will allocate an IP address for your database instance so you can directly connect to the database from your own device. VPC security groups: Select Create new VPC security group. This will create a security group that will allow connection from the IP address of the device that you are currently using to the database created. Port: Leave the default value of 5432. Database authentication Additional configuration Database name: Type a database name that is 1 to 64 alphanumeric characters. If you do not provide a name, Amazon RDS will not automatically create a database on the DB instance you are creating. Enable automated backups: Clear this checkbox. Enable encryption: Clear this checkbox. Auto minor version upgrade: Select Enable auto minor version upgrade to receive automatic updates when they become available. Maintenance Window: Select No preference. Deletion protection: Clear Deletion protection. Click Create database. Edit the VPC security group Database Information","categories":[],"tags":[{"name":"Database","slug":"Database","permalink":"https://jiaopucun.com/tags/Database/"},{"name":"PostgreSQL","slug":"PostgreSQL","permalink":"https://jiaopucun.com/tags/PostgreSQL/"},{"name":"AWS","slug":"AWS","permalink":"https://jiaopucun.com/tags/AWS/"}]},{"title":"zip and unzip commands in Linux","slug":"zip-and-unzip-commands-in-linux","date":"un66fin66","updated":"un00fin00","comments":true,"path":"2023/05/06/zip-and-unzip-commands-in-linux/","link":"","permalink":"https://jiaopucun.com/2023/05/06/zip-and-unzip-commands-in-linux/","excerpt":"","text":"extract a zip file to a specific folder Now create a temporary folder to extract the file: 1mkdir temp_for_zip_extract Extract the zip file into that folder: 1unzip /path/to/file.zip -d temp_for_zip_extract Zip everything in current directory1zip -r foo.zip . View list of files in ZIP archive1unzip -l files.zip","categories":[{"name":"Tools","slug":"Tools","permalink":"https://jiaopucun.com/categories/Tools/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://jiaopucun.com/tags/Linux/"}]},{"title":"How to Create a Custom API Endpoint in Strapi","slug":"how-to-create-a-custom-api-endpoint-in-strapi","date":"un44fin44","updated":"un00fin00","comments":true,"path":"2023/05/04/how-to-create-a-custom-api-endpoint-in-strapi/","link":"","permalink":"https://jiaopucun.com/2023/05/04/how-to-create-a-custom-api-endpoint-in-strapi/","excerpt":"","text":"In this article, we will be creating a custom API endpoint from scratch. Installing StrapiTo create a new Strapi project based on a template, run the following command: 12345# use yarnyarn create strapi-app my-project --template &lt;template-package&gt;# use npmnpx create-strapi-app@latest my-project --template &lt;template-package&gt; For example: 12345# use the full template nameyarn create strapi-app my-project --template @strapi/template-blog# use the shorthandyarn create strapi-app my-project --template blog Once the installation is complete, the browser automatically opens a new tab. If not, navigate to http://localhost:1337/admin/. If port is already used by an another process, please check the alternate port mentioned mentioned in the CLI output. Most of the time, it would be 8000 , 8080 or 1337. Complete the form to create the first administrator user of this Strapi application. The blog template generates components, collection types, and a single type out of the box. In this example, we show you how to create a custom API Endpoint GET /api/posts-report which will provide a simplified report of collection type article. 123456789101112131415161718192021222324252627282930313233343536373839404142[ &#123; &quot;id&quot;: 1, &quot;title&quot;: &quot;The internet&#x27;s Own boy&quot;, &quot;category&quot;: &quot;story&quot;, &quot;publishedDate&quot;: &quot;Fri May 20 2022&quot;, &quot;authorName&quot;: &quot;David Doe&quot;, &quot;authorEmail&quot;: &quot;daviddoe@strapi.io&quot; &#125;, &#123; &quot;id&quot;: 2, &quot;title&quot;: &quot;This shrimp is awesome&quot;, &quot;category&quot;: &quot;nature&quot;, &quot;publishedDate&quot;: &quot;Fri May 20 2022&quot;, &quot;authorName&quot;: &quot;David Doe&quot;, &quot;authorEmail&quot;: &quot;daviddoe@strapi.io&quot; &#125;, &#123; &quot;id&quot;: 3, &quot;title&quot;: &quot;A bug is becoming a meme on the internet&quot;, &quot;category&quot;: &quot;tech&quot;, &quot;publishedDate&quot;: &quot;Fri May 20 2022&quot;, &quot;authorName&quot;: &quot;Sarah Baker&quot;, &quot;authorEmail&quot;: &quot;sarahbaker@strapi.io&quot; &#125;, &#123; &quot;id&quot;: 4, &quot;title&quot;: &quot;Beautiful picture&quot;, &quot;category&quot;: &quot;nature&quot;, &quot;publishedDate&quot;: &quot;Fri May 20 2022&quot;, &quot;authorName&quot;: &quot;Sarah Baker&quot;, &quot;authorEmail&quot;: &quot;sarahbaker@strapi.io&quot; &#125;, &#123; &quot;id&quot;: 5, &quot;title&quot;: &quot;What&#x27;s inside a Black Hole&quot;, &quot;category&quot;: &quot;news&quot;, &quot;publishedDate&quot;: &quot;Fri May 20 2022&quot;, &quot;authorName&quot;: &quot;Sarah Baker&quot;, &quot;authorEmail&quot;: &quot;sarahbaker@strapi.io&quot; &#125;] Generating a Basic APINavigate to your my-project folder and run npx strapi generate to create a custom API endpoint. 12345678? Strapi Generators (Use arrow keys)❯ api - Generate a basic API controller - Generate a controller for an API content-type - Generate a content type for an API plugin - Generate a basic plugin policy - Generate a policy for an API middleware - Generate a middleware for an API service - Generate a service for an API Make sure the api option is selected and click enter. 12? Strapi Generators api - Generate a basic API ? API name // name your api I am going to call my posts-report and select N for “Is this API for a plugin?” 123? Strapi Generators api - Generate a basic API ? API name posts-report ? Is this API for a plugin? (Y/n) This will generate these files below 1234567? Strapi Generators api - Generate a basic API? API name posts-report? Is this API for a plugin? No✔ ++ /api/posts-report/routes/posts-report.js✔ ++ /api/posts-report/controllers/posts-report.js✔ ++ /api/posts-report/services/posts-report.js We can find these in the /src/api/posts-report folder.This command creates a directory called posts-report within src/api directory. The posts-report contains three directories called controllers, routes, and services. RoutesRequests sent to Strapi on any URL are handled by routes. By default, Strapi generates routes for all the content-types. Routes can be added and configured. Once a route exists, reaching it executes some code handled by a controller. Replace the code in /src/api/posts-report/routes/posts-report.js with the following lines of code. 12345678910111213module.exports = &#123; routes: [ &#123; method: &quot;GET&quot;, path: &quot;/posts-report&quot;, handler: &quot;posts-report.postsReport&quot;, config: &#123; policies: [], middlewares: [], &#125;, &#125;, ],&#125;; Controllers vs ServicesControllers are JavaScript files that contain a set of methods called actions, reached by the client according to the requested route. Whenever a client requests the route, the action performs the business logic code and sends back the response. Controllers represent the C in the model-view-controller (MVC) pattern. In most cases, the controllers will contain the bulk of a project’s business logic. But as a controller’s logic becomes more and more complicated, it’s a good practice to use services to organise the code into re-usable parts. Services are a set of reusable functions. They are particularly useful to respect the DRY (don’t repeat yourself) programming concept and to simplify controllers logic. Creating a ServiceServices are basically not aware of the Koa’s ctx object(request and the response). It is supposed to be a flexible and reusable function. Replace the contents of /src/api/posts-report/services/posts-report.js with the following lines of code that use Strapi’s Entity Service API to fetch all pages: 12345678910111213141516171819202122232425262728293031323334353637383940414243module.exports = &#123; postsReport: async () =&gt; &#123; try &#123; // fetching data const entries = await strapi.entityService.findMany( &quot;api::article.article&quot;, &#123; fields: [&quot;id&quot;, &quot;title&quot;, &quot;slug&quot;, &quot;createdAt&quot;], populate: &#123; author: &#123; fields: [&quot;name&quot;, &quot;email&quot;], &#125;, category: &#123; fields: [&quot;name&quot;], &#125;, &#125;, &#125; ); // reduce the data to the format we want to return let entriesReduced; if (entries &amp;&amp; Array.isArray(entries)) &#123; entriesReduced = entries.reduce((acc, item) =&gt; &#123; acc = acc || []; acc.push(&#123; id: item.id, title: item.title || &quot;&quot;, category: item.category.name || &quot;&quot;, publishedDate: new Date(item.createdAt).toDateString() || &quot;&quot;, authorName: item.author?.name || &quot;&quot;, authorEmail: item.author?.email || &quot;&quot;, &#125;); return acc; &#125;, []); &#125; // return the reduced data return entriesReduced; &#125; catch (err) &#123; return err; &#125; &#125;,&#125;; In this code we are using Strapi’s Entity Service API to fetch all pages. To learn more about the flexible ways of populating the response, read the Populating the Entity Service API documentation. Once a service is created, it’s accessible from controllers or from other services: 1234// access an API servicestrapi.service(&#x27;api::apiName.serviceName&#x27;);// access a plugin servicestrapi.service(&#x27;plugin::pluginName.serviceName&#x27;); The list of services available can be logged from controllers and services: 12console.log(&#x27;strapi.services &#x27;, strapi.services);console.log(&#x27;pages-report&#x27;, strapi.service(&#x27;api::pages-report.pages-report&#x27;)); Creating a ControllerControllers are functions that have direct access to the Koa’s ctx, hence a controller function is responsible for invoking our service on request and returning the results to the response. Replace the code in /src/api/posts-report/controllers/posts-report.js with the following lines of code: 1234567891011121314module.exports = &#123; async postsReport(ctx, next) &#123; try &#123; const data = await strapi .service(&quot;api::posts-report.posts-report&quot;) .postsReport(); console.log(data, &quot;data&quot;); ctx.body = data; &#125; catch (err) &#123; ctx.badRequest(&quot;Post report controller error&quot;, &#123; moreDetails: err &#125;); &#125; &#125;,&#125;; You may need to stop and re-start the server. Stop the server using ctrl + c in the terminal. Start the server using yarn develop. Make sure that your current directory is my-project. Setting Permissions for the APIThat’s all the code required for the use case. Send a get request to /api/posts-report. You will most probably get a 403 error. In order to make the end-point accessible only to the authenticated users, go to the Settings &gt; Roles &gt; Authenticated. To be able to publicly access the end-point, please go to the Setting &gt; Roles &gt; Public in the Strapi dashboard. Please, check the postsReport for the Posts-report route and hit the save button. Now, the custom API is ready for the public: You can either just go here directly in your browser http://localhost:1337/api/posts-report or make a GET request using a service like postman or insomnia. You should now see your data coming from your custom controller. Source: https://strapi.io/blog/how-to-create-a-custom-api-endpoint-in-strapi","categories":[{"name":"Backend","slug":"Backend","permalink":"https://jiaopucun.com/categories/Backend/"}],"tags":[{"name":"Strapi","slug":"Strapi","permalink":"https://jiaopucun.com/tags/Strapi/"}]},{"title":"Strapi Troubleshooting","slug":"strapi-troubleshooting","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2023/05/03/strapi-troubleshooting/","link":"","permalink":"https://jiaopucun.com/2023/05/03/strapi-troubleshooting/","excerpt":"","text":"Why relation not included in REST API responses? Check the content type by using Content-Type Builder, make sure the the field with Relation type is corrected set. If you are building the frontend part of your app, keep in mind that the users and permissions are not the same as the counterparts used by the Admin Panel. You can view all the users by visiting “Content Manager” -&gt; “COLLECTION TYPES” -&gt; “User”, the roles can be configurated via “Settings” -&gt; “USERS &amp; PERMISSIONS PLUGIN” -&gt; “Roles”. Remember to assign corresponding permissions to specific roles, also set correct role for specific users. When fetching data from Strapi REST API, you will need to the populate parameter to populate specific relation fields, for example GET /api/articles?populate=*. Add the authorization header with your token in the HTTP HEADERS part:123&#123; &quot;Authorization&quot; : &quot;Bearer &lt;TOKEN&gt;&quot;&#125; PostgreSQL connection error when declaring No for SSL Make sure your PostgreSQL connection information is correct, especially SSLmode is not required by the database server. Edit config.database.js, replace ssl: env.bool(&#39;DATABASE_SSL&#39;, false), with the following content: 123ssl: &#123; rejectUnauthorized: env.bool(&#x27;DATABASE_SSL_SELF&#x27;, false),&#125;,","categories":[{"name":"Frontend","slug":"Frontend","permalink":"https://jiaopucun.com/categories/Frontend/"}],"tags":[{"name":"Strapi","slug":"Strapi","permalink":"https://jiaopucun.com/tags/Strapi/"}]},{"title":"Ant Design Pro Cookbook","slug":"ant-design-pro-cookbook","date":"un22fin22","updated":"un00fin00","comments":true,"path":"2023/05/02/ant-design-pro-cookbook/","link":"","permalink":"https://jiaopucun.com/2023/05/02/ant-design-pro-cookbook/","excerpt":"","text":"This article is based on Ant Design Pro 5.2.0. Set the default language to Chinese globallyEdit config/config.ts: 123456789101112131415export default defineConfig(&#123; layout: &#123; locale: false, // ... &#125;, // ... other options // https://umijs.org/zh-CN/plugins/plugin-locale locale: &#123; default: &#x27;zh-CN&#x27;, antd: false, // default true, when it is true, will use `navigator.language` overwrite default baseNavigator: false, &#125;, // ... other options&#125;); Add a menu on the navigation barFirst of all, edit config/routes.ts and add a new item for your new menu link: 123456789export default [ // ... other routes &#123; path: &#x27;/mypage&#x27;, name: &#x27;My Page&#x27;, icon: &#x27;table&#x27;, component: &#x27;./MyPage&#x27;, &#125;,]; In the previous code snippet, we created a menu item call My Page on the navigation bar, which has a path of /mypage in the URL, and it uses a component saved in the file src/pages/MyPage/index.tsx. Next, we create the file src/pages/MyPage/index.tsx with the following content: 12345export default function() &#123; return ( &lt;div&gt;A new page&lt;/div&gt; )&#125;; Then you will be able to visit this ‘&#x2F;mypage’ route, for example http://localhost:8000/mypage. ProTable sort data from serverProTable is a component which can be used to build a CRUD page, it has the following sections: There is an attribute called columns, which is used to specify the columns of the table. For example: 1234567891011const columns = [ &#123; title: &#x27;Product name&#x27;, dataIndex: &#x27;title&#x27;, &#123; title: &#x27;Price&#x27;, sorter: true, valueType: &#x27;money&#x27;, dataIndex: &#x27;price&#x27;, &#125;,]; If you click a specific table field header, all the data in the table should be sorted locally or on the server side by this field in ascending order or descending order. We are going to sort all the records by the price field on the server side. ProTable use the request attribute to fetch data from a remote API endpoint, for example: 123456789101112&lt;ProTable columns=&#123;columns&#125; request=&#123;(params,sort,filter)=&gt;&#123; // fetch data from remote server const res = await fetchDataFromServer(&#123;...params&#125;); // `fetchDataFromServer` should be an async function which return the data needed return &#123; data: res.data, // The data to be displayed on current table success: true, total: 123, // Total number of recoreds &#125;; &#125;&#125;/&gt; Next, we need to listen to the change event triggered by the click on the field head by using the onChange attribute. Also, in order to trigger the request automatically, we resort to the params attribute, everytime when its values changes, the request callback function will be called. 1234567891011121314151617181920212223242526const [formParams, setFormParams] = useState();&lt;ProTable params=&#123;formParams&#125; columns=&#123;columns&#125; request=&#123;(params,sort,filter)=&gt;&#123; // fetch data from remote server const res = await fetchDataFromServer(&#123;...params&#125;); // `fetchDataFromServer` should be an async function which return the data needed return &#123; data: res.data, // The data to be displayed on current table success: true, total: 123, // Total number of recoreds &#125;; &#125;&#125; onChange=&#123;(pagination, filters, sorter, extra) =&gt; &#123; if (extra.action === &#x27;sort&#x27;) &#123; // Update formParams setFormParams(sorter.order ? &#123; sort: &#123; field: sorter.field, order: sorter.order &#125; &#125; : &#123;&#125;); &#125; &#125;&#125;/&gt;","categories":[{"name":"Frontend","slug":"Frontend","permalink":"https://jiaopucun.com/categories/Frontend/"}],"tags":[{"name":"React","slug":"React","permalink":"https://jiaopucun.com/tags/React/"},{"name":"Ant Design","slug":"Ant-Design","permalink":"https://jiaopucun.com/tags/Ant-Design/"},{"name":"Ant Design Pro","slug":"Ant-Design-Pro","permalink":"https://jiaopucun.com/tags/Ant-Design-Pro/"}]},{"title":"How to access a local SQLite database","slug":"how-to-access-a-local-sqlite-database","date":"un00fin00","updated":"un00fin00","comments":true,"path":"2023/04/23/how-to-access-a-local-sqlite-database/","link":"","permalink":"https://jiaopucun.com/2023/04/23/how-to-access-a-local-sqlite-database/","excerpt":"","text":"To access a local SQLite database, you can use Adminer, which is a lightweight and user-friendly web-based database management tool that supports multiple database systems, including SQLite. Here are the steps to access a local SQLite database with Adminer: Download Adminer SQLite 3 with password plugin Copy the PHP file to your web server, such as /var/www/html, you can rename it to a shorter name such as adminer.php. Open the Adminer page in a web browser: Open a web browser and navigate to the URL of the Adminer file on your web server, such as http://localhost/adminer.php. On the webpage, specify the “server file system” path of an existing database. Note it should be a relative path which relative to adminer.php. Why should we choose this plugin instead of Adminer directly? Adminer 4.6.3 and newer does not support accessing a database without a password due to security concerns, while we don’t really need to provide credentials (username and password) to access a SQLite database. This plugin can solve this problem, however, it should never be used in a production environment.","categories":[],"tags":[{"name":"Adminer","slug":"Adminer","permalink":"https://jiaopucun.com/tags/Adminer/"},{"name":"SQLite","slug":"SQLite","permalink":"https://jiaopucun.com/tags/SQLite/"},{"name":"database","slug":"database","permalink":"https://jiaopucun.com/tags/database/"}]},{"title":"Set the registry for NPM and Yarn","slug":"Set-the-registry-for-NPM-and-Yarn","date":"un00fin00","updated":"un00fin00","comments":true,"path":"2023/04/23/Set-the-registry-for-NPM-and-Yarn/","link":"","permalink":"https://jiaopucun.com/2023/04/23/Set-the-registry-for-NPM-and-Yarn/","excerpt":"","text":"Use a new registryFor those developers who live in China, you may have the problem when installing packages with NPM or Yarn, it could take hours to get the installation done or even failed after a long time. There are several ways to address this problems, the easiest way might be using a custom registry, for example the one provided by Taobao: 12npm config set registry http://registry.npm.taobao.orgyarn config set registry https://registry.npm.taobao.org This works, however, remember to restore the registry to its original one before publishing packages: 12npm config set registry https://registry.npmjs.orgyarn config set registry https://registry.yarnpkg.com Keep it intactIf you prefer not to change the default registry, you could use NPM behind a proxy server. Run the following commands one by one in your favourite terminal: 1234npm config set strict-ssl falsenpm config set https-proxy http://username:password@host:portnpm config set proxy http://username:password@host:portnpm config set registry http://registry.npmjs.org/ Suppose you have a proxy running on localhost and the port is 8118, then the format is: 12npm config set https-proxy http://127.0.0.1:8118npm config set proxy http://127.0.0.1:8118 Forward traffic to a SOCKS5 proxyIf you are running a socks5 proxy server rather than an http proxy server, you will have to forward all http traffic to it, because NPM has no native support for socks proxies. I would recommend Privoxy as it does a good job for it. Download and install Privoxy. Find its config.txt file in the directory where it was installed. Add this line to it, suppose your socks5 proxy is running on port 1080:1forward-socks5 / 127.0.0.1:1080 . Then you are able to use the HTTP or HTTPS proxy at 127.0.0.1:8118, as Privoxy listens 127.0.0.1 and the port 8118 by default.","categories":[],"tags":[{"name":"NPM","slug":"NPM","permalink":"https://jiaopucun.com/tags/NPM/"},{"name":"Yarn","slug":"Yarn","permalink":"https://jiaopucun.com/tags/Yarn/"},{"name":"Node","slug":"Node","permalink":"https://jiaopucun.com/tags/Node/"}]},{"title":"How To Disable Apache Cache","slug":"how-to-disable-apache-cache","date":"un11fin11","updated":"un00fin00","comments":true,"path":"2023/04/03/how-to-disable-apache-cache/","link":"","permalink":"https://jiaopucun.com/2023/04/03/how-to-disable-apache-cache/","excerpt":"","text":"If Apache cache doesn’t work properly for your website, you need to delete Apache cache or clear Apache cache. If it still doesn’t work, then here’s how to completely disable Apache Cache for your website. 1. Open httpd.confOpen httpd.conf with your favorite editor, make sure mod_rewrite and mod_headers are loaded. 12LoadModule rewrite_module modules/mod_rewrite.soLoadModule headers_module modules/mod_headers.so 2. Disable Apache CacheCreate a config file in the directory conf/extra/, for example httpd-cache.conf. Let’s say you want to disable caching html, js, css files only, then add the following lines to your httpd-cache.conf file. 1234567891011#Initialize mod_rewriteRewriteEngine On&lt;FilesMatch &quot;\\.(html|htm|js|css)$&quot;&gt; FileETag None &lt;IfModule mod_headers.c&gt; Header unset ETag Header set Cache-Control &quot;max-age=0, no-cache, no-store, must-revalidate&quot; Header set Pragma &quot;no-cache&quot; Header set Expires &quot;Wed, 12 Jan 1980 05:00:00 GMT&quot; &lt;/IfModule&gt;&lt;/FilesMatch&gt; If you want to also stop caching other file types such as pdf, jpg, etc. include them in line #3 above. 3. Include this file in httpd.confInclude this file in httpd.conf: 12# Disable cacheInclude conf/extra/httpd-cache.conf 4. Restart Apache serverRestart Apache server to applay changes.","categories":[],"tags":[{"name":"Apache","slug":"Apache","permalink":"https://jiaopucun.com/tags/Apache/"}]},{"title":"Common Git Commands","slug":"common-git-commands","date":"un66fin66","updated":"un00fin00","comments":true,"path":"2023/04/01/common-git-commands/","link":"","permalink":"https://jiaopucun.com/2023/04/01/common-git-commands/","excerpt":"","text":"Working with local repositoriesFirst-time setup12$ git config --global user.name &quot;John Doe&quot;$ git config --global user.email johndoe@example.com Git Aliases1234$ git config --global alias.co checkout$ git config --global alias.br branch$ git config --global alias.ci commit$ git config --global alias.st status Modify the username and email in history 1git commit --amend --reset-author Go back to a previous commit 12git revert --no-commit &lt;commit-hash&gt;..HEADgit commit Note: This will create a new commit, and the content will go back to &lt;commit-hash&gt;. 1git reset --hard &lt;commit-hash&gt; The command above will remove all changes haven’t committed, and go back to &lt;commit-hash&gt;. Show all the configuration information and files 1git config --list --show-origin git patch 12git diff &gt; my_custom_patch_file.patchgit apply patch_file.patch Filter the log by time range and a specific author 1git log --pretty=format:&quot;%ad - %an: %s&quot; --after=&quot;2016-01-31&quot; --until=&quot;2017-03-10&quot; --author=&quot;John Doe&quot; Configure Git to use a proxy Setting a global proxy: 1git config --global http.proxy http://proxyUsername:proxyPassword@proxy.server.com:port If you are using a SOCKS5 proxy: 1git config --global http.proxy &#x27;socks5://127.0.0.1:7070&#x27; URL specific proxy: 1git config --global http.https://domain.com.proxy http://proxyUsername:proxyPassword@proxy.server.com:port To disable the proxy, run command: 1git config --global --unset http.proxy Working with remote repositoriesSet upstream repository Show remote repositories have already set 123$ git remote -v&gt; origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)&gt; origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (push) Add a remote repository 1$ git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git Verify 12345$ git remote -v&gt; origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)&gt; origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)&gt; upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)&gt; upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push) Create a local branch based on a remote master branchIf you would like to keep the changes in your own master branch, you can run these commands to create a new local branch based on a remote master branch: 123git checkout -b upstream-mastergit fetch upstreamgit reset --hard upstream/master Link your local branch with a remote branch1git push -u &lt;remote&gt; &lt;branch&gt; rebaseLook up the base of your current branch: 1git merge-base new-branch main Outputs something like: 166e506853b0366c87f4834bb6b39d341cd094fe9 Run git rebase: 1git rebase -i 66e506853b0366c87f4834bb6b39d341cd094fe9 Then set the message for your commit, push it to the server: 1git push -f Modify the author information in a branchCreate a .sh file with the following content: 12345678910111213141516171819#!/bin/shgit filter-branch --env-filter &#x27;OLD_EMAIL=&quot;your-old-email@example.com&quot;CORRECT_NAME=&quot;Your Correct Name&quot;CORRECT_EMAIL=&quot;your-correct-email@example.com&quot;if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]then export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot; export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;fiif [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]then export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot; export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;fi&#x27; --tag-name-filter cat -- --branches --tags After you have successfully updated, push your changes to the remote repository: 1git push --force --tags origin &#x27;refs/heads/*&#x27; List remote branchesThis Git command will show you remote branches. The -r flag here is short for --remotes. 1git branch -r","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"https://jiaopucun.com/tags/Git/"}]},{"title":"Set a proxy for Google Chrome browser","slug":"set-a-proxy-for-google-chrome-browser","date":"un44fin44","updated":"un00fin00","comments":true,"path":"2023/03/16/set-a-proxy-for-google-chrome-browser/","link":"","permalink":"https://jiaopucun.com/2023/03/16/set-a-proxy-for-google-chrome-browser/","excerpt":"","text":"To set a proxy for Google Chrome browser with command line, you can use the following steps: Open the Command Prompt (CMD) or Terminal on your operating system. Navigate to the directory where Google Chrome is installed on your computer. For example, on Windows, the default installation directory is &quot;C:\\Program Files (x86)\\Google\\Chrome\\Application&quot;. Use the following command to launch Google Chrome with the proxy settings: 1chrome.exe --proxy-server=&lt;proxy_server_address&gt;:&lt;proxy_port&gt; Replace &lt;proxy_server_address&gt; and &lt;proxy_port&gt; with the actual address and port number of your proxy server. Press Enter to execute the command and launch Google Chrome with the specified proxy settings. For example, if your proxy server is located at IP address 192.168.1.100 and port 8080, the command would look like this: 1chrome.exe --proxy-server=192.168.1.100:8080 You can also specify additional options such as the user credentials for the proxy server, as shown in the following example: 1chrome.exe --proxy-server=192.168.1.100:8080 --proxy-user=username --proxy-password=password If you are using socks5 proxy, the format is: 1chrome.exe --proxy-server=socks5://192.168.1.100:8080 --proxy-user=username --proxy-password=password Replace username and password with your actual login credentials for the proxy server.5. In case you need to exclude some domains from using proxy, you can add an extra flag --host-resolver-rules. For example, if you want to visit the IP 127.0.0.1 directly, the command would look like this: 1chrome.exe --host-resolver-rules=&quot;EXCLUDE 127.0.0.1&quot; You can also exclude multiple domains or IPs, append more EXCLUDE to the command line: 1chrome.exe --host-resolver-rules=&quot;EXCLUDE 127.0.0.1, EXCLUDE localhost&quot;","categories":[],"tags":[{"name":"proxy","slug":"proxy","permalink":"https://jiaopucun.com/tags/proxy/"}]},{"title":"Adding Disqus comments to a Hexo powered site","slug":"adding-disqus-comments-to-a-hexo-powered-site","date":"un55fin55","updated":"un00fin00","comments":true,"path":"2023/02/03/adding-disqus-comments-to-a-hexo-powered-site/","link":"","permalink":"https://jiaopucun.com/2023/02/03/adding-disqus-comments-to-a-hexo-powered-site/","excerpt":"","text":"Set up your Disqus accountFirst of all, one should visit https://disqus.com/ and create a new site to use their service. Add Disqus support to HexoEdit the main config.yml fileOpen the config.ym file in your root directory of your website, append the following content: 1234# DISQUS commentsdisqus: enable: true shortname: my-website Please change the string my-website with your own, which is the Shortname of your site on Disqus. Create an .ejs file for DisqusCreate an .ejs file in your theme directory, such as themes/my-theme/layout/_partial/plugins/disqus/index.ejs: 12345678910111213141516171819&lt;% if (config.disqus.enable &amp;&amp; config.disqus.shortname)&#123; %&gt; &lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt; &lt;script&gt; /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */ var disqus_config = function () &#123; this.page.url = &#x27;&lt;%- page.permalink %&gt;&#x27;; // Replace PAGE_URL with your page&#x27;s canonical URL variable this.page.identifier = &#x27;&lt;%- page.date %&gt;&#x27;; // Replace PAGE_IDENTIFIER with your page&#x27;s unique identifier variable &#125;; (function() &#123; // DON&#x27;T EDIT BELOW THIS LINE var d = document, s = d.createElement(&#x27;script&#x27;); s.src = &#x27;https://&lt;%- config.disqus.shortname %&gt;.disqus.com/embed.js&#x27;; s.setAttribute(&#x27;data-timestamp&#x27;, +new Date()); (d.head || d.body).appendChild(s); &#125;)(); &lt;/script&gt; &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;&lt;% &#125; %&gt; Include Disqus in the templateEdit themes/my-theme/layout/_partial/article.ejs, remove the existing code block around &lt;section id=&quot;comments&quot;&gt;(if any), and append the following code snippets to this file: 12345&lt;% if (!index &amp;&amp; post.comments) &#123; %&gt;&lt;section id=&quot;comments&quot;&gt; &lt;%- partial(&#x27;_partial/plugins/disqus/index.ejs&#x27;) %&gt;&lt;/section&gt;&lt;% &#125; %&gt; Now you should be able to see Disqus embeded on your web pages.","categories":[],"tags":[{"name":"Disqus","slug":"Disqus","permalink":"https://jiaopucun.com/tags/Disqus/"},{"name":"Hexo","slug":"Hexo","permalink":"https://jiaopucun.com/tags/Hexo/"}]},{"title":"How to Create a Hybrid NPM Module for ESM and CommonJS.","slug":"how-to-create-single-source-npm-module","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2023/02/01/how-to-create-single-source-npm-module/","link":"","permalink":"https://jiaopucun.com/2023/02/01/how-to-create-single-source-npm-module/","excerpt":"","text":"Single Source BaseWrite your code in ES modules using import and export. 1234567import Shape from &#x27;./Shape.js&#x27;export class MyShape &#123; constructor() &#123; this.shape = new Shape() &#125;&#125; BuildingBuild the source twice, once for ESM and once for CommonJS. We use Typescript as our transpiler, and author in ES6&#x2F;ES-Next or Typescript. Alternatively, Babel would work fine for ES6. Javascript files should have a .js extension, Typescript files will have a .ts extension. Here is our package.json build script: package.json: 12345&#123; &quot;scripts&quot;: &#123; &quot;build&quot;: &quot;rm -fr dist/* &amp;&amp; tsc -p tsconfig.json &amp;&amp; tsc -p tsconfig-cjs.json &amp;&amp; ./fixup&quot; &#125;&#125; The tsconfig.json is setup to build for ESM and tsconfig-cjs.json builds for CommonJS. To avoid duplication of settings, we define a shared tsconfig-base.json that contains shared build settings used for both ESM and CommonJS builds. The default tsconfig.json is for ESM and builds using &quot;esnext&quot;. You can change this to &quot;es2015&quot; or any preset you desire. tsconfig.json: 12345678&#123; &quot;extends&quot;: &quot;./tsconfig-base.json&quot;, &quot;compilerOptions&quot;: &#123; &quot;module&quot;: &quot;esnext&quot;, &quot;outDir&quot;: &quot;dist/mjs&quot;, &quot;target&quot;: &quot;esnext&quot; &#125;&#125; tsconfig-cjs.json: 12345678&#123; &quot;extends&quot;: &quot;./tsconfig-base.json&quot;, &quot;compilerOptions&quot;: &#123; &quot;module&quot;: &quot;commonjs&quot;, &quot;outDir&quot;: &quot;dist/cjs&quot;, &quot;target&quot;: &quot;es2015&quot; &#125;&#125; Here is our tsconfig-base.json for ES6 code with all shared settings: tsconfig-base.json: 12345678910111213141516171819202122232425&#123; &quot;compilerOptions&quot;: &#123; &quot;allowJs&quot;: true, &quot;allowSyntheticDefaultImports&quot;: true, &quot;baseUrl&quot;: &quot;src&quot;, &quot;declaration&quot;: true, &quot;esModuleInterop&quot;: true, &quot;inlineSourceMap&quot;: false, &quot;lib&quot;: [&quot;esnext&quot;], &quot;listEmittedFiles&quot;: false, &quot;listFiles&quot;: false, &quot;moduleResolution&quot;: &quot;node&quot;, &quot;noFallthroughCasesInSwitch&quot;: true, &quot;pretty&quot;: true, &quot;resolveJsonModule&quot;: true, &quot;rootDir&quot;: &quot;src&quot;, &quot;skipLibCheck&quot;: true, &quot;strict&quot;: true, &quot;traceResolution&quot;: false, &quot;types&quot;: [&quot;node&quot;, &quot;jest&quot;] &#125;, &quot;compileOnSave&quot;: false, &quot;exclude&quot;: [&quot;node_modules&quot;, &quot;dist&quot;], &quot;include&quot;: [&quot;src&quot;]&#125; For Web browsers packagesNote: If you are building packages for web browsers, you might need to generate UMD module as well. Unfortunately, TypeScript’s UMD output does not support creating a browser global. You would better use an external bundler such as rollup.js. 1npm install rollup rollup-plugin-typescript2 --save-dev rollup.config.js 123456789101112131415161718192021222324import typescript from &#x27;rollup-plugin-typescript2&#x27;;import uglify from &quot;@lopatnov/rollup-plugin-uglify&quot;;export default [ &#123; input: &#x27;src/index.ts&#x27;, output: [ &#123; file: &#x27;dist/umd/index.js&#x27;, format: &#x27;umd&#x27;, name: &#x27;MyLibGlobalName&#x27; &#125;, &#123; file: &#x27;dist/mjs/index.js&#x27;, format: &#x27;es&#x27;, &#125;, &#123; file: &#x27;dist/cjs/index.js&#x27;, format: &#x27;cjs&#x27;, &#125;, ], plugins: [typescript()] &#125;,]; In this case, also you need to change package.json: 123&quot;scripts&quot;: &#123; &quot;build&quot;: &quot;rollup --config &amp;&amp; ./fixup&quot;&#125;, Per ESM&#x2F;CJS package.jsonThe last step of the build is a simple fixup script that creates per-distribution package.json files. These package.json files define the default package type for the .dist/* sub-directories. fixup: 1234567891011cat &gt;dist/cjs/package.json &lt;&lt;!EOF&#123; &quot;type&quot;: &quot;commonjs&quot;&#125;!EOFcat &gt;dist/mjs/package.json &lt;&lt;!EOF&#123; &quot;type&quot;: &quot;module&quot;&#125;!EOF Alternatively, you can put this logic into a .js file, such as fixup.js: 123456789101112131415161718192021222324252627import fs from &#x27;fs&#x27;;// If you are using CommonJS// const fs = require(&#x27;fs&#x27;);const content1 = `&#123; &quot;type&quot;: &quot;commonjs&quot;&#125;`;const content2 = `&#123; &quot;type&quot;: &quot;module&quot;&#125;`;try &#123; fs.writeFileSync(&#x27;./build/cjs/package.json&#x27;, content1); // file written successfully&#125; catch (err) &#123; console.error(err);&#125;try &#123; fs.writeFileSync(&#x27;./build/mjs/package.json&#x27;, content2); // file written successfully&#125; catch (err) &#123; console.error(err);&#125; Then change the scripts part of your package.json: 123&quot;scripts&quot;: &#123; &quot;build&quot;: &quot;rollup --config &amp;&amp; node ./fixup.js&quot;&#125;, Package.jsonOur package.json does not have a type property. Rather, we push that down to the package.json files under the ./dist/* sub-directories. We define an exports map which defines the entry points for the package: one for ESM and one for CJS. Here is a segment of our package.json: package.json: 12345678&quot;main&quot;: &quot;dist/cjs/index.js&quot;,&quot;module&quot;: &quot;dist/mjs/index.js&quot;,&quot;exports&quot;: &#123; &quot;.&quot;: &#123; &quot;import&quot;: &quot;./dist/mjs/index.js&quot;, &quot;require&quot;: &quot;./dist/cjs/index.js&quot; &#125;&#125;, SummaryWith the above strategy, modules can be consumed using import or require. And you can use a single code base that uses modern ES6 or Typescript. Users of your ESM distribution get the benefit of increased performance and easier debugging. Links: https://www.sensedeep.com/blog/posts/2021/how-to-create-single-source-npm-module.html https://github.com/microsoft/TypeScript/issues/46442#issuecomment-1059630739","categories":[],"tags":[{"name":"NPM","slug":"NPM","permalink":"https://jiaopucun.com/tags/NPM/"},{"name":"ESM","slug":"ESM","permalink":"https://jiaopucun.com/tags/ESM/"},{"name":"CommonJS","slug":"CommonJS","permalink":"https://jiaopucun.com/tags/CommonJS/"}]},{"title":"Docusaurus how to enable docs only mode","slug":"docusaurus-how-to-enable-docs-only-mode","date":"un66fin66","updated":"un00fin00","comments":true,"path":"2023/01/28/docusaurus-how-to-enable-docs-only-mode/","link":"","permalink":"https://jiaopucun.com/2023/01/28/docusaurus-how-to-enable-docs-only-mode/","excerpt":"","text":"A freshly initialized Docusaurus site has the following structure: 123456789example.com/ -&gt; generated from `src/pages/index.js`example.com/docs/intro -&gt; generated from `docs/intro.md`example.com/docs/tutorial-basics/... -&gt; generated from `docs/tutorial-basics/...`...example.com/blog/2021/08/26/welcome -&gt; generated from `blog/2021-08-26-welcome/index.md`example.com/blog/2021/08/01/mdx-blog-post -&gt; generated from `blog/2021-08-01-mdx-blog-post.mdx`... All docs will be served under the subroute docs/. But what if your site only has docs, or you want to prioritize your docs by putting them at the root? Assume that you have the following in your configuration (docusaurus.config.js): 123456789101112131415module.exports = &#123; // ... presets: [ &#x27;@docusaurus/preset-classic&#x27;, &#123; docs: &#123; /* docs plugin options */ &#125;, blog: &#123; /* blog plugin options */ &#125;, // ... &#125;, ],&#125;; To enter docs-only mode, change it to like this: 1234567891011121314module.exports = &#123; // ... presets: [ &#x27;@docusaurus/preset-classic&#x27;, &#123; docs: &#123; routeBasePath: &#x27;/&#x27;, // Serve the docs at the site&#x27;s root /* other docs plugin options */ &#125;, blog: false, // Optional: disable the blog plugin // ... &#125;, ],&#125;; Note that you don’t necessarily have to give up on using the blog or other plugins; all that routeBasePath: &#39;/&#39; does is that instead of serving the docs through https://example.com/docs/some-doc, they are now at the site root: https://example.com/some-doc. The blog, if enabled, can still be accessed through the blog/ subroute. Don’t forget to put some page at the root (https://example.com/) through adding the front matter(docs&#x2F;intro.md): 12345---slug: /---This page will be the home page when users visit https://example.com/. Note: If you added slug: / to a doc to make it the homepage, you should delete the existing homepage at ./src/pages/index.js, or else there will be two files mapping to the same route! Now, the site’s structure will be like the following: 123example.com/ -&gt; generated from `docs/intro.md`example.com/tutorial-basics/... -&gt; generated from `docs/tutorial-basics/...`...","categories":[],"tags":[{"name":"Docusaurus","slug":"Docusaurus","permalink":"https://jiaopucun.com/tags/Docusaurus/"}]},{"title":"Configure HTTPS on AWS EC2 using Cloudflare","slug":"configure-https-on-aws-ec2-using-cloudflare","date":"un66fin66","updated":"un00fin00","comments":true,"path":"2023/01/21/configure-https-on-aws-ec2-using-cloudflare/","link":"","permalink":"https://jiaopucun.com/2023/01/21/configure-https-on-aws-ec2-using-cloudflare/","excerpt":"","text":"Install a LAMP web server on AWS EC2There are many different distributions on AWS EC2, this article will take Amazon Linux 2 as an example to show you how to install a LAMP web server. Make sure your Connect to your instance. Update software on your instance. 1[ec2-user ~]$ sudo yum update -y Install the lamp-mariadb10.2-php7.2 and php7.2 packages. 1[ec2-user ~]$ sudo amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2 Install the Apache web server, MariaDB and PHP packages. 1[ec2-user ~]$ sudo yum install -y httpd mariadb-server Start the Apache server. 1[ec2-user ~]$ sudo systemctl start httpd Configure the Apache web server to start at each system boot. 1[ec2-user ~]$ sudo systemctl enable httpd Make sure requests to port 80 and 443 are allowed in inbound rules. Test your web server in a browser by typing the public DNS address of your instance. To set file permissions a) Add your user to the apache group. 1[ec2-user ~]$ sudo usermod -a -G apache ec2-user b) Log out and then log back in again to pick up the new group, and then verify your membership. 1[ec2-user ~]$ exit 12[ec2-user ~]$ groupsec2-user adm wheel apache systemd-journal c) Change the group ownership of &#x2F;var&#x2F;www and its contents to the apache group. 1[ec2-user ~]$ sudo chown -R ec2-user:apache /var/www d) Change the directory permissions of /var/www and its subdirectories. 1[ec2-user ~]$ sudo chmod 2775 /var/www &amp;&amp; find /var/www -type d -exec sudo chmod 2775 &#123;&#125; \\; e) To add group write permissions, recursively change the file permissions of /var/www and its subdirectories: 1[ec2-user ~]$ find /var/www -type f -exec sudo chmod 0664 &#123;&#125; \\; Secure your web server 1[ec2-user ~]$ sudo yum install -y mod_ssl Restart Apache. 12[ec2-user ~]$ sudo systemctl restart httpd Add a new record to Cloudflare DNSAdd a CNAME record for the subdomain(e.g, test.example.com) on the DNS page. Create a certificate for your origin serverGenerate a free TLS certificate signed by Cloudflare to install on your origin server. Origin Certificates are only valid for encryption between Cloudflare and your origin server. Import certificate to AWSVisit AWS Certificate Manager(ACM), click the Import a certificate button, follow the instructs, input the Certificate body and Certificate private key. Connect to your console and restart Apache. 1[ec2-user ~]$ sudo systemctl restart httpd Links https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/SSL-on-amazon-linux-2.html https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-lamp-amazon-linux-2.html https://developers.cloudflare.com/ssl/origin-configuration/origin-ca","categories":[],"tags":[{"name":"HTTPS","slug":"HTTPS","permalink":"https://jiaopucun.com/tags/HTTPS/"},{"name":"AWS EC2","slug":"AWS-EC2","permalink":"https://jiaopucun.com/tags/AWS-EC2/"},{"name":"Cloudflare","slug":"Cloudflare","permalink":"https://jiaopucun.com/tags/Cloudflare/"}]},{"title":"Linking A Custom Domain To GitHub Pages","slug":"Linking-A-Custom-Domain-To-GitHub-Pages","date":"un44fin44","updated":"un00fin00","comments":true,"path":"2023/01/19/Linking-A-Custom-Domain-To-GitHub-Pages/","link":"","permalink":"https://jiaopucun.com/2023/01/19/Linking-A-Custom-Domain-To-GitHub-Pages/","excerpt":"","text":"Here is a quick guide for adding a custom domain (e.g., mydomain.com) to your github pages website (e.g., username.github.io). Step 1Buy a domain, I used namecheap.com, but you can choose any other domain name registries. Step 2In your github.io repository’s Setting page, add the domain you purchased in Step 1 to the “Custom domain” input box. Step 3In your DNS Management console, add a CNAME record with the following parameters: type &#x3D; CNAME name &#x3D; www value &#x3D; username.github.io. This tells your DNS to point www.mydomain.com requests toward your github personal website username.github.io. Also, in your DNS management console, add 4 more A records with the following information: type &#x3D; A name &#x3D; @ value &#x3D; IP For IP, provide the GitHub IP address that host your username.github.io site. As of writing(2023-01-19) these IPs are: 1234185.199.108.153185.199.109.153185.199.110.153185.199.111.153 You can always get the latest IP addresses on this GitHub Docs page. Step 4Navigate to mydomain.com to see your github page. Be patient if it doesn’t work immediately. This lag is due to DNS propogation. Step 5GitHub pages support HTTPS, if you would like the content only be served over HTTPS, you can check the “Enforce HTTPS” checkbox on your repository Setting page. The next thing we have to do is bring SSL&#x2F;TLS support to your domain. There are several ways of doing this, normally you can purchase certificates from a trust provider, however, you can choose free service as well. For example, CloudFlare is providing Free SSL &#x2F; TLS support for your domain. In this case, you need to change the DNS to theirs then they will do the rest for you. If you are getting too many redirects error, then the issue would be CloudFlare’s SSL&#x2F;TLS Settings. By default CloudFlare uses a Flexible SSL option, which forces requests between clients and CloudFlare to be sent over HTTPS but allow requests between CloudFlare and your GitHub pages server to be sent over HTTP. If that option is enabled but GitHub pages server has its own SSL certificate, then your server will redirect these requests to HTTPS and likely cause the too many redirects error. You can resolve this issue by switching to another encryption mode, like Full or Full (strict).","categories":[],"tags":[{"name":"GitHub","slug":"GitHub","permalink":"https://jiaopucun.com/tags/GitHub/"},{"name":"DNS","slug":"DNS","permalink":"https://jiaopucun.com/tags/DNS/"},{"name":"Domain","slug":"Domain","permalink":"https://jiaopucun.com/tags/Domain/"}]},{"title":"WordPress Theme Development Guide","slug":"WordPress-Theme-Development-Guide","date":"un11fin11","updated":"un00fin00","comments":true,"path":"2023/01/16/WordPress-Theme-Development-Guide/","link":"","permalink":"https://jiaopucun.com/2023/01/16/WordPress-Theme-Development-Guide/","excerpt":"","text":"Creating a custom theme for WordPress is probably not as difficult as you imagined. With the help of a starter theme, the process can be much easier. What and Why a starter theme?A starter theme is a boilerplate that you can start with to develop your own WordPress theme. There are many advantages for using a starter theme, one of most important one is that you do not have to worry about the complexity invovled in coding a theme from start, your theme is always functional and you can improve it bit by bit. There are plenty of starter themes available, including Underscores, UnderStrap, and Bones. We’ll be using Underscores in this article. It’s a minimal starter theme, which only contains the basics. How to develop a WordPress ThemeStep 1: Set up a local environmentThe first thing is to create a local development environment. There are many ways to do this, I recommend XAMPP, which is a cross-platform and free PHP development environment. Step 2: Download and install a starter themeVisit Underscores’s official website and name your theme: You can also click on Advanced Options to customize the base theme: After you’ve made your choices, you can click on Generate, which will download a .zip file containing your starter theme. Now you will need to install it on local site by uploading it. Step 3: Learn about the basics of a WordPress themeFirst, you’ll have to learn about template files. WordPress determines which template files to use on each page by going through the template hierarchy. Another important element you need to understand is The Loop. Step 4: Configure your themeAdd Functionallity with ‘Hooks’ Add Styles with CSS Step 5: Export the Theme and Upload it to your site.","categories":[],"tags":[{"name":"WordPress","slug":"WordPress","permalink":"https://jiaopucun.com/tags/WordPress/"}]},{"title":"WordPress FAQ","slug":"WordPress-FAQ","date":"un11fin11","updated":"un00fin00","comments":true,"path":"2023/01/16/WordPress-FAQ/","link":"","permalink":"https://jiaopucun.com/2023/01/16/WordPress-FAQ/","excerpt":"","text":"Q: Installation failed: Download failed. No working transports foundA: The openssl extension is missing or disabled. Open php.ini and search openssl, if this extension is commented out, uncomment that line by removing semicolon(;). After that save the change and restart your web server. Q: There has been an error cropping your imageA: The gd extension is missing or disabled. Open php.ini and search gd, if this extension is commented out, uncomment that line by removing semicolon(;). After that save the change and restart your web server.","categories":[],"tags":[{"name":"WordPress","slug":"WordPress","permalink":"https://jiaopucun.com/tags/WordPress/"}]},{"title":"Cron-Job.org - A free cron service","slug":"Cron-Job-org-A-free-cron-service","date":"un00fin00","updated":"un00fin00","comments":true,"path":"2023/01/08/Cron-Job-org-A-free-cron-service/","link":"","permalink":"https://jiaopucun.com/2023/01/08/Cron-Job-org-A-free-cron-service/","excerpt":"","text":"I came across this great website when I was searching for a free hosting service to host my Yuan Weather app. According to its official website, they have been in service over 15 years, which is really impressive. In addition, the source code for their service is open source and available on GitHub, and most importantly, it is completely free. What can we do with it? Keep your website alive Notify your when your service is down Examine your site performance Send Emails or do other tasks regularly And many others …","categories":[],"tags":[]},{"title":"Build your own library with rollup.js and TypeScript","slug":"Build-your-own-library-with-rollup-js-and-TypeScript","date":"un44fin44","updated":"un00fin00","comments":true,"path":"2023/01/05/Build-your-own-library-with-rollup-js-and-TypeScript/","link":"","permalink":"https://jiaopucun.com/2023/01/05/Build-your-own-library-with-rollup-js-and-TypeScript/","excerpt":"","text":"Initialize your projectFirst of all, create a directory for your project then initialize with the npm command: 123mkdir myToolscd myToolsnpm init -y Next install rollup: 1npm install rollup -D Now create a folder for your source files, such as modules, then create the entry file index.js in it. After that create rollup.config.js: 12345678910111213export default &#123; input: &quot;modules/index.js&quot;, output: [ &#123; file: &quot;lib/bundle.cjs.js&quot;, format: &quot;cjs&quot;, &#125;, &#123; file: &quot;lib/bundle.esm.js&quot;, format: &quot;es&quot;, &#125;, ],&#125;; Then add a command to your package.json file in order to run it more conveniently: 12345&#123; &quot;scripts&quot;: &#123; &quot;build&quot;: &quot;rollup --config&quot; &#125;,&#125; The next time you run the npm run build command, files will be generated in the lib directory. Add TypeScript supportFirst, we need to install npm packages: 1npm install typescript rollup-plugin-typescript2 tslib -D Edit rollup.config.js file to use the TypeScript plugin: 1234567891011121314151617181920import typescript from &quot;rollup-plugin-typescript&quot;;export default &#123; input: &quot;modules/index.ts&quot;, output: [ &#123; file: &quot;lib/bundle.cjs.js&quot;, format: &quot;cjs&quot;, &#125;, &#123; file: &quot;lib/bundle.esm.js&quot;, format: &quot;es&quot;, &#125;, ], plugins: [ typescript(&#123; exclude: &quot;node_modules/**&quot;, typescript: require(&quot;typescript&quot;), &#125;), ],&#125;; It is time to change the input value to your new entry file, such as modules/index.ts.","categories":[],"tags":[{"name":"rollup.js","slug":"rollup-js","permalink":"https://jiaopucun.com/tags/rollup-js/"},{"name":"TypeScript","slug":"TypeScript","permalink":"https://jiaopucun.com/tags/TypeScript/"}]},{"title":"Electron installation Errors","slug":"Electron-installation-Errors","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2023/01/04/Electron-installation-Errors/","link":"","permalink":"https://jiaopucun.com/2023/01/04/Electron-installation-Errors/","excerpt":"","text":"Electron is a framework for building desktop applications using JavaScript, HTML and CSS. When you are following the tutorial on the official website, you might have problems when you try to install the electron package: 1npm install electron --save-dev You might come across error messages such as Electron RequestError: connect ETIMEDOUT 20.205.243.166:443. This problem is so common that many developers are asking the same question all the time, even the official document has given their solution. To summarise, if you are a developer who is living in China, you can simply create a .npmrc in your project root folder, then add this line into the file: 1electron_mirror=https://npmmirror.com/mirrors/electron/ Save and close the file. Try the command above again, you should be able to install Electron now. Alternatively, you can also set NPM config settings by running: 123456# yarnyarn config set electron_mirror https://npmmirror.com/mirrors/electron/# npmnpm config set ELECTRON_MIRROR https://npmmirror.com/mirrors/electron/","categories":[],"tags":[]},{"title":"How to create a carousel with CSS scroll snap","slug":"How-to-create-a-carousel-with-CSS-scroll-snap","date":"un11fin11","updated":"un00fin00","comments":true,"path":"2023/01/02/How-to-create-a-carousel-with-CSS-scroll-snap/","link":"","permalink":"https://jiaopucun.com/2023/01/02/How-to-create-a-carousel-with-CSS-scroll-snap/","excerpt":"","text":"A carousel is used to crycle through elements: Create A carouselStep 1. Add HTML: 12345678910111213141516171819&lt;div class=&quot;parentEl&quot;&gt; &lt;div id=&quot;container&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;5&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;6&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;7&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;controls&quot;&gt; &lt;button class=&quot;toggle&quot; data-toggle=&quot;prev&quot;&gt;Prev&lt;/button&gt; &lt;button class=&quot;toggle&quot; data-toggle=&quot;next&quot;&gt;Next&lt;/button&gt; &lt;/div&gt; &lt;div class=&quot;dots&quot; style=&quot;text-align: center&quot;&gt;&lt;/div&gt;&lt;/div&gt; Step 2. Add CSS: Style the next and previous buttons, and the dots: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#container &#123;scroll-snap-type: x mandatory;display: flex;overflow-x: scroll;width: 100%;&#125;.item &#123;border: 1px solid red;min-width: 33%;height: auto;scroll-snap-align: start;&#125;#container &#123;scroll-behavior: smooth;&#125;/* Hide the horizontal scroll bar *//* Hide scrollbar for Chrome, Safari and Opera */#container::-webkit-scrollbar &#123;display: none;&#125;/* Hide scrollbar for IE, Edge and Firefox */#container &#123;-ms-overflow-style: none; /* IE and Edge */scrollbar-width: none; /* Firefox */&#125;/** Controls **/.controls &#123; padding: 1em; text-align: center;&#125;.controls button &#123; background: #aaa; border: 0; border-radius: 0.25em; color: #eee; padding: 0.5em 1em;&#125;.controls button:hover,.controls button:focus &#123; background: orange;&#125;/* The dots/bullets/indicators */.dot &#123; cursor: pointer; height: 13px; width: 13px; margin: 0 2px; background-color: #bbb; border-radius: 50%; display: inline-block; transition: background-color 0.6s ease;&#125;.active, .dot:hover &#123; background-color: #717171;&#125; Step 3. Add JavaScript 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061const parentEl = document.querySelector(&#x27;.parentEl&#x27;);const container = document.querySelector(&#x27;#container&#x27;);const dotsWrapperEl = document.querySelector(&#x27;.dots&#x27;);const items = container.querySelectorAll(&#x27;.item&#x27;);const nextBtn = parentEl.querySelector(&#x27;.controls [data-toggle=&quot;next&quot;]&#x27;);const prevBtn = parentEl.querySelector(&#x27;.controls [data-toggle=&quot;prev&quot;]&#x27;);let currentIndex = 0;nextBtn.addEventListener(&#x27;click&#x27;, function(e) &#123; currentIndex = (currentIndex + 1) % items.length; updateUI();&#125;);prevBtn.addEventListener(&#x27;click&#x27;, function(e) &#123; currentIndex--; if (currentIndex &lt; 0) currentIndex = items.length - 1; updateUI();&#125;);dotsWrapperEl.addEventListener(&#x27;click&#x27;, function(e) &#123; const target = e.target; const dotList = dotsWrapperEl.querySelectorAll(&#x27;.dot&#x27;); if (target.classList.contains(&#x27;dot&#x27;)) &#123; const index = getDotIndex(target, dotList); currentIndex = index; updateUI(); &#125;&#125;);function getDotIndex(target, dotList) &#123; for (let i = 0; i &lt; dotList.length; i++) &#123; if (dotList[i] === target) return i; &#125; return -1;&#125;function updateUI() &#123; dotsWrapperEl.querySelector(&#x27;.active&#x27;)?.classList.remove(&#x27;active&#x27;); dotsWrapperEl.querySelectorAll(&#x27;.dot&#x27;)[currentIndex].classList.add(&#x27;active&#x27;); const ar = getOrder(currentIndex); for (let i = 0; i &lt; items.length; i++) &#123; items[i].style.order = ar[i]; &#125; items[currentIndex].scrollIntoView(&#123;block: &quot;start&quot;, inline: &quot;start&quot;&#125;);&#125;function getOrder(rotateCount = 0) &#123; const arr = Array.from(&#123;length: items.length&#125;, (x, i) =&gt; i + 1); arr.push(arr.shift()); if (rotateCount == 0) return arr; const ar = arr.splice(items.length - rotateCount, rotateCount); arr.splice(0, 0, ...ar); return arr;&#125;getOrder();dotsWrapperEl.innerHTML = &#x27;&lt;span class=&quot;dot&quot;&gt;&lt;/span&gt;&#x27;.repeat(items.length);updateUI(); The interesting partsHow to hide the container’s scrollbar?123456789101112/* Hide the horizontal scroll bar *//* Hide scrollbar for Chrome, Safari and Opera */#container::-webkit-scrollbar &#123; display: none;&#125;/* Hide scrollbar for IE, Edge and Firefox */#container &#123; -ms-overflow-style: none; /* IE and Edge */ scrollbar-width: none; /* Firefox */&#125; How to scroll to a specific element?There are several ways of scrolling to an element on the web page, we prefer the Element interface’s scrollIntoView() method here. How to make a loop carousel?We are using CSS Scroll Snap rather than other approaches to make slides scrollable, this module does not support loop by default. We could leverage the order CSS property in the flexbox layout to control the orders of slides in the carousel, which is a clever solution. To determine the order of each item, we use a simple algorithm here: 12345678function getOrder(rotateCount = 0) &#123; const arr = Array.from(&#123;length: items.length&#125;, (x, i) =&gt; i + 1); arr.push(arr.shift()); if (rotateCount == 0) return arr; const ar = arr.splice(items.length - rotateCount, rotateCount); arr.splice(0, 0, ...ar); return arr;&#125; All the slides are given an order CSS property with corresponding value, note the first one has a value of 2 instead of 1 by default. Please see LeetCode 189. Rotate Array","categories":[],"tags":[]},{"title":"activate windows 11 for free","slug":"activate-windows-11-for-free","date":"un22fin22","updated":"un00fin00","comments":true,"path":"2022/12/27/activate-windows-11-for-free/","link":"","permalink":"https://jiaopucun.com/2022/12/27/activate-windows-11-for-free/","excerpt":"","text":"On Windows 10&#x2F;11, right click on windows start menu, select PowerShell or Terminal. Copy-paste the below code and press enter1irm https://massgrave.dev/get | iex You will see the activation options, follow onscreen instructions. That’s all.","categories":[],"tags":[]},{"title":"css keep image ratio","slug":"css-keep-image-ratio","date":"un22fin22","updated":"un00fin00","comments":true,"path":"2022/02/22/css-keep-image-ratio/","link":"","permalink":"https://jiaopucun.com/2022/02/22/css-keep-image-ratio/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"isomorphic-javascript-web-development","slug":"isomorphic-javascript-web-development","date":"un66fin66","updated":"un00fin00","comments":true,"path":"2022/01/08/isomorphic-javascript-web-development/","link":"","permalink":"https://jiaopucun.com/2022/01/08/isomorphic-javascript-web-development/","excerpt":"","text":"What are isomorphic apps?Isomorphic apps are these apps that designed for the browser but at the same time they must run on the server for generating HTML markup. Benefits: Dramatically imrpove the initial load time Search engine friendly Reduce code duplication by sharing the code between client-side and server-side codebases. The following parts can be shared between client and server: The presentation layer (UI) routing and navigation data fetching and persistence UI localization and internationalization Usually we need a Node.js server in order to run isomorphic apps server side, but you can execute JavaScript code an any platforms, such as PHP, .NET and Ruby. How to write isomorphic JavaScript code?Module bundlers such as Browserify or Webpack allow to bundle and optimize JavaScript code for a specific environment.","categories":[],"tags":[]},{"title":"React shouldComponentUpdate()","slug":"react-shouldcomponentupdate","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2021/12/08/react-shouldcomponentupdate/","link":"","permalink":"https://jiaopucun.com/2021/12/08/react-shouldcomponentupdate/","excerpt":"","text":"shouldComponentUpdate() is one of React lifecycle functions. Syntax: 123456789/** * Called to determine whether the change in props and state should trigger a re-render. * @param &#123;Object&#125; nextProps * @param &#123;Object&#125; nextState * @return boolean - Defaults to true */shouldComponentUpdate(nextProps, nextState) &#123; return true;&#125; The default behavior is to re-render the component every time when its props or state changes. Most of the time we should rely on the default behavior. shouldComponentUpdate() is invoked before rendering when new props or state are being received. Defaults to true. This method is not called for the initial render or when forceUpdate() is used. This method only exists as a performance optimization. Do not rely on it to “prevent” a rendering, as this can lead to bugs. The ReactJS official documentation recommends using the built-in PureComponent instead of writing shouldComponentUpdate() by hand. PureComponent performs a shallow comparison of props and state, and reduces the chance that you’ll skip a necessary update. If you are confident you want to write it by hand, you may compare this.props with nextProps and this.state with nextState and return false to tell React the update can be skipped. Note that returning false does not prevent child components from re-rendering when their state changes. Doing deep equality checks or using JSON.stringify() in shouldComponentUpdate() is not recommended. It is very inefficient and will harm performance. Currently, if shouldComponentUpdate() returns false, then UNSAFE_componentWillUpdate(), render(), and componentDidUpdate() will not be invoked. In the future React may treat shouldComponentUpdate() as a hint rather than a strict directive, and returning false may still result in a re-rendering of the component. Should I use shouldComponentUpdate?There are rare cases that you need the use of shouldComponentUpdate. The reason is that React rendering is already fast by default. In general, this method is rarely used. Or if you really need it, you should implement PureComponent so React can maintain it for you.","categories":[],"tags":[{"name":"React","slug":"React","permalink":"https://jiaopucun.com/tags/React/"}]},{"title":"Download a File Using JavaScript","slug":"javascript-download","date":"un22fin22","updated":"un00fin00","comments":true,"path":"2021/12/07/javascript-download/","link":"","permalink":"https://jiaopucun.com/2021/12/07/javascript-download/","excerpt":"","text":"In this article, we will learn how to download files using JavaScript. Automatic downloading files help us retrieve files directly from the URL with a JavaScript function without contacting any servers. We will achieve this using our custom written functions and using the download attribute of HTML 5. Use download Attribute in HTML to Download FilesThe download attribute in HTML 5 is used to download files when users click on the hyperlink. It is used with anchor tags - &lt;a&gt; and &lt;area&gt;. We are required to set the href attribute specifying the source of the file. The value of the download attribute determines the name of the downloaded file. If this value is removed, then the downloaded filename will be the same as the original file name. 1234567891011&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;How to Download files Using JavaScript &lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;a href=&quot;apple.png&quot; download=&quot;apple&quot;&gt; &lt;button type=&quot;button&quot;&gt;Download&lt;/button&gt; &lt;/a&gt; &lt;/body&gt; &lt;/html&gt; In the above code, we download an image apple.png using the download attribute. We first create the anchor tag containing the image’s address and add the download attribute to it. Then we also created a download button to facilitate downloading files. Using a Custom-Written Function to Create and Download Text Files in JavaScriptThis approach will create text data on the fly and then use JavaScript to create a text file and then download it. Create a text area to enter the text data. Create an anchor tag &lt;a&gt; using the createElement property and assign download and href attributes to it. Use the encodeURIComponent to encode the text and append it to URI as its component. This will help us to replace certain special characters with a combination of escape sequences. Set the date type to text/plain and encoding to UTF-8 using the data:text/plain; charset = utf-8 as the attribute value of href. Append this created element to the body of the document(HTML page). Use element.click() to simulate a mouse click. Remove the element from the body of the document(HTML page). Attach an event listener looking for a click to a download button. Call the download function with text from the text area and the text file’s filename as parameters. 12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt; How to Download files Using JavaScript &lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;textarea id=&quot;text&quot;&gt;DelftStack&lt;/textarea&gt; &lt;br /&gt; &lt;input type=&quot;button&quot; id=&quot;btn&quot; value=&quot;Download&quot; /&gt; &lt;script&gt; function download(filename, textInput) &#123; var element = document.createElement(&#x27;a&#x27;); element.setAttribute(&#x27;href&#x27;,&#x27;data:text/plain;charset=utf-8, &#x27; + encodeURIComponent(textInput)); element.setAttribute(&#x27;download&#x27;, filename); document.body.appendChild(element); element.click(); //document.body.removeChild(element); &#125; document.getElementById(&quot;btn&quot;) .addEventListener(&quot;click&quot;, function () &#123; var text = document.getElementById(&quot;text&quot;).value; var filename = &quot;output.txt&quot;; download(filename, text); &#125;, false); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; Use Axios Library to Download FilesIn this approach, we will use the Axios library to download files. Before proceeding with the approach’s details, let us understand what Blob is, the data type used to download files using Axios. BlobBlob stands for Binary Large Object and is a data type that can store binary data. It represents data like programs, code snippets, multimedia objects, and other things that don’t support JavaScript native format. Download Files Create an Axios get request with URL as the source of the file and the responseType as a blob. Resolve the promise returned by the Axios request by performing the following steps: Create a DOMString that contains the URL representing the Blob object. Create an anchor tag &lt;a&gt; using the createElement property and assign download and href attributes to it. Set href as the URL created in the first step and download attribute as the downloaded file’s name. Attach this link to the document and simulate a click using the .click() method. Remove this link from the document. 1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;How to download files using JavaScript&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;button onclick=&quot;download()&quot;&gt; Download Image &lt;/button&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.2/axios.min.js&quot;&gt; &lt;/script&gt; &lt;script&gt; function download() &#123; axios(&#123; url: &#x27;https://source.unsplash.com/random/500x500&#x27;, method: &#x27;GET&#x27;, responseType: &#x27;blob&#x27; &#125;) .then((response) =&gt; &#123; const url = window.URL .createObjectURL(new Blob([response.data])); const link = document.createElement(&#x27;a&#x27;); link.href = url; link.setAttribute(&#x27;download&#x27;, &#x27;image.jpg&#x27;); document.body.appendChild(link); link.click(); document.body.removeChild(link); &#125;) &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; Here we get random images from a site, use Axios to request those images in the form of blobs, and then download them using the anchor tag’s download attribute. This method is not restricted to the plain text entered by the user like the previous method. We can request any sort of data from an API and then use this approach to save data inside our computer. All the major browsers support all the above methods except the method using the Axios library. Internet Explorer still does not supports the native ES6 promises, and Axios depends heavily on them. Demo HTML code: 12345678910111213141516171819202122232425262728293031323334353637383940&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;title&gt;How to download files using JavaScript&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;button onclick=&quot;download()&quot;&gt; Download App &lt;/button&gt; &lt;p&gt;Percent: &lt;span id=&quot;perc&quot;&gt;0&lt;/span&gt;%&lt;/p&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.2/axios.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; function download() &#123; axios(&#123; url: &quot;https://app.maimaidl.cn/maimai_android_6.1.30.60130_zhihuad10.apk&quot;, method: &quot;GET&quot;, responseType: &quot;blob&quot;, onDownloadProgress: (progressEvent) =&gt; &#123; let percentCompleted = Math.round( (progressEvent.loaded * 100) / progressEvent.total ); console.log(&quot;percentCompleted:&quot;, percentCompleted); document.querySelector(&quot;#perc&quot;).textContent = percentCompleted; &#125; &#125;).then((response) =&gt; &#123; const url = window.URL.createObjectURL(new Blob([response.data])); const link = document.createElement(&quot;a&quot;); link.href = url; link.setAttribute(&quot;download&quot;, &quot;test.apk&quot;); document.body.appendChild(link); link.click(); document.body.removeChild(link); &#125;); &#125; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; Source: https://www.delftstack.com/howto/javascript/javascript-download/","categories":[],"tags":[]},{"title":"Debug Webpages on Android with Chrome DevTools","slug":"debug-webpages-on-android-with-chrome-devtools","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2021/11/10/debug-webpages-on-android-with-chrome-devtools/","link":"","permalink":"https://jiaopucun.com/2021/11/10/debug-webpages-on-android-with-chrome-devtools/","excerpt":"","text":"Step 1: Discover your Android device Open the Developer Options screen on your Android. See Configure On-Device Developer Options. Select Enable USB Debugging. On your development machine, open Chrome. Go to chrome://inspect#devices. Make sure that the Discover USB devices checkbox is enabled. Connect your Android device directly to your development machine using a USB cable. The first time you do this, you usually see that DevTools has detected an offline device. If you see the model name of your Android device, then DevTools has successfully established the connection to your device. Continue to Step 2. If your device is showing up as Offline, accept the Allow USB Debugging permission prompt on your Android device. Step 2: Debug content on your Android device from your development machine Open Chrome on your Android device. In the chrome://inspect/#devices, you see your Android device’s model name, followed by its serial number. Below that, you can see the version of Chrome that’s running on the device, with the version number in parentheses. Each open Chrome tab gets its own section. You can interact with that tab from this section. If there are any apps using WebView, you see a section for each of those apps, too. In the Open tab with url text box, enter a URL and then click Open. The page opens in a new tab on your Android device. Click Inspect next to the URL that you just opened. A new DevTools instance opens. The version of Chrome running on your Android device determines the version of DevTools that opens on your development machine. So, if your Android device is running a very old version of Chrome, the DevTools instance may look very different than what you’re used to. Source: https://developer.chrome.com/docs/devtools/remote-debugging/ JavaScript Console Open the page that you want to debug While on that page, in the address bar of a stock Android browser, type:1about:debug You should see SHOW JAVASCRIPT CONSOLE at the top of the Browser.","categories":[{"name":"Debugging","slug":"Debugging","permalink":"https://jiaopucun.com/categories/Debugging/"}],"tags":[{"name":"Chrome DevTools","slug":"Chrome-DevTools","permalink":"https://jiaopucun.com/tags/Chrome-DevTools/"}]},{"title":"Setting up Charles to proxy your Android device","slug":"setting-up-charles-to-proxy-your-android-device","date":"un11fin11","updated":"un00fin00","comments":true,"path":"2021/10/18/setting-up-charles-to-proxy-your-android-device/","link":"","permalink":"https://jiaopucun.com/2021/10/18/setting-up-charles-to-proxy-your-android-device/","excerpt":"","text":"This article describes the steps required to set up your Android device to proxy network requests through Charles. Configuring Charles ProxyUse the following steps to configure Charles Proxy: Go to Proxy &gt; Proxy Settings. In the Proxies tab enter 8888 in the HTTP Proxy Port field. Go to Proxy &gt; SSL Proxying Settings. Click the SSL Proxying tab and check the Enable SSL Proxying checkbox to configure a location.By default, Charles will only perform SSL proxying for specific domains you include in the list.To save listing all URLs you wish to inspect, you can use a location of *.* as a wildcard, and SSL proxying will be enabled for all domains:If your app ceases to function correctly, it is possible that the app is rejecting the self-signed certificate from Charles Proxy. If this happens, disable the wildcard match, and list only the domains. The port default value is 443.You can leave this field blank, as Charles will set it automatically. Identifying Your IP Address Go to Help &gt; Local IP Address Make note of the IP Address, as it will be needed in later steps. Configuring Your Android Device to use the Charles ProxyUse the following steps to configure your Android device to use Charles proxy: Go to Settings &gt; Wifi. Press and hold down the power key on the Wifi Network device you are currently connected to. When the modal displays, select Modify Network. Select Show Advanced Options to display proxying options. Under Proxy, select Manual. In the Proxy Host Name box, enter the IP Address you previously saved from your development machine. In the Proxy Port field, enter 8888, as when configuring Charles. Click Save to save the settings and exit. Open a browser on your device to test.Charles displays a dialog prompting you to allow or deny SSL proxying. Click Allow.If you are not prompted to allow SSL proxying, restart Charles and try again. Go to http://chls.pro/ssl from your device and download the Charles SSL certificate.On newer versions of Android, you may get an error on downloading, such as “download unsuccessful”.If this happens, use the following instructions: Go to Help &gt; SSL Proxying &gt; Save Charles Root Certificate. Change the file type from the default .pem to .cer and save in a location that you will remember for later. Transfer the .cer file to your device using an SD Card, USB Cable, or remote transfer such as Google Drive. Open the file from a file manager such as the Android File Manager, or a third party file manager such as File Commander. You will be prompted to save the certificate. Continue with the remaining steps. Name the certificate and okay it as a trusted certificate.Ensure that you disable or remove it when complete. Once the certificate is installed, you are prompted to set up a PIN. When prompted, add the new PIN. Clearing Certificates and Removing the PIN from a DeviceClearing the certificate and removing the PIN from an Android device is optional. Use the following steps to clear the certificate, remove the PIN, or both: Open the Settings application on your Android device. Navigate to Security &gt; Clear Credentials at the bottom of the list of options. Click Clear Credentials. Confirm that you want to clear the credentials. To remove the PIN, navigate to Settings &gt; Lock Screen &gt; Screen Lock and remove the PIN. Source: https://community.tealiumiq.com/t5/Tealium-for-Android/Setting-up-Charles-to-Proxy-your-Android-Device/ta-p/5121#clearing_certificate_removing_pin","categories":[{"name":"Debugging","slug":"Debugging","permalink":"https://jiaopucun.com/categories/Debugging/"}],"tags":[{"name":"Charles","slug":"Charles","permalink":"https://jiaopucun.com/tags/Charles/"}]},{"title":"How to set up Charles proxy on a Windows PC","slug":"how-to-set-up-charles-proxy-on-a-windows-pc","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2021/10/13/how-to-set-up-charles-proxy-on-a-windows-pc/","link":"","permalink":"https://jiaopucun.com/2021/10/13/how-to-set-up-charles-proxy-on-a-windows-pc/","excerpt":"","text":"Charles Proxy is a powerful website optimization and QA tool for developers, analysts, and engineers. With Charles you can monitor exactly how your application communicates with a remote server. Part 1 – Certificate Set UpThe first part of the guide will help you add the Charles SSL Certificate to your PC so that Charles can decrypt any local HTTPS traffic. Step 0 – Download and install Charles Step 1 – Open Charles then go to Help &gt; SSL Proxying &gt; Install Charles Root Certificate Step 2 – Click “Install Certificate” Step 3 – Select either “Current User” or “Local Machine”. I recommend “Current User” for most users. Step 4 – Select “Place all certificates in the following store” then click “Browse” Step 5 – Select “Trusted Root Certification Authorities” then click “OK“ Step 6 – Click “Next“ Step 7 – Click “Finish“ Step 8 – You should see a message saying “The import was successful”, click “OK“ Part 2 – SSL Proxying Set UpThis part will help you set up Charles so that it can decrypt HTTPS encrypted traffic. Step 1 – Enable Windows Proxy if it is not enabled already. Click on Proxy &gt; Windows Proxy. You should see a checkmark to indicate that the windows proxy is enabled. Step 2 – Go to Proxy &gt; SSL Proxying Settings Step 3 – Click on the “Enable SSL Proxying” checkbox, then under “Include”, click “Add“. Step 4 – Enter the host and port that you want to decrypt. Then click “OK“, then click “OK” again to go back to the main Charles window. Step 5 – Close Charles and Re-Open Step 6 – Enter “google-analytics” as the Filter and on a new browser tab, go to https://app.analystadmin.com/, you should see the HTTPS analytics tracking beacon go out. For users who only need to intercept HTTPS on your local machine (Ex: web browser), you can stop here. Firewall Set Up for iPhone and Android ProxyingThis part only applies to users who need to proxy traffic to your PC from an external device. For example, if you have an iPhone and need to capture a Charles log with your PC. In some cases, Windows 10 PCs are set up with very strict firewall rules. Use this section to check if Charles is set up correctly with your firewall. Step 1 – Press the Windows key and start typing “Windows Defender Firewall with Advanced Security“. Then open the application. Step 2 – Under Inbound Rules, look for Charles Web Debugging Proxy. -&gt; Stop here if you see green next to both Charles rules. -&gt; Continue to Step 3 if you see a prohibited (blocked) sign next to any Charles rules Step 3 – Double click on a blocked Charles rule, then click on “Allow the connection” and click “OK“. Repeat for the second rule if needed. Step 4 – You should see a green circle with a checkmark next to the Charles rules now. You’re done! Now you have a Windows 10 PC that can proxy local traffic as well as external traffic from phones and tablets. Source: https://analystadmin.com/how-to-set-up-charles-proxy-on-a-windows-pc/","categories":[{"name":"Debugging","slug":"Debugging","permalink":"https://jiaopucun.com/categories/Debugging/"}],"tags":[{"name":"Charles","slug":"Charles","permalink":"https://jiaopucun.com/tags/Charles/"}]},{"title":"How to use callback with useState hook in React?","slug":"how-to-use-callback-with-usestate","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2021/10/13/how-to-use-callback-with-usestate/","link":"","permalink":"https://jiaopucun.com/2021/10/13/how-to-use-callback-with-usestate/","excerpt":"","text":"Approach 1. With useEffectWith React 16.x and up, if you want to invoke a callback function on state change using useState hook, you can use the useEffect hook to listen to the state change. 1234567891011121314import React, &#123; useState, useEffect &#125; from &#x27;react&#x27;;export default function App() &#123; const [count, setCount] = useState(0); // Defaults to 0 useEffect(() =&gt; &#123; console.log(&#x27;called:&#x27;, count); // When `count` changes, this function will be called. &#125;, [count]); return ( &lt;div className=&quot;App&quot;&gt; &lt;p&gt;&lt;button onClick=&#123;() =&gt; setCount(prevCount =&gt; prevCount + 1)&#125;&gt;Add&lt;/button&gt;&lt;/p&gt; &lt;p&gt;Count: &#123;count&#125;&lt;/p&gt; &lt;/div&gt; );&#125; Or you can wrap it in a helper function: 1234567891011121314151617const useStateCallback = (initilValue, callback) =&gt; &#123; const [state, setState] = useState(initilValue); useEffect(() =&gt; callback(state), [state, callback]); return [state, setState];&#125;;export default function App() &#123; const [count, setCount] = useStateCallback(0, (state) =&gt; &#123; console.log(&#x27;Count state:&#x27;, state); &#125;); return ( &lt;div className=&quot;App&quot;&gt; &lt;p&gt;&lt;button onClick=&#123;() =&gt; setCount(prevCount =&gt; prevCount + 1)&#125;&gt;Add&lt;/button&gt;&lt;/p&gt; &lt;p&gt;Count: &#123;count&#125;&lt;/p&gt; &lt;/div&gt; );&#125; Note: The callback function will be called on initial render. The callback function won’t trigger if the state is identical. Approach 2. With useEffect and useRefsetState(updater, callback) fro useState Following implementation comes really close to the original setState callback of classes. Callback execution is omitted on initial render - we only want to call it on state updates Callback can be dynamic for each setState invocation, like with classes Usage 12345678910111213const App = () =&gt; &#123; const [state, setState] = useStateCallback(0); // same API as useState const handleClick = () =&gt; &#123; setState( prev =&gt; prev + 1, // second argument is callback, `s` being the *updated* state s =&gt; console.log(&quot;I am called after setState, state:&quot;, s) ); &#125;; return &lt;button onClick=&#123;handleClick&#125;&gt;Increment&lt;/button&gt;;&#125; useStateCallback 1234567891011121314151617181920function useStateCallback(initialState) &#123; const [state, setState] = useState(initialState); const cbRef = useRef(null); // init mutable ref container for callbacks const setStateCallback = useCallback((state, cb) =&gt; &#123; cbRef.current = cb; // store current, passed callback in ref setState(state); &#125;, []); // keep object reference stable, exactly like `useState` useEffect(() =&gt; &#123; // cb.current is `null` on initial render, // so we only invoke callback on state *updates* if (cbRef.current) &#123; cbRef.current(state); cbRef.current = null; // reset callback after execution &#125; &#125;, [state]); return [state, setStateCallback];&#125; Ref: https://stackoverflow.com/questions/54954091/how-to-use-callback-with-usestate-hook-in-react/56394177","categories":[],"tags":[{"name":"React","slug":"React","permalink":"https://jiaopucun.com/tags/React/"}]},{"title":"Charles Proxy Cookbook","slug":"charles-proxy-cookbook","date":"un11fin11","updated":"un00fin00","comments":true,"path":"2021/10/11/charles-proxy-cookbook/","link":"","permalink":"https://jiaopucun.com/2021/10/11/charles-proxy-cookbook/","excerpt":"","text":"Charles is an HTTP proxy &#x2F; HTTP monitor that is very popular in the front-end community. # 1. Changing response body with CharlesThere are several ways to do this, I’ll show you how to use the Map Local tool to map a remote API endpoint to a local file. If you are working on macOS, press and hold these three keys together: command, option, and L: Make sure the Enable Map Local checkbox is checked, then click Add button. The following dialog will be shown: All the form controls are quite easy to understand. Fill in the form according to your requirements. I’ll take https://jsonplaceholder.typicode.com/users as an example, which is a mock json response server, mapping it to a local file named users.json on my desktop. 12345678[ &#123; &quot;name&quot;: &quot;John&quot; &#125;, &#123; &quot;name&quot;: &quot;Ervin&quot; &#125;] So, fill in the form as following: Click OK to save all the settings. Finally make sure its macOS proxy is working: Now visit the API with your browser, you’ll find the response body was served from the local file:","categories":[{"name":"Debugging","slug":"Debugging","permalink":"https://jiaopucun.com/categories/Debugging/"}],"tags":[{"name":"Charles","slug":"Charles","permalink":"https://jiaopucun.com/tags/Charles/"}]},{"title":"Ant Design Examples","slug":"ant-design-examples","date":"un55fin55","updated":"un00fin00","comments":true,"path":"2021/09/24/ant-design-examples/","link":"","permalink":"https://jiaopucun.com/2021/09/24/ant-design-examples/","excerpt":"","text":"Form - complex form controlsComplex form control123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172import &#123; Form, Input, Select, Tooltip, Button, Space, Typography &#125; from &#x27;antd&#x27;;const &#123; Option &#125; = Select;const Demo = () =&gt; &#123; const onFinish = values =&gt; &#123; console.log(&#x27;Received values of form: &#x27;, values); &#125;; return ( &lt;Form name=&quot;complex-form&quot; onFinish=&#123;onFinish&#125; labelCol=&#123;&#123; span: 8 &#125;&#125; wrapperCol=&#123;&#123; span: 16 &#125;&#125;&gt; &lt;Form.Item label=&quot;Username&quot;&gt; &lt;Space&gt; &lt;Form.Item name=&quot;username&quot; noStyle rules=&#123;[&#123; required: true, message: &#x27;Username is required&#x27; &#125;]&#125; &gt; &lt;Input style=&#123;&#123; width: 160 &#125;&#125; placeholder=&quot;Please input&quot; /&gt; &lt;/Form.Item&gt; &lt;Tooltip title=&quot;Useful information&quot;&gt; &lt;Typography.Link href=&quot;#API&quot;&gt;Need Help?&lt;/Typography.Link&gt; &lt;/Tooltip&gt; &lt;/Space&gt; &lt;/Form.Item&gt; &lt;Form.Item label=&quot;Address&quot;&gt; &lt;Input.Group compact&gt; &lt;Form.Item name=&#123;[&#x27;address&#x27;, &#x27;province&#x27;]&#125; noStyle rules=&#123;[&#123; required: true, message: &#x27;Province is required&#x27; &#125;]&#125; &gt; &lt;Select placeholder=&quot;Select province&quot;&gt; &lt;Option value=&quot;Zhejiang&quot;&gt;Zhejiang&lt;/Option&gt; &lt;Option value=&quot;Jiangsu&quot;&gt;Jiangsu&lt;/Option&gt; &lt;/Select&gt; &lt;/Form.Item&gt; &lt;Form.Item name=&#123;[&#x27;address&#x27;, &#x27;street&#x27;]&#125; noStyle rules=&#123;[&#123; required: true, message: &#x27;Street is required&#x27; &#125;]&#125; &gt; &lt;Input style=&#123;&#123; width: &#x27;50%&#x27; &#125;&#125; placeholder=&quot;Input street&quot; /&gt; &lt;/Form.Item&gt; &lt;/Input.Group&gt; &lt;/Form.Item&gt; &lt;Form.Item label=&quot;BirthDate&quot; style=&#123;&#123; marginBottom: 0 &#125;&#125;&gt; &lt;Form.Item name=&quot;year&quot; rules=&#123;[&#123; required: true &#125;]&#125; style=&#123;&#123; display: &#x27;inline-block&#x27;, width: &#x27;calc(50% - 8px)&#x27; &#125;&#125; &gt; &lt;Input placeholder=&quot;Input birth year&quot; /&gt; &lt;/Form.Item&gt; &lt;Form.Item name=&quot;month&quot; rules=&#123;[&#123; required: true &#125;]&#125; style=&#123;&#123; display: &#x27;inline-block&#x27;, width: &#x27;calc(50% - 8px)&#x27;, margin: &#x27;0 8px&#x27; &#125;&#125; &gt; &lt;Input placeholder=&quot;Input birth month&quot; /&gt; &lt;/Form.Item&gt; &lt;/Form.Item&gt; &lt;Form.Item label=&quot; &quot; colon=&#123;false&#125;&gt; &lt;Button type=&quot;primary&quot; htmlType=&quot;submit&quot;&gt; Submit &lt;/Button&gt; &lt;/Form.Item&gt; &lt;/Form&gt; );&#125;;ReactDOM.render(&lt;Demo /&gt;, mountNode); This demo shows how to use Form.Item with multiple controls. &lt;Form.Item name=&quot;field&quot; /&gt; will only bind the control(Input&#x2F;Select) which is the only children of it. Imagine this case: you added some text description after the Input, then you have to wrap the Input by an extra &lt;Form.Item name=&quot;field&quot;&gt;. style property of Form.Item could be useful to modify the nested form item layout, or use &lt;Form.Item noStyle /&gt; to turn it into a pure form-binded component. 1234567- &lt;Form.Item label=&quot;Field&quot; name=&quot;field&quot;&gt;- &lt;Input /&gt;- &lt;/Form.Item&gt;+ &lt;Form.Item label=&quot;Field&quot;&gt;+ &lt;Form.Item name=&quot;field&quot; noStyle&gt;&lt;Input /&gt;&lt;/Form.Item&gt; // that will bind input+ &lt;span&gt;description&lt;/span&gt;+ &lt;/Form.Item&gt; If you don’t follow the instruction, the following message will be printed on the console: 1[antd: Form.Item] `children` is array of render props cannot have `name`. InputNumber Component Basic - Positive integer only 1&lt;InputNumber min=&#123;1&#125; precision=&#123;0&#125; /&gt; min - Set the min value to 1 precision - Set precision to 0 to allow positive integers only. Post tab - percent with two decimals 1&lt;InputNumber addonAfter=&quot;%&quot; precision=&#123;2&#125; min=&#123;0.01&#125; /&gt; addonAfter - The label text displayed after the input control precision - Setting this prop to 2 means two numbers allowed after the dot. min - The minimum number is set to 0.01 Note: The addonAfter prop is only supported since antd 4.17.0. This issue has been discussed here. If you are using an older version, you would use it as follows: 1234567&lt;InputNumber precision=&#123;2&#125; min=&#123;0.01&#125; max=&#123;100&#125; formatter=&#123;value =&gt; `$&#123;value&#125;%`&#125; parser=&#123;value =&gt; value.replace(&#x27;%&#x27;, &#x27;&#x27;)&#125;/&gt;","categories":[],"tags":[]},{"title":"centering in CSS","slug":"centering-in-CSS","date":"un44fin44","updated":"un00fin00","comments":true,"path":"2021/04/08/centering-in-CSS/","link":"","permalink":"https://jiaopucun.com/2021/04/08/centering-in-CSS/","excerpt":"","text":"Vertical align With Transform: 1234567.element &#123; position: relative; top: 50%; -webkit-transform: translateY(-50%); -ms-transform: translateY(-50%); transform: translateY(-50%);&#125; Demo: See the Pen vertical align - transform by Kang Chen (@rainyjune) on CodePen. works on IE 9+ This method can cause elements to be blurry due to the element being placed on a “half pixel”. A solution for this is to either set its parent element to preserve-3d. Like following: 1234567891011.parent-element &#123; -webkit-transform-style: preserve-3d; -moz-transform-style: preserve-3d; transform-style: preserve-3d;&#125;.element &#123; position: relative; top: 50%; transform: translateY(-50%);&#125; Or, you can set the perspective of the element: 12345.element &#123; position: relative; top: 50%; transform: perspective(1px) translateY(-50%);&#125; Flexbox 12345.flex-container &#123; display: flex; align-items: center; align-content: center; /* this property only takes effect on multi-line flexible containers */&#125; inline-hight 12345.valign &#123; line-height: 200px; margin-top: 0; margin-bottom: 0;&#125; position: absolute &amp;&amp; margin: auto; 12345678910111213141516#container&#123; width: 1000px; height: 1000px; position: relative;&#125;#center&#123; width: 100px; height: 100px; position: absolute; top: 0; left: 0; right: 0; bottom: 0; margin: auto;&#125; See the Pen xxgPKJj by Kang Chen (@rainyjune) on CodePen. Horizontal align Flexbox 1234.flex-container &#123; display: flex; justify-content: center;&#125; text-align: center; 123.container &#123; text-align: center;&#125; Demo: See the Pen horizontal align - text-align center by Kang Chen (@rainyjune) on CodePen. 3.transform: translateX() 12345.halign &#123; position: relative; left: 50%; transform: translateX(-50%);&#125; Demo: See the Pen horizontal align - transform by Kang Chen (@rainyjune) on CodePen. margin: auto; 1234.halign &#123; margin-left: auto; margin-right: auto;&#125; Demo: See the Pen horizontal align - margin - auto by Kang Chen (@rainyjune) on CodePen. Links http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/","categories":[],"tags":[]},{"title":"Front End Interview - HTTP","slug":"front-end-interview-http","date":"un44fin44","updated":"un00fin00","comments":true,"path":"2021/02/18/front-end-interview-http/","link":"","permalink":"https://jiaopucun.com/2021/02/18/front-end-interview-http/","excerpt":"","text":"HTTP Code 409 This is an Nginx specific error code. It means “Client Closed Request”. Used when the client has closed the request before the server could send a response. So it’s a client side error. Possible reasons: The server takes too long to process the request, and the client side cancels it due to time out. The previous request issued by the client was immediately cancelled by the client. Solution Extend the client (could be browsers or load balancers) timeout to a bigger value. Set proxy_ignore_client_abort on on Nginx The difference between HTTP 301 and 302? How does HTTPS work? HTTPS uses an encryption protocol to encrypt communications. The protocol is called Transport Layer Security (TLS), although formerly it was known as Secure Sockets Layer (SSL). This protocol secures communications by using what’s known as an asymmetric public key infrastructure. This type of security system uses two different keys to encrypt communications between two parties: The private key - this key is controlled by the owner of a website and it’s kept, as the reader may have speculated, private. This key lives on a web server and is used to decrypt information encrypted by the public key. The public key - this key is available to everyone who wants to interact with the server in a way that’s secure. Information that’s encrypted by the public key can only be decrypted by the private key. When a user connects to a webpage, the webpage will send over its SSL certificate which contains the public key necessary to start the secure session. The two computers, the client and the server, then go through a process called an SSL&#x2F;TLS handshake, which is a series of back-and-forth communications used to establish a secure connection. TLS handshakes are a foundational part of how HTTPS works. TLS handshakes occur after a TCP connection has been opened via a TCP handshake. The exact steps within a TLS handshake will vary depending upon the kind of key exchange algorithm used and the cipher suites supported by both sides. The RSA key exchange algorithm is used most often. It goes as follows: The ‘client hello’ message: The client initiates the handshake by sending a “hello” message to the server. The message will include which TLS version the client supports, the cipher suites supported, and a string of random bytes known as the “client random.” The ‘server hello’ message: In reply to the client hello message, the server sends a message containing the server’s SSL certificate, the server’s chosen cipher suite, and the “server random,” another random string of bytes that’s generated by the server. Authentication: The client verifies the server’s SSL certificate with the certificate authority that issued it. This confirms that the server is who it says it is, and that the client is interacting with the actual owner of the domain. The premaster secret: The client sends one more random string of bytes, the “premaster secret.” The premaster secret is encrypted with the public key and can only be decrypted with the private key by the server. (The client gets the public key from the server’s SSL certificate.) Private key used: The server decrypts the premaster secret. Session keys created: Both client and server generate session keys from the client random, the server random, and the premaster secret. They should arrive at the same results. Client is ready: The client sends a “finished” message that is encrypted with a session key. Server is ready: The server sends a “finished” message encrypted with a session key. Secure symmetric encryption achieved: The handshake is completed, and communication continues using the session keys. All TLS handshakes make use of asymmetric encryption (the public and private key). the difference between asymmetric and symmetric encryption asymmetric encryption is different on each side; the sender and the recipient use two different keys. Asymmetric encryption, also known as public key encryption, uses a public key-private key pairing: data encrypted with the private key can only be decrypted with the public key, and vice versa. In symmetric encryption, the same key both encrypts and decrypts data. For symmetric encryption to work, the two or more communicating parties must know what the key is; for it to remain secure, no third party should be able to guess or steal the key.","categories":[],"tags":[]},{"title":"scrolling text","slug":"scrolling-text","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2021/01/27/scrolling-text/","link":"","permalink":"https://jiaopucun.com/2021/01/27/scrolling-text/","excerpt":"","text":"Approach 1. HTML &lt;marquee&gt; tagEvent though it is deprecated, HTML &lt;marquee&gt; tag is still the easiest way to add scrolling text in your page, and it is supported by most browsers. 123456789&lt;marquee&gt;This text will scroll from right to left&lt;/marquee&gt;&lt;marquee direction=&quot;up&quot;&gt;This text will scroll from bottom to top&lt;/marquee&gt;&lt;marquee direction=&quot;down&quot; width=&quot;250&quot; height=&quot;200&quot; behavior=&quot;alternate&quot; style=&quot;border:solid&quot;&gt; &lt;marquee behavior=&quot;alternate&quot;&gt; This text will bounce &lt;/marquee&gt;&lt;/marquee&gt; Demo: Pros: the best browser compatibility Cons: This tag has already been deprecated. Approach 2. CSS animationAn alternative way is using CSS animation. We are able to implement a simple marquee effect without any JavaScript codes, the following demo works on modern browsers. The most important part is @keyframes rules: 12345678@keyframes scrollingtext &#123; from &#123; transform: translateX(100%); &#125; to &#123; transform: translateX(-100%); &#125;&#125; Demo: See the Pen MWjNLjX by Kang Chen (@rainyjune) on CodePen. Pros: standard-compatible Cons: Works on mordern browsers only The text does not appear immediately after disappeared. Refs &lt;marquee&gt;: The Marquee element CSS Marquees","categories":[],"tags":[]},{"title":"resizable div","slug":"resizable-div","date":"un22fin22","updated":"un00fin00","comments":true,"path":"2021/01/26/resizable-div/","link":"","permalink":"https://jiaopucun.com/2021/01/26/resizable-div/","excerpt":"","text":"Approach 1. resize CSS propertyThe resize CSS property sets whether an element is resizable, and if so, in which directions. resize does not apply to the following: Inline elements Block elements for which the overflow property is set to visible The problem with the CSS3-only method is that only the bottom-right hand corner of the div becomes draggable. Also note that IE does not support this property. Approach 2. Drag and Drop APIBeside approach 1, we can also drag a sibling div and resize the div we are interested in. Set the draggable=&quot;true&quot; on the div that you wish to make draggable Add a listener for the dragstart event Resize the div in the drag event handler Note: This demo works bad on IE. Approach 3. Mouse EventsThis is the best compatible approach. Approach N. third-party libraries interact.js Refs CSS resize property Drag Operations - MDN","categories":[],"tags":[]},{"title":"Computer science in JavaScript: Linked list","slug":"computer-science-in-javascript-linked-list","date":"un11fin11","updated":"un00fin00","comments":true,"path":"2020/12/07/computer-science-in-javascript-linked-list/","link":"","permalink":"https://jiaopucun.com/2020/12/07/computer-science-in-javascript-linked-list/","excerpt":"","text":"What is a linked list?A linked list is a data structure that stores multiple values in a linear fashion. Each value in a linked list is contained in its own node, an object that contains the data along with a link to the next node in the list. The link is a pointer to another node object or null if there is no next node. If each node has just one pointer to another node (most frequently called next) then the list is considered a singly linked list (or just linked list) whereas if each node has two links (usually previous and next) then it is considered a doubly linked list. In this post, I am focusing on singly linked lists. Why use a linked list?The primary benefit of linked lists is that they can contain an arbitrary number of values while using only the amount of memory necessary for those values. Though originally intended for better memory management, linked lists also became popular when developers didn’t know how many items an array would ultimately contain. It was much easier to use a linked list and add values as necessary than it was to accurately guess the maximum number of values an array might contain. As such, linked lists are often used as the foundation for built-in data structures in various programming languages. The built-in JavaScript Array type is not implemented as a linked list, though its size is dynamic and is always the best option to start with. You might go your entire career without needing to use a linked list in JavaScript but linked lists are still a good way to learn about creating your own data structures. The design of a linked listThe most important part of a linked list is its node structure. Each node must contain some data and a pointer to the next node in the list. Here is a simple representation in JavaScript: 1234567891011121314151617181920class LinkedListNode &#123; constructor(data) &#123; this.data = data; this.next = null; &#125;&#125;const node12 = new LinkedListNode(12);const node99 = new LinkedListNode(99);const node37 = new LinkedListNode(37);node12.next = node99;node12.next.next = node37;console.assert(node12.data === 12, &#x27;node12 has the value of 12&#x27;);console.assert(node99.data === 99, &#x27;node99 has the value of 99&#x27;);console.assert(node37.data === 37, &#x27;node37 has the value of 37&#x27;);console.assert(node12.next.data === 99, &#x27;The next node of node12 has the value of 99&#x27;);console.assert(node99.next.data === 37, &#x27;The next node of node99 has the value of 37&#x27;); The following image shows the resulting data structure. The structure of a linked list allows you to traverse all of the data by following the next pointer on each node. Here is a simple example of how to traverse a linked list and print each value out to the console: 123456let current = node12;while (current) &#123; console.log(&#x27;current:&#x27;, current.data); current = current.next;&#125; The LinkedList classIt’s more customary to create a class to encapsulate this functionality. 1234567const head = Symbol(&quot;head&quot;);class LinkedList &#123; constructor() &#123; this[head] = null; &#125;&#125; Adding new data to the list1234567891011121314151617181920212223242526272829303132const head = Symbol(&#x27;head&#x27;);class LinkedList &#123; constructor() &#123; // A symbol makes it clear that this property is not intended // to be modified outside the class this[head] = null; &#125; add(data) &#123; const newNode = new LinkedListNode(data); if (this[head]) &#123; // Find the property node to set its next property to. let current = this[head]; while (current.next !== null) &#123; current = current.next; &#125; // assign the node into the `next` pointer current.next = newNode; &#125; else &#123; // no items in the list yet // just set the head to the new node this[head] = newNode; &#125; &#125;&#125;const list1 = new LinkedList();console.assert(list1[head] === null, &#x27;The head node is empty for an empty list&#x27;);list1.add(5);console.assert(list1[head].data === 5, &#x27;The head node has the value of 5&#x27;);list1.add(6);console.assert(list1[head].next.data === 6, &#x27;The next node has the value of 6&#x27;); Retrieving data from the list1234567891011121314151617class LinkedList &#123; // other methods hidden for clarity get(index) &#123; // Returns undefind if `index` is a negative value if (index &lt; 0) return undefined; let i = 0; let current = this[head]; // traverse the list until reach either the end or the index while (current !== null &amp;&amp; i &lt; index) &#123; i++; current = current.next; &#125; return current !== null ? current.data : undefined; &#125;&#125; Removing data from a linked listRemoving data from a linked list is a little bit tricky because you need to ensure that all next pointers remain valid after a node is removed. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051class LinkedList &#123; // other methods hidden for clarity remove(index) &#123; // special cases: empty list or invalid `index` if ((this[head] === null) || (index &lt; 0)) &#123; throw new RangeError(`Index $&#123;index&#125; does not exist in the list.`); &#125; // special case: removing the first node if (index === 0) &#123; // temporary store the data from the node const data = this[head].data; // just replace the head with the next node in the list this[head] = this[head].next; // return the data at the previous head of the list return data; &#125; // pointer use to traverse the list let current = this[head]; // keeps track of the node before current in the loop let previous = null; // used to track how deep into the list you are let i = 0; // same loops as in `get()` while ((current !== null) &amp;&amp; (i &lt; index)) &#123; // save the value of current previous = current; // traverse to the next node current = current.next; // increment the count i++; &#125; // if node was found, remove it if (current !== null) &#123; // skip over the node to remove previous.next = current.next; // return the value that was just removed from the list return current.data; &#125; // if node wasn&#x27;t found, throw an error throw new RangeError(`Index $&#123;index&#125; does not exist in the list.`); &#125;&#125; Making the list iterableIn order to be used with the JavaScript for-of loop and array destructuring, collections of data must be iterables. The built-in JavaScript collections such as Array and Set are iterable by default, and you can make your own classes iterable by specifying a Symbol.iterator generator method on the class. I prefer to first implement a values() generator method (to match the method found on built-in collection classes) and then have Symbol.iterator call values() directly. The values() method need only do a basic traversal of the list and yield the data that each node contains: 12345678910111213141516171819class LinkedList &#123; // other methods hidden for clarity *values()&#123; let current = this[head]; while (current !== null) &#123; yield current.data; current = current.next; &#125; &#125; [Symbol.iterator]() &#123; return this.values(); &#125;&#125; The values() method is marked with an asterisk (*) to indicate that it’s a generator method. The method traverses the list, using yield to return each piece of data it encounters. (Note that the Symbol.iterator method isn’t marked as a generator because it is returning an iterator from the values() generator method.) Using the classOnce complete, you can use the linked list implementation like this: 12345678910111213141516171819202122const list = new LinkedList();list.add(&quot;red&quot;);list.add(&quot;orange&quot;);list.add(&quot;yellow&quot;);// get the second item in the listconsole.log(list.get(1)); // &quot;orange&quot;// print out all itemsfor (const color of list) &#123; console.log(color);&#125;// remove the second item in the listconsole.log(list.remove(1)); // &quot;orange&quot;// get the new first item in the listconsole.log(list.get(1)); // &quot;yellow&quot;// convert to an arrayconst array1 = [...list.values()];const array2 = [...list]; This basic implementation of a linked list can be rounded out with a size property to count the number of nodes in the list, and other familiar methods such as indexOf(). The full source code is available on GitHub at my Computer Science in JavaScript project. Source: https://humanwhocodes.com/blog/2019/01/computer-science-in-javascript-linked-list/","categories":[],"tags":[]},{"title":"Why do we need Promise in JavaScript","slug":"why-do-we-need-promises-in-javascript","date":"un22fin22","updated":"un00fin00","comments":true,"path":"2020/12/01/why-do-we-need-promises-in-javascript/","link":"","permalink":"https://jiaopucun.com/2020/12/01/why-do-we-need-promises-in-javascript/","excerpt":"","text":"1.Cleaner code and avoid callback hellUsing callbacks: 123456789101112131415161718192021222324252627282930313233343536function get(url, callback) &#123; var request = new XMLHttpRequest(); request.open(&#x27;GET&#x27;, url); request.onload = function() &#123; if (request.readyState === 4) &#123; if (request.status === 200) &#123; callback(null, request.responseText); &#125; else &#123; callback(request.statusText, null); &#125; &#125; &#125;; request.onerror = function(e) &#123; callback(e.type, null) &#125;; request.send();&#125;get(&#x27;./file1.txt&#x27;, function(error, text) &#123; if (error) &#123; //alert(&#x27;Error: &#x27; + error); &#125; else &#123; get(&#x27;./file2.txt&#x27;, function(err, text2) &#123; if (err) &#123; //alert(&#x27;Error2: &#x27; + err); &#125; else &#123; showContents(text, text2); &#125; &#125;); &#125;&#125;);function showContents(text1, text2) &#123; console.log(&#x27;text1:&#x27;, text1); console.log(&#x27;text2:&#x27;, text2);&#125; Using promises: 1234567891011121314151617181920212223242526// Wrap the request in a promisefunction get(url) &#123; return new Promise((resolve, reject) =&gt; &#123; var request = new XMLHttpRequest(); request.open(&#x27;GET&#x27;, url); request.onload = function() &#123; if (request.readyState === 4) &#123; if (request.status === 200) &#123; resolve(request.responseText); &#125; else &#123; reject(request.statusText); &#125; &#125; &#125;; request.onerror = function(e) &#123; reject(e.type, null) &#125;; request.send(); &#125;);&#125;let text1 = &#x27;&#x27;;get(&#x27;./file1.txt&#x27;) .then(text =&gt; text1 = text) // Save the first file content to a variable .then(() =&gt; get(&#x27;./file2.txt&#x27;)) // A new promise object is expected, so we return it .then(text=&gt; showContents(text1, text)) // The second file content as the fulfillment value 2.Backbones of some new featuresMany APIs are promise-based: Fetch API MediaDevices API RTCPeerConnection Async functions Element API: requestFullscreen Document API: exitFullscreen HTMLMediaElement API: play OfflineAudioContext API: startRendering BaseAudioContext API: decodeAudioData 3.Automatic error handlingUsing callbacks: 1234567891011121314151617get(&#x27;./file1.txt&#x27;, function(error, text) &#123; if (error) &#123; handleFileError(error); // first &#125; else &#123; get(&#x27;./file2.txt&#x27;, function(err, text2) &#123; if (err) &#123; handleFileError(err); // second &#125; else &#123; showContents(text, text2); &#125; &#125;); &#125;&#125;);function handleFileError(err) &#123; alert(&#x27;File Error: &#x27; + err);&#125; Using promises, errors will be passed down the chain, so we can handle it in one common place without having to write it twice. 123456let text1 = &#x27;&#x27;;get(&#x27;./file1.txt&#x27;) .then(text =&gt; text1 = text) .then(() =&gt; get(&#x27;./file2.txt&#x27;)) .then(text=&gt; showContents(text1, text)) .catch(handleFileError) // Write only once","categories":[],"tags":[]},{"title":"currying","slug":"currying","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2020/11/25/currying/","link":"","permalink":"https://jiaopucun.com/2020/11/25/currying/","excerpt":"","text":"Currying is a transformation of functions that translates a function from callable as f(a, b, c) into callable as f(a)(b)(c). Currying doesn’t call a function. It just transforms it. We’ll create a helper function curry(f) that performs currying for a two-argument f. In other words, curry(f) for two-argument f(a, b) translates it into a function that runs as f(a)(b): 12345678910111213141516function curry(f) &#123; // curry(f) does the currying transform return function(a) &#123; return function(b) &#123; return f(a, b); &#125;; &#125;;&#125;// usagefunction sum(a, b) &#123; return a + b;&#125;let curriedSum = curry(sum);alert( curriedSum(1)(2) ); // 3 Advanced curry implementationIn case you’d like to get in to the details, here’s the “advanced” curry implementation for multi-argument functions that we could use above. It’s pretty short: 12345678910111213function curry(func) &#123; return function curried(...args) &#123; if (args.length &gt;= func.length) &#123; return func.apply(this, args); &#125; else &#123; return function(...args2) &#123; return curried.apply(this, args.concat(args2)); &#125; &#125; &#125;;&#125; Usage examples: 123456789function sum(a, b, c) &#123; return a + b + c;&#125;let curriedSum = curry(sum);alert( curriedSum(1, 2, 3) ); // 6, still callable normallyalert( curriedSum(1)(2,3) ); // 6, currying of 1st argalert( curriedSum(1)(2)(3) ); // 6, full currying Source: https://javascript.info/currying-partials","categories":[],"tags":[]},{"title":"The Power of Higher Order Functions in JavaScript","slug":"the-power-of-higher-order-functions-in-javascript","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2020/11/25/the-power-of-higher-order-functions-in-javascript/","link":"","permalink":"https://jiaopucun.com/2020/11/25/the-power-of-higher-order-functions-in-javascript/","excerpt":"","text":"A higher order function is a function that either takes another function as an argument or returns a function as the return value. Higher order functions are widely used in JavaScript and they exist in commonly used functions like .map, .filter, .reduce and .forEach. You see these when you declare function callbacks as arguments to these array methods: 123456789101112131415161718192021222324const arr = [1, 2, 3, 4, 5, &#x27;six&#x27;, &#x27;seven&#x27;, &#x27;eight&#x27;, &#x27;nine&#x27;, &#x27;ten&#x27;]// Duplicate the arrayarr.map(function(value) &#123; return value&#125;)// Return only the number typesarr.filter(function(value) &#123; return typeof value === &#x27;number&#x27;&#125;)// Log each value to the consolearr.forEach(function(value) &#123; console.log(value)&#125;)// Add the numbers together, avoiding the string typesarr.reduce(function(acc, value) &#123; if (typeof value === &#x27;number&#x27;) &#123; acc += value &#125; return acc&#125;, 0) But the higher order function isn’t the function you pass in to methods like .map. Methods like .map is the higher order function. At first, it may seem like a useless way to write code in JavaScript. Why pass in a function and bother returning another function, when you can just avoid all of that and do everything in one function all at once? The biggest benefit that higher order functions bring to the table are reusability and simplicity. But they also benefit from writing beautiful code. Code Composition and Powerful ExamplesNow that we know what higher order functions look like in code, you might be wondering what were some use cases and where do they begin to shine. Let’s say we have a list of frogs: 123456789101112131415161718192021222324252627282930313233343536373839404142434445const frogsList = [ // Yes, these frogs are intelligent. They know how to use email &#123; name: &#x27;bobTheFrog&#x27;, email: &#x27;froggy@gmail.com&#x27;, age: 2, gender: &#x27;Male&#x27;, widthOfTongue: 3, &#125;, &#123; name: &#x27;hippoTheFrog&#x27;, email: &#x27;hippo@gmail.com&#x27;, age: 10, gender: &#x27;Male&#x27;, widthOfTongue: 11, &#125;, &#123; name: &#x27;sally&#x27;, email: &#x27;sallyLipstick@gmail.com&#x27;, age: 5, gender: &#x27;Female&#x27;, widthOfTongue: 4, &#125;, &#123; name: &#x27;george&#x27;, email: &#x27;georgeRoseBowl@gmail.com&#x27;, age: 11, gender: &#x27;Male&#x27;, widthOfTongue: 3, &#125;, &#123; name: &#x27;lisa&#x27;, email: &#x27;lisaLovesGeorgeForever@gmail.com&#x27;, age: 19, gender: &#x27;Female&#x27;, widthOfTongue: 15, &#125;, &#123; name: &#x27;kentucky&#x27;, email: &#x27;frogInKentucky@yahoo.com&#x27;, age: 18, gender: &#x27;Male&#x27;, widthOfTongue: 13, &#125;,] To filter the frogs to a specific gender type without a higher order function, we would have to do something like this: 12345678function filterGender(gender, frogs) &#123; return frogs.filter(function(frog) &#123; return frog.gender === gender &#125;)&#125;// filterGender in useconst maleFrogs = filterGender(&#x27;Male&#x27;, frogsList) This is perfectly fine. However, it can be cumbersome if used multiple times in an application. If we had a gigantic app about frogs, filterGender might be used more than once. Taking it a Second Step FurtherIf you were to fetch a different list of frogs you’d have to call filterGender again and re-declare your gender as the first argument to filter the new list: 123456function getFrogs() &#123; // some logic and returns a new list of frogs&#125;const newFrogs = getFrogs()const moreMaleFrogs = filterGender(&#x27;Male&#x27;, newFrogs) // Shucks, I have to write &#x27;Male&#x27; again? To solve this issue, we can use the concept of higher order functions. 1234567function filterGender(gender) &#123; return function(frogs) &#123; return frogs.filter(function(frog) &#123; return frog.gender === gender &#125;) &#125;&#125; And now, just like that, we can just assign this gender filterer to a variable and we would never have to declare the same gender when filtering frogs anymore! 12const filterFemaleFrogs = filterGender(&#x27;Female&#x27;)const femaleFrogs = filterFemaleFrogs(frogsList) Taking it a Third Step FurtherIf you still aren’t convinced enough of how powerful higher order functions are in the JavaScript language, then lets continue the example to make an even more generic function to create a higher level of reusability: 12345function filterFrogs(filter) &#123; return function(frogs) &#123; return frogs.filter(filter) &#125;&#125; Previously we had the ability to make a reusable function for a frog’s gender. However, we can go further by abstracting away the logic of the filter function, so that now we can compose and re-use different filter functions! 123456789101112131415const filterMaleFrogs = filterFrogs(function(frog) &#123; return frog.gender === &#x27;Male&#x27;&#125;)const filterAdultFrogs = filterFrogs(function(frog) &#123; return frog.age &gt;= 10&#125;)const filterFrogNamesThatStartWithHippo = filterFrogs(function(frog) &#123; return frog.name.toLowerCase().startsWith(&#x27;hippo&#x27;)&#125;)const filterGmailEmails = filterFrogs(function(frog) &#123; return /gmail.com/i.test(frog.email)&#125;) Wow! Previously we had the amazing ability to re-use a gender filterer function without ever having to declare the same gender type ever again, but now we have the additional abilities of creating and re-using functions of how we want the frogs to be filtered! Amazing! We can even use them all at once: 123456789101112131415161718192021222324252627282930313233343536function applyAllFilters(...filters) &#123; return function(frogs) &#123; let newFrogs = [...frogs] for (let index = 0; index &lt; filters.length; index++) &#123; const filter = filters[index] newFrogs = filter(newFrogs) &#125; return newFrogs &#125;&#125;const applyFrogFilterers = applyAllFilters( filterMaleFrogs, filterAdultFrogs, filterFrogNamesThatStartWithHippo, filterGmailEmails,)const combinedFrogsList = [...frogsList, ...frogsList2, ...frogsList3]const filteredFrogs = applyFrogFilterers(combinedFrogsList)console.log(filteredFrogs)/* result: &#123; age: 10, email: &quot;hippo@gmail.com&quot;, gender: &quot;Male&quot;, name: &quot;hippoTheFrog&quot;, widthOfTongue: 11 &#125;*/ Taking it Further One Last TimeOur applyAllFilters function does the job quite well. However, for huge lists of frogs it might become a heavy task because it runs filter multiple times to get the final result. We can again use the concept of higher order functions to make a simple, reusable higher order function that is able to make one pass through the entire list of frogs by applying the filters at the same time. To be more clear, have a look at the for loop code and try to see what’s truly happening behind the scenes: 123456789101112function applyAllFilters(...filters) &#123; return function(frogs) &#123; let newFrogs = [...frogs] for (let index = 0; index &lt; filters.length; index++) &#123; const filter = filters[index] newFrogs = filter(newFrogs) &#125; return newFrogs &#125;&#125; The line I want you to look at is this: 1newFrogs = filter(newFrogs) That line of code is the same line of code as return frogs.filter(filter) in this function: 12345function filterFrogs(filter) &#123; return function(frogs) &#123; return frogs.filter(filter) &#125;&#125; This is a problem, because the filter method creates a new array. When we had written this: 123456const applyFrogFilterers = applyAllFilters( filterMaleFrogs, filterAdultFrogs, filterFrogNamesThatStartWithHippo, filterGmailEmails,) We’re calling the filter method 4 different times. In other words, we’re making JavaScript create four different arrays in memory just to get the final result. So how can we make JavaScript create just one array to get the same result in the end? You guessed it. Using higher order functions! 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364// NOTE: The filter functions are now individual functions (not wrapped with filterFrogs)const filterMaleFrogs = function(frog) &#123; return frog.gender === &#x27;Male&#x27;&#125;const filterAdultFrogs = function(frog) &#123; return frog.age &gt;= 10&#125;const filterFrogNamesThatStartWithHippo = function(frog) &#123; return frog.name.toLowerCase().startsWith(&#x27;hippo&#x27;)&#125;const filterGmailEmails = function(frog) &#123; return /gmail.com/i.test(frog.email)&#125;// Credits to: SerjoAfunction combineFilters(...fns) &#123; return function(val) &#123; for (let i = 0; i &lt; fns.length; i++) &#123; const filter = fns[i] const passes = filter(val) if (passes) &#123; continue &#125; else &#123; return false &#125; &#125; return true &#125;&#125;function composeFrogFilterers(...fns) &#123; return function(frogs) &#123; // Credits to: SerjoA return frogs.filter(combineFilters(...fns)) &#125;&#125;const applyFrogFilterers = composeFrogFilterers( filterMaleFrogs, filterAdultFrogs, filterFrogNamesThatStartWithHippo, filterGmailEmails,)const combinedFrogsList = [...frogsList, ...frogsList2, ...frogsList3]const allFilteredFrogs = applyFrogFilterers(combinedFrogsList)console.log(allFilteredFrogs)/* result: &#123; age: 10, email: &quot;hippo@gmail.com&quot;, gender: &quot;Male&quot;, name: &quot;hippoTheFrog&quot;, widthOfTongue: 11 &#125;*/ ConclusionI hope you are convinced of how powerful higher order functions are and that by reading this article you gained some more insight on the use cases of this concept! Look out more for more in the future! Source:https://jsmanifest.com/the-power-of-higher-order-functions-in-javascript/","categories":[],"tags":[]},{"title":"How to fix ReferenceError: primordials is not defined in node","slug":"fix-referenceerror-primordials-is-not-defined","date":"un55fin55","updated":"un00fin00","comments":true,"path":"2020/11/20/fix-referenceerror-primordials-is-not-defined/","link":"","permalink":"https://jiaopucun.com/2020/11/20/fix-referenceerror-primordials-is-not-defined/","excerpt":"","text":"Just follow these steps. I’m on windows 10 and it worked perfectly for me! In the same directory where you have package.json create a npm-shrinkwrap.json file with the following contents: 1234567&#123; &quot;dependencies&quot;: &#123; &quot;graceful-fs&quot;: &#123; &quot;version&quot;: &quot;4.2.2&quot; &#125; &#125;&#125; Run npm install, and don’t worry, it’ll update npm-shrinkwrap.json with a bunch of content. Run gulp to start the project. Source: https://stackoverflow.com/a/60921145","categories":[],"tags":[]},{"title":"stuff i wish i had known earlier about service workers","slug":"stuff-i-wish-i-had-known-earlier-about-service-workers","date":"un44fin44","updated":"un00fin00","comments":true,"path":"2020/11/19/stuff-i-wish-i-had-known-earlier-about-service-workers/","link":"","permalink":"https://jiaopucun.com/2020/11/19/stuff-i-wish-i-had-known-earlier-about-service-workers/","excerpt":"","text":"Reloading the page doesn’t bahave as you expectedSimply refreshing the page is not sufficient to transfer contro to a new service worker, because the new page will be requested before the current page is unloaded, and there won’t be a time when the old service worker is not in use. You can access cache API in the browserYou can also use Cache API in your main javascript files, not just in the service worker.","categories":[],"tags":[]},{"title":"Introduction to Service Worker","slug":"introduction-to-service-worker","date":"un11fin11","updated":"un00fin00","comments":true,"path":"2020/11/16/introduction-to-service-worker/","link":"","permalink":"https://jiaopucun.com/2020/11/16/introduction-to-service-worker/","excerpt":"","text":"Check if service worker is supportedmain.js 12345if (&#x27;serviceWorker&#x27; in navigator) &#123; // supported!&#125; else &#123; // Service workers are not supported.&#125; Register a service workermain.js 1234567navigator.serviceWorker.register(&#x27;sw.js&#x27;).then(registration =&gt; &#123; console.log(`Registration successful, scope is $&#123;registration.scope&#125;`);&#125;).catch(error =&gt; &#123; console.log(`Service worker registration failed, error: $&#123;error&#125;`);&#125;) Check if a service worker exists in a given URLIf you want to do this in code, you can only do it within the same origin as the worker(s) you want to check for. Within the same origin, you can use getRegistration(url) (which gives you a promise that will resolve to undefined or a ServiceWorkerRegistration object for the URL), or getRegistrations() (which gives you a promise for an array of ServiceWorkerRegistration objects). E.g.: main.js 123navigator.serviceWorker.getRegistrations().then(registrations =&gt; &#123; console.log(registrations);&#125;); How to use navigator.serviceWorker.ready property?I want the service worker to control higher pages Change the scope option when registering the service worker main.js 123navigator.serviceWorker.register(&#x27;/app/service-worker.js&#x27;, &#123; scope: &#x27;/app&#x27;&#125;); Set the Service-Worker-Allowed HTTP header in your server config for the request serving the service worker script. nginx config 1234location ~* (service-worker\\.js)$ &#123; # tells browsers the service worker scope add_header &#x27;Service-Worker-Allowed&#x27; &#x27;/app&#x27;;&#125; Apache config 1234LoadModule rewrite_module modules/mod_rewrite.so&lt;Files &quot;service-worker.js&quot;&gt; Header set Service-Worker-Allowed &quot;/&quot;&lt;/Files&gt; Listen for install event in service workerservice-worker.js 1234// Listen for install event, set callbackself.addEventListener(&#x27;install&#x27;, function(event) &#123; // Perform some task&#125;); Listen for activate event in service workerservice-worker.js 123self.addEventListener(&#x27;activate&#x27;, function(event) &#123; // Perform some task&#125;);","categories":[],"tags":[]},{"title":"Service Workers: an Introduction","slug":"service-worker-an-introduction","date":"un66fin66","updated":"un00fin00","comments":true,"path":"2020/11/14/service-worker-an-introduction/","link":"","permalink":"https://jiaopucun.com/2020/11/14/service-worker-an-introduction/","excerpt":"","text":"Rich offline experiences, periodic background syncs, push notifications—functionality that would normally require a native application—are coming to the web. Service workers provide the technical foundation that all these features rely on. What is a service workerA service worker is a script that your browser runs in the background, separate from a web page, opening the door to features that don’t need a web page or user interaction. Today, they already include features like push notifications and background sync. In the future, service workers might support other things like periodic sync or geofencing. The core feature discussed in this tutorial is the ability to intercept and handle network requests, including programmatically managing a cache of responses. The reason this is such an exciting API is that it allows you to support offline experiences, giving developers complete control over the experience. Before service worker, there was one other API that gave users an offline experience on the web called AppCache. There are a number of issues with the AppCache API that service workers were designed to avoid. Things to note about a service worker: It’s a JavaScript Worker, so it can’t access the DOM directly. Instead, a service worker can communicate with the pages it controls by responding to messages sent via the postMessage interface, and those pages can manipulate the DOM if needed. Service worker is a programmable network proxy, allowing you to control how network requests from your page are handled. It’s terminated when not in use, and restarted when it’s next needed, so you cannot rely on global state within a service worker’s onfetch and onmessage handlers. If there is information that you need to persist and reuse across restarts, service workers do have access to the IndexedDB API. Service workers make extensive use of promises, so if you’re new to promises, then you should stop reading this and check out Promises, an introduction. The service worker life cycleA service worker has a lifecycle that is completely separate from your web page. To install a service worker for your site, you need to register it, which you do in your page’s JavaScript. Registering a service worker will cause the browser to start the service worker install step in the background. Typically during the install step, you’ll want to cache some static assets. If all the files are cached successfully, then the service worker becomes installed. If any of the files fail to download and cache, then the install step will fail and the service worker won’t activate (i.e. won’t be installed). If that happens, don’t worry, it’ll try again next time. But that means if it does install, you know you’ve got those static assets in the cache. When installed, the activation step will follow and this is a great opportunity for handling any management of old caches, which we’ll cover during the service worker update section. After the activation step, the service worker will control all pages that fall under its scope, though the page that registered the service worker for the first time won’t be controlled until it’s loaded again. Once a service worker is in control, it will be in one of two states: either the service worker will be terminated to save memory, or it will handle fetch and message events that occur when a network request or message is made from your page. Below is an overly simplified version of the service worker lifecycle on its first installation. PrerequisitesBrowser supportBrowser options are growing. Service workers are supported by Chrome, Firefox and Opera. Microsoft Edge is now showing public support. Even Safari has dropped hints of future development. You can follow the progress of all the browsers at Jake Archibald’s is Serviceworker ready site. You need HTTPSDuring development you’ll be able to use service worker through localhost, but to deploy it on a site you’ll need to have HTTPS setup on your server. Using service worker you can hijack connections, fabricate, and filter responses. Powerful stuff. While you would use these powers for good, a man-in-the-middle might not. To avoid this, you can only register service workers on pages served over HTTPS, so we know the service worker the browser receives hasn’t been tampered with during its journey through the network. GitHub Pages are served over HTTPS, so they’re a great place to host demos. If you want to add HTTPS to your server then you’ll need to get a TLS certificate and set it up for your server. This varies depending on your setup, so check your server’s documentation and be sure to check out Mozilla’s SSL config generator for best practices. Register a service workerTo install a service worker you need to kick start the process by registering it in your page. This tells the browser where your service worker JavaScript file lives. 1234567891011if (&#x27;serviceWorker&#x27; in navigator) &#123; window.addEventListener(&#x27;load&#x27;, function() &#123; navigator.serviceWorker.register(&#x27;/sw.js&#x27;).then(function(registration) &#123; // Registration was successful console.log(&#x27;ServiceWorker registration successful with scope: &#x27;, registration.scope); &#125;, function(err) &#123; // registration failed :( console.log(&#x27;ServiceWorker registration failed: &#x27;, err); &#125;); &#125;);&#125; This code checks to see if the service worker API is available, and if it is, the service worker at &#x2F;sw.js is registered once the page is loaded. You can call register() every time a page loads without concern; the browser will figure out if the service worker is already registered or not and handle it accordingly. One subtlety with the register() method is the location of the service worker file. You’ll notice in this case that the service worker file is at the root of the domain. This means that the service worker’s scope will be the entire origin. In other words, this service worker will receive fetch events for everything on this domain. If we register the service worker file at /example/sw.js, then the service worker would only see fetch events for pages whose URL starts with /example/ (i.e. /example/page1/, /example/page2/). Now you can check that a service worker is enabled by going to chrome://inspect/#service-workers and looking for your site. When service worker was first being implemented, you could also view your service worker details through chrome://serviceworker-internals. This may still be useful, if for nothing more than learning about the life cycle of service workers, but don’t be surprised if it gets replaced completely by chrome://inspect/#service-workers at a later date. You may find it useful to test your service worker in an Incognito window so that you can close and reopen knowing that the previous service worker won’t affect the new window. Any registrations and caches created from within an Incognito window will be cleared out once that window is closed. Install a service workerAfter a controlled page kicks off the registration process, let’s shift to the point of view of the service worker script, which handles the install event. For the most basic example, you need to define a callback for the install event and decide which files you want to cache. 123self.addEventListener(&#x27;install&#x27;, function(event) &#123; // Perform install steps&#125;); Inside of our install callback, we need to take the following steps: Open a cache. Cache our files. Confirm whether all the required assets are cached or not. 1234567891011121314151617var CACHE_NAME = &#x27;my-site-cache-v1&#x27;;var urlsToCache = [ &#x27;/&#x27;, &#x27;/styles/main.css&#x27;, &#x27;/script/main.js&#x27;];self.addEventListener(&#x27;install&#x27;, function(event) &#123; // Perform install steps event.waitUntil( caches.open(CACHE_NAME) .then(function(cache) &#123; console.log(&#x27;Opened cache&#x27;); return cache.addAll(urlsToCache); &#125;) );&#125;); Here you can see we call caches.open() with our desired cache name, after which we call cache.addAll() and pass in our array of files. This is a chain of promises (caches.open() and cache.addAll()). The event.waitUntil() method takes a promise and uses it to know how long installation takes, and whether it succeeded or not. If all the files are successfully cached, then the service worker will be installed. If any of the files fail to download, then the install step will fail. This allows you to rely on having all the assets that you defined, but does mean you need to be careful with the list of files you decide to cache in the install step. Defining a long list of files will increase the chance that one file may fail to cache, leading to your service worker not getting installed. This is just one example, you can perform other tasks in the install event or avoid setting an install event listener altogether. Cache and return requestsNow that you’ve installed a service worker, you probably want to return one of your cached responses, right? After a service worker is installed and the user navigates to a different page or refreshes, the service worker will begin to receive fetch events, an example of which is below. 12345678910111213self.addEventListener(&#x27;fetch&#x27;, function(event) &#123; event.respondWith( caches.match(event.request) .then(function(response) &#123; // Cache hit - return response if (response) &#123; return response; &#125; return fetch(event.request); &#125; ) );&#125;); Here we’ve defined our fetch event and within event.respondWith(), we pass in a promise from caches.match(). This method looks at the request and finds any cached results from any of the caches your service worker created. If we have a matching response, we return the cached value, otherwise we return the result of a call to fetch, which will make a network request and return the data if anything can be retrieved from the network. This is a simple example and uses any cached assets we cached during the install step. If we want to cache new requests cumulatively, we can do so by handling the response of the fetch request and then adding it to the cache, like below. 123456789101112131415161718192021222324252627282930313233self.addEventListener(&#x27;fetch&#x27;, function(event) &#123; event.respondWith( caches.match(event.request) .then(function(response) &#123; // Cache hit - return response if (response) &#123; return response; &#125; return fetch(event.request).then( function(response) &#123; // Check if we received a valid response if(!response || response.status !== 200 || response.type !== &#x27;basic&#x27;) &#123; return response; &#125; // IMPORTANT: Clone the response. A response is a stream // and because we want the browser to consume the response // as well as the cache consuming the response, we need // to clone it so we have two streams. var responseToCache = response.clone(); caches.open(CACHE_NAME) .then(function(cache) &#123; cache.put(event.request, responseToCache); &#125;); return response; &#125; ); &#125;) );&#125;); What we are doing is this: Add a callback to .then() on the fetch request. Once we get a response, we perform the following checks: Ensure the response is valid. Check the status is 200 on the response. Make sure the response type is basic, which indicates that it’s a request from our origin. This means that requests to third party assets aren’t cached as well. If we pass the checks, we clone the response. The reason for this is that because the response is a Stream, the body can only be consumed once. Since we want to return the response for the browser to use, as well as pass it to the cache to use, we need to clone it so we can send one to the browser and one to the cache. Update a service workerThere will be a point in time where your service worker will need updating. When that time comes, you’ll need to follow these steps: Update your service worker JavaScript file. When the user navigates to your site, the browser tries to redownload the script file that defined the service worker in the background. If there is even a byte’s difference in the service worker file compared to what it currently has, it considers it new. Your new service worker will be started and the install event will be fired. At this point the old service worker is still controlling the current pages so the new service worker will enter a waiting state. When the currently open pages of your site are closed, the old service worker will be killed and the new service worker will take control. Once your new service worker takes control, its activate event will be fired. One common task that will occur in the activate callback is cache management. The reason you’ll want to do this in the activate callback is because if you were to wipe out any old caches in the install step, any old service worker, which keeps control of all the current pages, will suddenly stop being able to serve files from that cache. Let’s say we have one cache called &#39;my-site-cache-v1&#39;, and we find that we want to split this out into one cache for pages and one cache for blog posts. This means in the install step we’d create two caches, &#39;pages-cache-v1&#39; and &#39;blog-posts-cache-v1&#39; and in the activate step we’d want to delete our older &#39;my-site-cache-v1&#39;. The following code would do this by looping through all of the caches in the service worker and deleting any caches that aren’t defined in the cache allowlist. 12345678910111213141516self.addEventListener(&#x27;activate&#x27;, function(event) &#123; var cacheAllowlist = [&#x27;pages-cache-v1&#x27;, &#x27;blog-posts-cache-v1&#x27;]; event.waitUntil( caches.keys().then(function(cacheNames) &#123; return Promise.all( cacheNames.map(function(cacheName) &#123; if (cacheAllowlist.indexOf(cacheName) === -1) &#123; return caches.delete(cacheName); &#125; &#125;) ); &#125;) );&#125;); Rough edges and gotchasThis stuff is really new. Here’s a collection of issues that get in the way. Hopefully this section can be deleted soon, but for now these are worth being mindful of. If installation fails, we’re not so good at telling you about itIf a worker registers, but then doesn’t appear in chrome://inspect/#service-workers or chrome://serviceworker-internals, it’s likely failed to install due to an error being thrown, or a rejected promise being passed to event.waitUntil(). To work around this, go to chrome://serviceworker-internals and check “Open DevTools window and pause JavaScript execution on service worker startup for debugging”, and put a debugger statement at the start of your install event. This, along with Pause on uncaught exceptions, should reveal the issue. The defaults of fetch()No credentials by defaultWhen you use fetch, by default, requests won’t contain credentials such as cookies. If you want credentials, instead call: 123fetch(url, &#123; credentials: &#x27;include&#x27;&#125;) This behaviour is on purpose, and is arguably better than XHR’s more complex default of sending credentials if the URL is same-origin, but omitting them otherwise. Fetch’s behaviour is more like other CORS requests, such as &lt;img crossorigin&gt;, which never sends cookies unless you opt-in with &lt;img crossorigin=&quot;use-credentials&quot;&gt;. Non-CORS fail by defaultBy default, fetching a resource from a third party URL will fail if it doesn’t support CORS. You can add a no-CORS option to the Request to overcome this, although this will cause an ‘opaque’ response, which means you won’t be able to tell if the response was successful or not. 12345cache.addAll(urlsToPrefetch.map(function(urlToPrefetch) &#123; return new Request(urlToPrefetch, &#123; mode: &#x27;no-cors&#x27; &#125;);&#125;)).then(function() &#123; console.log(&#x27;All resources have been fetched and cached.&#x27;);&#125;); Handling responsive imagesThe srcset attribute or the &lt;picture&gt; element will select the most appropriate image asset at run time and make a network request. For service worker, if you wanted to cache an image during the install step, you have a few options: Install all the images that the &lt;picture&gt; element and the srcset attribute will request. Install a single low-res version of the image. Install a single high-res version of the image. Let’s assume you go for the low res version at install time and you want to try and retrieve higher res images from the network when the page is loaded, but if the high res images fail, fallback to the low res version. This is fine and dandy to do but there is one problem. If we have the following two images: Screen Density Width Height 1x 400 400 2x 800 800 In a srcset image, we’d have some markup like this: 1&lt;img src=&quot;image-src.png&quot; srcset=&quot;image-src.png 1x, image-2x.png 2x&quot; /&gt; If we are on a 2x display, then the browser will opt to download image-2x.png, if we are offline you could .catch() this request and return image-src.png instead if it’s cached, however the browser will expect an image that takes into account the extra pixels on a 2x screen, so the image will appear as 200x200 CSS pixels instead of 400x400 CSS pixels. The only way around this is to set a fixed height and width on the image. 12&lt;img src=&quot;image-src.png&quot; srcset=&quot;image-src.png 1x, image-2x.png 2x&quot; style=&quot;width:400px; height: 400px;&quot; /&gt; For &lt;picture&gt; elements being used for art direction, this becomes considerably more difficult and will depend heavily on how your images are created and used, but you may be able to use a similar approach to srcset. Learn moreThere is a list of documentation on service worker being maintained at https://jakearchibald.github.io/isserviceworkerready/resources that you may find useful. Source: https://developers.google.com/web/fundamentals/primers/service-workers","categories":[],"tags":[]},{"title":"React Error: Adjacent JSX elements must be wrapped in an enclosing tag","slug":"react-error-adjacent-jsx-elements-must-be-wrapped-in-an-enclosing-tag","date":"un44fin44","updated":"un00fin00","comments":true,"path":"2020/11/12/react-error-adjacent-jsx-elements-must-be-wrapped-in-an-enclosing-tag/","link":"","permalink":"https://jiaopucun.com/2020/11/12/react-error-adjacent-jsx-elements-must-be-wrapped-in-an-enclosing-tag/","excerpt":"","text":"SolutionMuch like myself and my shattered family relations, React doesn’t like siblings. More specifically, it doesn’t allow siblings in a return function while rendering. As of React v16.2.0 you can use &lt;React.Fragment&gt; to wrap the sibling elements. 123456return ( &lt;React.Fragment&gt; &lt;h2&gt;Heading&lt;/h2&gt; &lt;h3&gt;Sub Heading&lt;/h3&gt; &lt;/React.Fragment&gt;); Of course, if you import Fragment explicitly, you can just reference &lt;Fragment&gt; . 12345678import React, &#123; Component, Fragment &#125; from &#x27;react&#x27;;...return ( &lt;Fragment&gt; &lt;h2&gt;Heading&lt;/h2&gt; &lt;h3&gt;Sub Heading&lt;/h3&gt; &lt;/Fragment&gt;); You can also use the JSX syntax &lt;&gt;&lt;/&gt; but this requires babel v7 support. 123456return ( &lt;&gt; &lt;h2&gt;Heading&lt;/h2&gt; &lt;h3&gt;Sub Heading&lt;/h3&gt; &lt;/&gt;); Users of previous versions of React can wrap the siblings in a &lt;div&gt; or suitable DOM element. 123456return ( &lt;div&gt; &lt;h2&gt;Heading&lt;/h2&gt; &lt;h3&gt;Sub Heading&lt;/h3&gt; &lt;/div&gt;); If a parent element isn’t suitable and you’re pre version 16.2 (but post version 16), the return can be an array with the DOM elements comma separated, but each element must have it’s own “key” attribute to prevent the key warning for returned lists. 1234return [ &lt;h2&gt;Heading&lt;/h2&gt;, &lt;h3&gt;Sub Heading&lt;/h3&gt;]; Source: https://medium.com/@jmegilman/react-error-adjacent-jsx-elements-must-be-wrapped-in-an-enclosing-tag-32bc21c4434b","categories":[],"tags":[]},{"title":"Front-End Interview Questions - JavaScript","slug":"front-end-interview-javascript","date":"un22fin22","updated":"un00fin00","comments":true,"path":"2020/11/10/front-end-interview-javascript/","link":"","permalink":"https://jiaopucun.com/2020/11/10/front-end-interview-javascript/","excerpt":"","text":"h3[id] { cursor: pointer; } h3[id] + div { display: none; } 1. Explain event delegation Event delegation refers to the process of using event propagation (bubbling) to handle events at a higher level in the DOM than the element on which the event originated. It allows us to attach a single event listener, to a parent element, that will fire for all descendants, whether thoese descendants exist now or are added in the future. 2. Explain how this works in JavaScript Global context In the global execution context (outside of any function), this refers to the global object. 123456789// In web browsers, the window object is also the global object:console.log(this === window); // truea = 37;console.log(window.a); // 37this.b = &quot;MDN&quot;;console.log(window.b) // &quot;MDN&quot;console.log(b) // &quot;MDN&quot; Function context Inside a function, the value of this depends on how the function is called. In non-strict mode, the value of this defaults to the global object, which is window in a browser. 123456789function f1() &#123; return this;&#125;// In a browser:f1() === window; // true// In Node:f1() === globalThis; // true In strict mode, if the value of this is not set when entering an execution context, it remains as undefined. 123456function f2() &#123; &#x27;use strict&#x27;; // see strict mode return this;&#125;f2() === undefined; // true Class context The behavior of this in classes and functions is similar. Within a class constructor, this is a regular object. All non-static methods within the class are added to the prototype of this. 1234567891011class Example &#123; constructor() &#123; const proto = Object.getPrototypeOf(this); console.log(Object.getOwnPropertyNames(proto)); &#125; first()&#123;&#125; second()&#123;&#125; static third()&#123;&#125;&#125;new Example(); // [&#x27;constructor&#x27;, &#x27;first&#x27;, &#x27;second&#x27;] Arrow functions In arrow functions, this retains the value of the enclosing lexical context’s this. 3. Explain how prototypal inheritance works. The core idea of prototypal inheritance is that an object can point to another object and inherit all its properties. The main purpose is to allow multiple instances of an object to share common properties. 4. What is a promise? Where and how would you use promise? A promise is an object that my produce a single value some time in the future: either a resolved value, or a reason that’s not resolved. A promise may be in one of 3 possible states: fufilled, rejected, or pending. It can be chained with callback functions to handle the fufilled value or the reason for rejection. Complex async code made easier Promisifying XMLHttpRequest Chaining thens to transform values or run additional async actions one after another 5. What is the difference between while and do...while loops in JavaScript? The difference is a matter of when the condition is checked. A while loop checks the condition, then executes the loop. A do...while loop executes the loop and then checks the conditions. 6. Why you might want to create static class members? Static methods are used for the functionality that belongs to the class, it doesn't relate to a concrete class instance. Static properties are used when we’d like to store class-level data, also not bound to an instance. Static properties and methods are inherited. 7. How can you share code between files? Solution 1. Global object utils.js 123456789101112var add = function(num1, num2)&#123; return num1 + num2;&#125;;var subtract = function(num1, num2)&#123; return num1 - num2&#125;;window.globalobject = &#123; add: add, subtract: subtrack&#125;; file1.js 1globalobject.add(4, 4); Solution 2. CommonJS utils.js 123456789101112var add = function(num1, num2)&#123; return num1 + num2;&#125;;var subtract = function(num1, num2)&#123; return num1 - num2&#125;;module.exports = &#123; add, subtract&#125;; file1.js 1234var &#123; add, subtract &#125; = require(&#x27;./utils.js&#x27;);console.log(add(1, 2));console.log(subtract(1, 2)); *Solution 3. ESM utils.js 123456789101112var add = function(num1, num2)&#123; return num1 + num2;&#125;;var subtract = function(num1, num2)&#123; return num1 - num2&#125;;export default &#123; add, subtract&#125;; file1.js 123456import globalobject from &#x27;./utils.mjs&#x27;const &#123; add, subtract &#125; = globalobject;console.log(add(1, 2));console.log(subtract(1, 2)); Solution 4. JSONPutils.js 1234567var add = function(num1, num2)&#123; return num1 + num2;&#125;;var subtract = function(num1, num2)&#123; return num1 - num2&#125;; file1.js 1234567891011function jsonp(file, callback) &#123; var s = document.createElement(&#x27;script&#x27;); s.src = file; s.onload = callback; document.body.appendChild(s);&#125;jsonp(&#x27;./a.js&#x27;, function() &#123; console.log(add(1, 2)); console.log(subtract(1, 2));&#125;); 8.Explain the difference between synchronous and asynchronous functions. Synchronous functions: It waits for each operation to complete, after that only it executes the next operation. Asynchronous functions: It never waits for each operation to complete, rather it executes all operations in the first only. The result of each operation will be handled once the result is available. document.addEventListener('DOMContentLoaded', function() { jQuery('h3[id]').on('click', function(){ jQuery(this).next('div').slideToggle(); }) });","categories":[],"tags":[]},{"title":"Enable https for Apache on localhost","slug":"enable-https-for-apache-on-localhost","date":"un11fin11","updated":"un00fin00","comments":true,"path":"2020/11/09/enable-https-for-apache-on-localhost/","link":"","permalink":"https://jiaopucun.com/2020/11/09/enable-https-for-apache-on-localhost/","excerpt":"","text":"The simplest way to enable HTTPS for Apache on localhost: First save these server.crt &amp; server.key files into your apache/conf directory. Then open httpd.conf file and add following lines 123456789101112131415Listen 80Listen 443NameVirtualHost *:80NameVirtualHost *:443&lt;VirtualHost *:443&gt;# Your DocumentRoot DocumentRoot &quot;d:/wamp/www&quot; ServerName localhost SSLEngine on # Your files SSLCertificateFile &quot;d:/wamp/bin/apache/Apache2.4.4/conf/server.crt&quot; SSLCertificateKeyFile &quot;d:/wamp/bin/apache/Apache2.4.4/conf/server.key&quot;&lt;/VirtualHost&gt; Test your configuration 1234# navigate to Apache bin directorycd /Apache24/bin# Test httpd.conf validityhttpd -t","categories":[],"tags":[]},{"title":"Front-End Interview Questions - CSS","slug":"front-end-interview-css","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2020/11/04/front-end-interview-css/","link":"","permalink":"https://jiaopucun.com/2020/11/04/front-end-interview-css/","excerpt":"","text":"h3[id] { cursor: pointer; } 1. Explain your understanding of the box model and how you would tell the browser in CSS to render your layout in different box models. All HTML elements can be considered as boxes. In CSS we have two types of boxes - block boxes and inline boxes. The CSS box model is essentially a box that wraps around every HTML element. It consists of: margins, borders, padding, and the actual content. The image below illustrates the box model. There are two types of box models: the standard box model and the alternative box model. In the standard box model, if you give a box a width and a height attribute, this defines the size of the content box. Any padding and borders is then added to that width and height to get the total size taken up by the box. By default, browsers use the standard box model. But we can turn on the alternative model for an element by setting box-sizing: border-box on it. By doing this you are telling the browser to take the border box as the area defined by any size you set. 2. Implement the layout below Solution 1. Flexbox See the Pen NWrBjjR by Kang Chen (@rainyjune) on CodePen. Solution 2. Grid See the Pen fe-interview-css-grid-layout by Kang Chen (@rainyjune) on CodePen. Solution 3. inline-block See the Pen wvWxdmz by Kang Chen (@rainyjune) on CodePen. 3. comparing PNG, SVG, JPG, GIF and WebP Lossy Lossless Transparency Animation PNG Yes Yes GIF Yes Yes Yes JPG&#x2F;JPEG Yes WebP Yes Yes Yes Yes SVG Yes Yes Yes PNG: Good for images with sharp lines; Images that has a lot of colors or requires transparency. GIF: Images with few colors and does not require any advanced alpha transparency effect. JPG&#x2F;JPEG: For anything that is photo quality, though not for text. WebP: A new format from Google, though browser support is limited. SVG: High-quality graphics and animations that does not lose detail as their size changes. 4. Describe BFC (Block Formatting Context) and how it works. We can think of a BFC as like a mini layout inside a webpage. Once an element creates a BFC, everything is contained inside it. Some examples of how to enable a BFC: The root element of the document(&lt;html&gt;). Floats (elements where float isn’t none). Aboslutely positioned elements(elements where position is absolute or fixed) inline-blocks (elements with display: inline-block) Table cells (elements with display: table-cell) Flex items (direct children of the element with display: flex or inline-flex) if they are neither flex nor grid nor table containers themselves. Grid items (direct children of the element with display: grid or inline-grid) if they are neither flex nor grid nor table containers themselves. Block elements where overflow has a value other than visible and clip. What can we do with a BFC? The BFC prevents margins collapsing. A BFC stops content wrapping floats. 5. What is CSS selector specificity and how does it work? Specificity is a weight that is applied to a given CSS declaration. when multiple declarations have equal specificity, the last declaration found in the CSS is applied to the element. Specificity only applies when the same element is targeted by multiple declarations. The following list of selector types increases by specificity: Type selectors (e.g., h1) and pseudo-elements (e.g., ::before). Class selectors (e.g., .example), attributes selectors (e.g., [type=&quot;radio]) and pseudo-classes (e.g., :hover). ID selectors (e.g., #example); Universal selector (*), combinators (+, &gt;, ~ &#39; &#39;, ||) and negation pseudo-class (:not()) have no effect on specificity. Inline styles added to an element (e.g., style=&quot;font-weight: bold;&quot;) always overwrite any styles in external stylesheets, and can be thought of as having the highest specificity. 6. What’s the difference between “resetting” and “normalizing” CSS? Resetting: Aim to remove all built-in browser styling. You’re then supposed to add all decoration yourself. normalizing: Aim to make built-in browser styling consistent across browsers. You’re then supposed to add only the difference in decoration your design needs. I would use normalize.css in most cases, as it preserves useful defaults, will make CSS smaller and faster to write. 7. Describe floats and how hey work. There are left, right and none for float. Each value indicates how an element should float. When float is set, each element will get out of its normal flow and will be shifted to the specified direction, until it gets its container or another floated element. 8. Describe z-index and how stacking context is formed. The z-index is a property that allows developers to stack elements in the CSS. It's basically a 3D property so it allows the developer to choose how close the element appears. This is how stacking context is formed. Some examples: Root element of the document (&lt;html&gt;). Element with a position value absolute or relative and z-index value other than auto. Element with a position value fixed or sticky. Element with a opacity value less than 1. 9. How would you approach fixing browser-specific styling issues? Use normalize.css to create a consistant default style Use a separate stylesheet that only onloads when that specific browser is being used. 10. How do you serve your pages for feature-constrained browsers? Graceful degradation - The practice of building an application for modern browsers while ensuring it remains functional in older browsers. Progressive enhancement - The practice of building an application for a base level of user experience, but adding functional enhancements when a browser supports it. 11. What are the different ways to visually hide content (and make it available only for screen readers)? display:none or visibility:hidden - Hide content from all users, and is ignored by screen readers. hidden attribute - it functions the same as CSS display:none. width:0px, height:0px - Remove from the flow of the page, so most screen readers will not read it. text-indent: -10000px - Off the visible screen, screen readers will still read text. Absolutely positioning content off-screen - Visually hiding content that will be read by a screen reader12345678.sr-only &#123; position:absolute; left:-10000px; top:auto; width:1px; height:1px; overflow:hidden;&#125; CSS clip - This faily modern technique will hide or clip content that does not fit into a 1-pixel visible area. Reable by modern screen readers.12345678910&#123; clip: rect(1px, 1px, 1px, 1px); clip-path: inset(50%); height: 1px; width: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute;&#125; 12. Do you use CSS preprocessors? What are their advantages and disadvantages? The three most popular and stable CSS preprocessors are SaSS, LESS and Stylus. Advantages: Option to add variables, mixins and functions for code reusability Hierarchy Easy to join multiple files Disadvantages: Compilation takes longer time They can produce very large CSS files Extra Tooling and developer inconvenience 13. How would you implement a web design comp that uses non-standard fonts Web fonts with @font-face1@font-face &#123; font-family: Delicious; src: url(&#x27;Delicious-Roman.otf&#x27;); &#125; Then call it using font-family:1h3 &#123; font-family: Delicious, sans-serif; &#125; Using font service link1&lt;link href=&#x27;http://fonts.googleapis.com/css?family=Lato&#x27; rel=&#x27;stylesheet&#x27; type=&#x27;text/css&#x27;&gt; 14. Explain how a browser determines what elements match a CSS selector. Browsers match selectors from rightmost to left. Browsers filter out elements in the DOM according to the key selector, and traverse up its parent elements to determine matches. The shorter the length of the selector chain, the faster the browser can determine if that element matches the selector. For example with this selector p span, browsers firstly find all the &lt;span&gt; element, and traverse up its parent all the way up to the root to find the &lt;p&gt; element. For a particular &lt;span&gt;, as soon as it finds a &lt;p&gt;, it knows that the &lt;span&gt; matches and can stop its matching. 15. Can you explain the difference between px, em and rem as they relate to font sizing? px - The easiest measurement to use. It is not good for font-size, as it doesn’t respect user’s font preferences. em - An em is equal to the computed font-size of that element’s parent. Best for layouts and media queries. rem - rem values are relative to the root html element, not to the parent element. Best for font sizing and spacing (margin, padding, etc). https://www.digitalocean.com/community/tutorials/css-rem-vs-em-units document.addEventListener('DOMContentLoaded', function() { jQuery('h3[id]').on('click', function(){ jQuery(this).next('div').slideToggle(); }) });","categories":[],"tags":[]},{"title":"CSS Selectors vs. XPath","slug":"css-selectors-vs-xpath","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2020/11/04/css-selectors-vs-xpath/","link":"","permalink":"https://jiaopucun.com/2020/11/04/css-selectors-vs-xpath/","excerpt":"","text":"Advanced locator strategies such as CSS selector or XPath are both capable to find almost any HTML element on a web page. Cascading Style Sheets (CSS) is a style sheet language used for describing the look and formatting of a document written in HTML or XML. CSS Selectors are patterns used to select the styled element(s). XPath, the XML path language, is a query language for selecting nodes from an XML document. Locating elements with XPath works very well with a lot of flexibility. XPath uses path expressions to navigate through elements and attributes in an XML document. Let’s look at the following HTML code. 123&lt;div&gt; &lt;p class=&quot;dataflowkit expandable&quot;&gt;Some text in Paragraph&lt;/p&gt;&lt;/div&gt; In order to match the tag with CSS selector we should do something like this: 1p.dataflowkit.expandable XPath locator looks like: 1//p[@class=&#x27;dataflowkit expandable&#x27;] CSS selectors are better to use when dealing with classes, IDs and tag names. They are shorter and easier to read. Let’s look at the another HTML code. 123&lt;p&gt; First &lt;/p&gt;&lt;p&gt; Second &lt;/p&gt;&lt;p&gt; Third. Some text in Paragraph &lt;/p&gt; XPath locator for getting content of the third &lt;p&gt; tag is : 1//p[contains(text(), &#x27;Some text in Paragraph&#x27;)] How to achieve the same result with CSS Selector? This is not possible to match content inside &lt;p&gt; tag with Pure CSS Selector. There are no content selectors in CSS3 specification. We can match on an element, the name of an attribute in the element, and the value of a named attribute in an element. There is nothing for matching content within an element, though. But, what if we need to do a complex query that takes into consideration the element’s content you’re trying to find? There’s no other way except using XPath. Or CSS Selectors + jQuery is going to be a perfect substitute for XPath. In order to get content of the third &lt;p&gt; tag from the last example we can use jQuery :contains() Selector: 1p:contains(&#x27;Some text in Paragraph&#x27;) Alternatively you can consider sizzle pure-JavaScript CSS selector engine. Brief side-by-side comparison of CSS3 Selectors and XPath Expressions.The table below is adapted from this article. Closing NotesUse CSS Selectors for doing simple queries based on the attributes of the element. CSS Selectors tend to perform better, faster and more reliable than XPath in most browsers. But, for more complex queries, to overcome the impossibility of querying an element’s content with CSS Selectors, use XPath or jQuery selectors. Source: https://medium.com/dataflow-kit/css-selectors-vs-xpath-f368b431c9dc","categories":[],"tags":[]},{"title":"Getting CSS selector of an element","slug":"getting-css-selector-of-an-element","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2020/11/04/getting-css-selector-of-an-element/","link":"","permalink":"https://jiaopucun.com/2020/11/04/getting-css-selector-of-an-element/","excerpt":"","text":"It’s pretty easy to get the selector for an element with browser developer tools. Then you can paste it to somewhere you need it. The selector value looks like this: 1#wikiArticle &gt; ul:nth-child(14) The question is: How can we get the selector of an element using JavaScript? An element with an id attribute1234const getCssPath = element =&gt; &#123; const id = element.getAttribute(&#x27;id&#x27;); return id ? &#x27;#&#x27; + id : &#x27;&#x27;;&#125;; An element without the id attribute123456789101112131415161718192021const getCssPath = element =&gt; &#123; const tags = []; while (element.parentNode) &#123; if (element.id) &#123; tags.unshift(&#x27;#&#x27; + element.id); break; &#125; else &#123; if (element === document.body) &#123; tags.unshift(&#x27;body&#x27;); break; &#125; else &#123; let c = 1; // we use variable `c` to hold the value of the index for (let e = element; e.previousElementSibling; e = e.previousElementSibling, c++); tags.unshift(element.tagName.toLowerCase() + &#x27;:nth-child(&#x27; + c + &#x27;)&#x27;); &#125; element = element.parentNode; &#125; &#125; return tags.join(&#x27; &gt; &#x27;);&#125;; An element with the id attribute but should not be usedAn element may have the id attribute but we don’t know if its value is valid. So we could ignore its id attribute and use the long version selector instead: 123456789101112131415161718192021const getCssPath = (element, ignoreID = false) =&gt; &#123; const tags = []; while (element.parentNode) &#123; if (element.id &amp;&amp; !ignoreID) &#123; tags.unshift(&#x27;#&#x27; + element.id); break; &#125; else &#123; if (element === document.body) &#123; tags.unshift(&#x27;body&#x27;); break; &#125; else &#123; let c = 1; // we use variable `c` to hold the value of the index for (let e = element; e.previousElementSibling; e = e.previousElementSibling, c++); tags.unshift(element.tagName.toLowerCase() + &#x27;:nth-child(&#x27; + c + &#x27;)&#x27;); &#125; element = element.parentNode; &#125; &#125; return tags.join(&#x27; &gt; &#x27;);&#125;;","categories":[],"tags":[]},{"title":"Safari’s Beacon API problems","slug":"safari-beacon-issues","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2020/11/04/safari-beacon-issues/","link":"","permalink":"https://jiaopucun.com/2020/11/04/safari-beacon-issues/","excerpt":"","text":"The Beacon API is available in all current mainstream web browsers, and was introduced in Safari in version 11.11 (iOS 11.3 and macOS 10.13). However, Safari have had some trouble delivering on the promises of this web API; especially on iOS. The Beacon API is a web platform standard that was designed to allow webpages to send some data in an asynchronous POST request without causing a performance penalty for the visitor. It’s being used for all sorts of things, but its main benefit over other network request methods is that it allows for queuing a submission as the visitor leaves the page or the page is being unloaded. Many examples of the Beacon API execute it in a handler listening to either the beforeunload or unload events. These two events are fired as pages are being unloaded, and notably attaching event listeners to these events causes webpages to be unloaded when navigating away from them. This in turns means the pages can’t be cached and quickly restored when visitors move back and forth in their browser history or restore a previous browsing session. These events are also unsupported in iOS Safari. These are standard events and part of the web platform, but WebKit has chosen not to emit them. Because these events don’t work on iOS Safari, people misunderstand what’s going on and assume that the Beacon API is to blame when they fail to queue a request in event handlers attached to these events. Safari on macOS can use the beforeunload event but I’d discourage it because of its performance impact. So what is a web developer to do instead? Use the pagehide event instead. The event is issued when people navigate away from your page even when it’s not being unloaded and it doesn’t have the performance penalty of the other two events. Browser support is as good if not better than both the beforeunload and unload events. While this event is supported in iOS Safari, you haven’t been able to make any network requests in an attached event handler in Safari version 11.1 up to and including 12.1. The Beacon API was explicitly designed to allow the asynchronous queuing of network requests when navigating away from pages. This was fixed in Safari 12.2 (iOS 12.2 and macOS 10.14.4). The four event candidates the web platform gives us (in order) are beforeunload and unload (when unloading), pagehide, and visibilitychange. The first two are unsupported on iOS, the third didn’t work until Safari 12.2, so what about the forth? The Page Visibility API gives us a visibilitychange event after the pagehide event. However, neither macOS Safari or iOS Safari fires this event when navigating away from a page. It’s only fired as intended when pages go in and out of view (minimizing, off-screen, etc.). Chromium has the same behavior, and only Firefox implements the full specification here. Your only option is to use the pagehide event from Safari 12.2 and later, or to send your beacon earlier in the page lifecycle. This makes it difficult to track reading-depth and time-on-page, unfortunately. This is probably the event you want to use to capture page transitions in all browsers and on all platforms regardless. Below is the obligatory implementation example (be sure to read on further, though!) 1234567891011function handle_pagehide() &#123; navigator.sendBeacon( &#x27;https://example.net/beacon&#x27;, &#123;&#x27;demo&#x27;: &#x27;data&#x27;&#125; )&#125;window.addEventListener( &#x27;pagehide&#x27;, handle_pagehide); There are also a couple of other bugs that might get you when working with the Beacon API in Safari on iOS devices. Safari on iOS also can’t submit a beacon to an previously unvisited secure origin. A bug prevents it from validating HTTPS certificate chains for unknown origins. This issue was fixed in Safari 13 (iOS 13 and macOS 10.15). You can work around this issue by loading a resource from the beacon submission origin before you attempt to submit a beacon request to it. The fun doesn’t end there. Safari on iOS will also fail to queue beacons for pages that quickly redirect to another location. This may be an anti-tracking feature (Anti-Bounce Tracking?), though it may just be an optimization that’s throwing web platform compatibility to the winds. macOS Safari doesn’t exhibit the same behavior. In summary: Safari on iOS 13 should work much better with the Beacon API assuming you use it correctly. There isn’t much to be done with older versions, unfortunately. Alternatives like an asynchronous XmlHttpRequest or fetch won’t work in these versions either. The future for the Beacon API on iOS 13+ is looking bright like a lighthouse beacon, though! Sources: https://www.ctrl.blog/entry/safari-beacon-issues.html https://caniuse.com/beacon","categories":[],"tags":[]},{"title":"Installing PHP 7 on Windows 10","slug":"installing-php7-on-windows-10","date":"un11fin11","updated":"un00fin00","comments":true,"path":"2020/11/02/installing-php7-on-windows-10/","link":"","permalink":"https://jiaopucun.com/2020/11/02/installing-php7-on-windows-10/","excerpt":"","text":"Download PHP for Windows. I prefer to use 7.4.x (current release - 12), so I downloaded the latest VC15 x64 Thread Safe package. I downloaded the .zip file version of the VC15 x64 Thread Safe edition, under the PHP 7.4 heading. Expand the zip file into the path d:\\php7. Configure PHP to run correctly on your system: In the d:\\php7 folder, rename the file php.ini-development to php.ini. Edit the php.ini file in a text editor. Change the following settings in the file and save the file: 1. Uncomment the line that reads ;extension_dir = &quot;ext&quot; (remove the ; so the line is just extension_dir = &quot;ext&quot;). 2. In the section where there are a bunch of extension= lines, uncomment the following lines: extension&#x3D;php_gd2.dll extension&#x3D;php_curl.dll extension&#x3D;php_mbstring.dll extension&#x3D;php_openssl.dll extension&#x3D;php_pdo_mysql.dll extension&#x3D;php_pdo_sqlite.dll extension&#x3D;php_sockets.dll extension&#x3D;mysqli Add d:\\php7 to your Windows system path Open PowerShell or another terminal emulator (I generally prefer cmder), and type in php -v to verify PHP is working. 1234PS C:\\Users\\myuser&gt; php -vPHP 7.4.12 (cli) (built: Oct 27 2020 17:18:47) ( ZTS Visual C++ 2017 x64 )Copyright (c) The PHP GroupZend Engine v3.4.0, Copyright (c) Zend Technologies Configure PHP as an Apache moduleEdit httpd.conf,add index.php as a default file name: 1DirectoryIndex index.php index.html At the bottom of the file, add the following lines (change the PHP file locations if necessary): 12345# PHP7 moduleAddHandler application/x-httpd-php .phpAddType application/x-httpd-php .php .htmlLoadModule php7_module &quot;d:/php7/php7apache2_4.dll&quot;PHPiniDir &quot;d:/php7&quot; Save the configuration file and test it from the command line (Start &gt; Run &gt; cmd): 1httpd -t","categories":[],"tags":[]},{"title":"Object.create in JavaScript","slug":"object-create-in-javascript","date":"un11fin11","updated":"un00fin00","comments":true,"path":"2020/11/02/object-create-in-javascript/","link":"","permalink":"https://jiaopucun.com/2020/11/02/object-create-in-javascript/","excerpt":"","text":"The Object.create() method was introduced in ES5. It creates a new object, using its first argument as the prototype of that object: 1Object.create(proto, [propertiesObject]) The first argument could only an object or null, otherwise a TypeError will be thrown. 12345678910var plainObj = &#123; prop1: &#x27;prop1 value&#x27; &#125;;var fn = function(x) &#123; return x * 2;&#125;;var obj1 = Object.create(plainObj); // create a normal objectobj1.prop1; // &#x27;prop1 value&#x27;var obj2 = Object.create(null); // create a &#x27;null&#x27; objectvar obj3 = Object.create(fn); // create a &#x27;function&#x27; objectvar obj4 = Object.create(undefined); // TypeError was thrown You can pass null to create a new object that does not have a prototype, in this case the newly created object will not inherit anything, not event basic methods like toString(): 123var obj = Object.create(null); // create a &#x27;null&#x27; objectobj.toString(); // Uncaught TypeError: obj.toString is not a functionobj.valueOf(); // Uncaught TypeError: obj.valueOf is not a function If you want to create an ordinary empty object, pass Object.prototype or &#123;&#125;: 12345var obj1 = Object.create(&#123;&#125;);var obj2 = Object.create(Object.prototype); // obj2 is like &#123;&#125; or new Object().console.log(obj1.toString()); // [object Object]console.log(obj2.toString()); // [object Object] Object.create() also takes an optional second argument that describes the properties of the new object. These properties correspond to the second argument of Object.defineProperties(). 123456789101112131415161718192021222324// Example where we create an object with a couple of// sample properties. (Note that the second parameter// maps keys to *property descriptors*.)var o = Object.create(Object.prototype, &#123; // foo is a regular &#x27;value property&#x27; foo: &#123; writable: true, configurable: true, value: &#x27;hello&#x27; &#125;, // bar is a getter-and-setter (accessor) property bar: &#123; configurable: false, get: function() &#123; return 10; &#125;, set: function(value) &#123; console.log(&#x27;Setting `o.bar` to&#x27;, value); &#125; /* // with ES2015 Accessors our code can look like this get() &#123; return 10; &#125;, set(value) &#123; console.log(&#x27;Setting `o.bar` to&#x27;, value); &#125; */ &#125;&#125;); Classical inheritance with Object.create()Below is an example of how to use Object.create() to achieve classical inheritance. This is for a single inheritance, which is all that JavaScript supports. 12345678910111213141516171819202122232425262728293031// Shape - superclassfunction Shape() &#123; this.x = 0; this.y = 0;&#125;// superclass methodShape.prototype.move = function(x, y) &#123; this.x += x; this.y += y; console.info(&#x27;Shape moved.&#x27;);&#125;;// Rectangle - subclassfunction Rectangle() &#123; Shape.call(this); // call super constructor.&#125;// subclass extends superclassRectangle.prototype = Object.create(Shape.prototype);//If you don&#x27;t set Rectangle.prototype.constructor to Rectangle,//it will take the prototype.constructor of Shape (parent).//To avoid that, we set the prototype.constructor to Rectangle (child).Rectangle.prototype.constructor = Rectangle;var rect = new Rectangle();console.log(&#x27;Is rect an instance of Rectangle?&#x27;, rect instanceof Rectangle); // trueconsole.log(&#x27;Is rect an instance of Shape?&#x27;, rect instanceof Shape); // truerect.move(1, 1); // Outputs, &#x27;Shape moved.&#x27; If you wish to inherit from multiple objects, then mixins are a possibility. 123456789101112131415function MyClass() &#123; SuperClass.call(this); OtherSuperClass.call(this);&#125;// inherit one classMyClass.prototype = Object.create(SuperClass.prototype);// mixin anotherObject.assign(MyClass.prototype, OtherSuperClass.prototype);// re-assign constructorMyClass.prototype.constructor = MyClass;MyClass.prototype.myMethod = function() &#123; // do something&#125;; Object.assign() copies properties from the OtherSuperClass prototype to the MyClass prototype, making them available to all instances of MyClass. Object.assign() was introduced with ES2015 and can be polyfilled. If support for older browsers is necessary, jQuery.extend() or _.assign() can be used. PolyfillThis polyfill covers the main use case, which is creating a new object for which the prototype has been chosen but doesn’t take the second argument into account. Note that while the setting of null as [[Prototype]] is supported in the real ES5 Object.create, this polyfill cannot support it due to a limitation inherent in versions of ECMAScript lower than 5. 123456789101112131415161718 if (typeof Object.create !== &quot;function&quot;) &#123; Object.create = function (proto, propertiesObject) &#123; if (typeof proto !== &#x27;object&#x27; &amp;&amp; typeof proto !== &#x27;function&#x27;) &#123; throw new TypeError(&#x27;Object prototype may only be an Object: &#x27; + proto); &#125; else if (proto === null) &#123; throw new Error(&quot;This browser&#x27;s implementation of Object.create is a shim and doesn&#x27;t support &#x27;null&#x27; as the first argument.&quot;); &#125; if (typeof propertiesObject != &#x27;undefined&#x27;) &#123; throw new Error(&quot;This browser&#x27;s implementation of Object.create is a shim and doesn&#x27;t support a second argument.&quot;); &#125; function F() &#123;&#125; F.prototype = proto; return new F(); &#125;;&#125; Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create","categories":[],"tags":[]},{"title":"SameSite cookies","slug":"samesite-cookies","date":"un44fin44","updated":"un00fin00","comments":true,"path":"2020/10/29/samesite-cookies/","link":"","permalink":"https://jiaopucun.com/2020/10/29/samesite-cookies/","excerpt":"","text":"Modern browsers (including Chrome, Firefox, and Edge) are changing their bahavior to enforce more privacy-preserving defaults. Servers set cookies by sending the aptly-named Set-Cookie header in their response. The header looks like this: 1Set-Cookie: promo_shown=1; Max-Age=2600000; Secure When users on a secure connection and the cookie is less than a month old, then their browser will send this header in its request: 1Cookie: promo_shown=1 You can also access the cookies available to that site in JavaScript using document.cookie. Making an assignment to document.cookie will create or overwrite a cookie with that key. 12&gt; document.cookie = &quot;promo_shown=1; Max-Age=2600000; Secure&quot;&lt; &quot;promo_shown=1; Max-Age=2600000; Secure&quot; Reading document.cookie will output all the cookies accessible in the current context, with each cookie separated by a semicolon: 12&gt; document.cookie;&lt; &quot;promo_shown=1; color_theme=peachpuff; sidebar_loc=left&quot; What are first-party and third-party cookies?Cookies that match the domain of the current site, i.e. what’s displayed in the browser’s address bar, are referred to as first-party cookies. Similarly, cookies from domains other than the current site are referred to as third-party cookies. This isn’t an absolute label but is relative to the user’s context; the same cookie can be either first-party or third-party depending on which site the user is on at the time. Cross-site request forgery (CSRF) attacks rely on the fact that cookie are attached to any requests to a given origin, no matter who initiates the request. For example, if you visit evil.example then it can trigger requests to your-blog.example, and your browser will happily attach the associated cookies. If your blog isn’t careful with how it validates those requests then evil.example could trigger actions like deleting posts or adding their own content. Explicitly state cookie usage with the SameSite attributThe introduction of the SameSite attribute allows you to declare if your cookie should be restricted to a first-party or same-site context. It’s helpful to understand exactly what ‘site’ means here. The site is the combination of the domain suffix and the part of the domain just before it. For example, the www.web.dev domain is part of the web.dev site. If the user is on www.web.dev and requests an image from static.web.dev then that is a same-site request. The public suffix list defines this, so it’s not just top-level domains like .com but also includes services like github.io. That enables your-project.github.io and my-project.github.io to count as separate sites. If the user is on your-project.github.io and requests an image from my-project.github.io that’s a cross-site request. Strict: Cookies will only be sent in a first-party context.In user terms, the cookie will only be sent if the site for the cookie matches the site currently shown in the browser’s URL bar.This is good when you have cookies relating to functionality that will always be behind an initial navigation. Lax: Allows the cookie to be sent with these top-level navigations.This is a good choice for cookies affecting the display of the site. None: No restrictions will applied. The cookie will be sent in all requests - both cross-site and same-site.This means you can use None to clearly communicate that you intentionally want the cookie sent in a third-party context.If you provide a service that other sites consume such as widgets, embedded content, affiliate programes, advertising, or sign-in across multipile sites then you should use None to ensure your intent is clear. Changes to the default behavior without SameSite Cookies without a SameSite attribute will be treated as SameSite=Lax. Cookies with SameSite=None must also specify Secure, meaning they require a secure context. Both of these changes are backwards-compatible with browsers that have correctly implemented the previous version of the SameSite attribute, or just do not support it at all. By applying these changes to your cookies, you are making their intended use explicit rather than relying on the default behavior of the browser. Likewise, any clients that do not recognize SameSite=None as of yet should ignore it and carry on as if the attribute was not set. Warning A number of older versions of browsers including Chrome, Safari, and UC browser are incompatible with the new None attribute and may ignore or restrict the cookie. This behavior is fixed in current versions, but you should check your traffic to determine what proportion of your users are affected. You can see the list of known incompatible clients on the Chromium site. SameSite cookie recipesFor further detail on exactly how to update your cookies to successfully handle these changes to SameSite=None and the difference in browser behavior, head to the follow up article, SameSite cookie recipes. Ref:https://web.dev/samesite-cookies-explained/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite","categories":[],"tags":[]},{"title":"XDomainRequest - Restrictions, Limitations and Workarounds","slug":"xdomainrequest-restrictions-limitations-and-workarounds","date":"un44fin44","updated":"un00fin00","comments":true,"path":"2020/10/29/xdomainrequest-restrictions-limitations-and-workarounds/","link":"","permalink":"https://jiaopucun.com/2020/10/29/xdomainrequest-restrictions-limitations-and-workarounds/","excerpt":"","text":"Update: Internet Explorer 10+ supports CORS using XMLHTTPRequest. IE11 deprecates the XDomainRequest object and it is not available in IE11 Edge mode. In Internet Explorer 8, the XDomainRequest object was introduced. This object allows AJAX applications to make safe cross-origin requests directly by ensuring that HTTP Responses can only be read by the current page if the data source indicates that the response is public; in that way, the Same Origin Policy security guarantee is protected. Responses indicate their willingness to allow cross domain access by including the Access-Control-Allow-Origin HTTP response header with value * , or the exact origin of the calling page. When designing the new object, our top priority was to ensure that existing sites and services would not be put at risk. To that end, we imposed a number of restrictions on what sort of requests can be made with the XDomainRequest object. Most of the restrictions are designed to help prevent Cross-Site Request Forgery (CSRF) attacks against legacy services. The restrictions and the reasoning behind them are described by the rest of this post. 1. The target URL must be accessed using the HTTP or HTTPS protocols. This one is simple—because the object relies on a HTTP response header for access control, the object requires that the target URL be HTTP or HTTPS so that it can examine the response headers to obtain permission to make the response available to the caller. 2. The target URL must be accessed using only the HTTP methods GET and POST In order to ensure that the new object did not increase the attack surface against existing servers and services, we elected to restrict the HTTP methods (verbs) it may call to GET and POST. HTML 4.01 forms are restricted to these same methods, which means that any service which is at risk from the XDomainRequest object would also be vulnerable to attack from a cross-origin HTML Form. Since HTML Forms have existed for well over a decade, it’s assumed that applications have been hardened against attack from the GET and POST methods. We could not assume that requests issued using other methods would be similarly handled by servers. Beyond that concern, most other methods that developers would hope to use (e.g. WebDAV &#x2F; REST methods) also require sending custom HTTP Headers, and: 3. No custom headers may be added to the request This restriction is similar to #2; we wanted to ensure that the XDomainRequest object would not allow an attacker to issue a request that a HTML Form could not issue. This is important because the Access-Control-Allow-Origin header isn’t available until after the response is returned, so there’s no way to tell before the request is issued whether or not the server is willing to accept cross-domain HTTP requests. Without these restrictions, a “Fire and Forget” CSRF attack could take place against a legacy server, even if the server doesn’t return the Access-Control-Allow-Origin header. All XDomainRequest-issued requests are sent with an Origin header, indicating the Origin (scheme+hostname) of the caller. 4. Only text&#x2F;plain is supported for the request’s Content-Type header In the original incarnation of the XDomainRequest object, we allowed specification of the Content-Type for a POST request. It was pointed out that this violated our goal of emitting only requests that HTML Forms can issue, because HTML Forms are limited to sending data in three different content types: text&#x2F;plain, application&#x2F;x-www-urlencoded, and multipart&#x2F;form-data. In particular, it was pointed out that some AJAX server libraries would blindly assume that if they received a request with a SOAP or JSON Content-Type, then the client must either be trusted or Same Origin (because HTML itself previously offered no way to issue cross-origin requests with that Content-Type). Unfortunately, when we fixed this problem in a later IE8 Beta, we went a bit too far; we restricted the content type to text&#x2F;plain but didn’t allow the caller to specify that the data was in application&#x2F;x-www-urlencoded form. This is problematic because server-side frameworks (e.g. ASP, ASPNET, etc) will only automatically parse a request’s fields into name-value pairs if the x-www-urlencoded content type is specified. Note: As of 2014, XDomainRequest doesn’t appear to send any Content-Type header at all. It’s not clear to me when this changed. To workaround this issue, server code that currently processes HTML Forms must be rewritten to manually parse the request body into name-value pairs when receiving requests from XDomainRequest objects. This makes adding support for the XDomainRequest object more difficult than it would be otherwise. 5. No authentication or cookies will be sent with the request In order to prevent misuse of the user’s ambient authority (e.g. cookies, HTTP credentials, client certificates, etc), the request will be stripped of cookies and credentials and will ignore any authentication challenges or Set-Cookie directives in the HTTP response. XDomainRequests will not be sent on previously-authenticated connections, because some Windows authentication protocols (e.g. NTLM&#x2F;Kerberos) are per-connection-based rather than per-request-based. Sites that wish to perform authentication of the user for cross-origin requests can use explicit methods (e.g. tokens in the POST body or URL) to pass this authentication information without risking the user’s ambient authority. 6. Requests targeted to Intranet URLs may only be made from the Intranet Zone As the table in the documentation shows, XDomainRequest restricts Internet-Zone pages from making requests to Local Intranet-based resources. This security precaution isn’t directly enforced by HTML Forms, but Internet Explorer’s Zone Elevation security feature provides a similar protection for navigations, of which Form Submissions are simply a specialized type. 7. Requests must be targeted to the same scheme as the hosting page This restriction means that if your AJAX page is at http:&#x2F;&#x2F;example.com, then your target URL must also begin with HTTP. Similarly, if your AJAX page is at https:&#x2F;&#x2F;example.com, then your target URL must also begin with HTTPS. It was definitely our intent to prevent HTTPS pages from making XDomainRequests for HTTP-based resources, as that scenario presents a Mixed Content Security Threat which many developers and most users do not understand. However, this restriction is overly broad, because it prevents HTTP pages from issuing XDomainRequests targeted to HTTPS pages. While it’s true that the HTTP page itself may have been compromised, there’s no reason that it should be forbidden from receiving public resources securely. Worst of all, the Same Scheme restriction means that web developers testing their pages locally using the file:&#x2F;&#x2F; scheme will find that all of the XDomainRequests are blocked because file:&#x2F;&#x2F; doesn’t match either http:&#x2F;&#x2F; or https:&#x2F;&#x2F;, which are the only valid target schemes (point #1). To workaround this issue, web developers must host their pages on a local web server (e.g. IIS, the Visual Studio hosting server, etc). To workaround this limitation, you can build a postMessage-Proxy-for-XDR. Despite the restrictions and unintended limitations, the XDomainRequest object provides powerful functionality. As servers that support the CORS specification become more common, the object will only get more useful. Update: Internet Explorer 10 now supports CORS using XMLHTTPRequest which should be preferred to the now-deprecated XDomainRequest object. -Eric Note: We intended to support COMET-streaming with XDomainRequest, but AJAX developers may need to workaround one small bug in the object’s support for streaming responses. Note: In IE8, all XDomainRequests will fail with an error when the user is browsing in InPrivate Browsing mode. This bug was fixed in Internet Explorer 9. Ref:https://docs.microsoft.com/zh-cn/archive/blogs/ieinternals/xdomainrequest-restrictions-limitations-and-workarounds","categories":[],"tags":[]},{"title":"Get all unique values in a JavaScript array","slug":"get-all-unique-values-in-a-javascript-array","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2020/10/28/get-all-unique-values-in-a-javascript-array/","link":"","permalink":"https://jiaopucun.com/2020/10/28/get-all-unique-values-in-a-javascript-array/","excerpt":"","text":"Use Object {} to prevent dulicates1234567function uniqueArray1(arr) &#123; const obj = &#123;&#125;; arr.forEach((element) =&gt; &#123; obj[typeof element + element] = element; &#125;); return Object.keys(obj).map((item) =&gt; obj[item]);&#125; Use helper array []12345678910function uniqueArray2(arr) &#123; var result = []; for (var i = 0, len = arr.length; i &lt; len; i++) &#123; var element = arr[i]; if (result.indexOf(element) === -1) &#123; result.push(element); &#125; &#125; return result;&#125; Use filter + indexOf12345function uniqueArray3(arr) &#123; return arr.filter(function (value, index, array) &#123; return array.indexOf(value) === index; &#125;);&#125; Use ES6 […new Set()]123function uniqueArray4(arr) &#123; return [...new Set(arr)];&#125;","categories":[],"tags":[]},{"title":"Unicode in JavaScript","slug":"unicode-in-javascript","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2020/10/28/unicode-in-javascript/","link":"","permalink":"https://jiaopucun.com/2020/10/28/unicode-in-javascript/","excerpt":"","text":"How JavaScript uses Unicode internallyDespite the fact that a JavaScript source file can have any kind of encoding, JavaScript uses UTF-16 internally. JavaScript strings are all UTF-16 sequences. According to Section 6 of the ECMAScript specification: ECMAScript source text is represented as a sequence of characters in the Unicode character encoding, version 3.0 or later. […] ECMAScript source text is assumed to be a sequence of 16-bit code units for the purposes of this specification. […] If an actual source text is encoded in a form other than 16-bit code units, it must be processed as if it was first converted to UTF-16. Using Unicode in a stringA unicode sequence can be inside any string using the format \\xXXXX: 1var s1 = &#x27;\\u00E9&#x27;; // é A sequnce can be created by combining two unicode sequences: 1var s2 = &#x27;\\u0065\\u0301&#x27; //é They both generate an accented e, but they are two different strings, and str2 is considered to be 2 characters long: 1234&quot;é&quot;.length // 1s1.length //1s2.length //2s1 == s2 // false You can also write a string combining a unicode character with a plain char, as internally it’s actually the same thing: 1234const s3 = &#x27;e\\u0301&#x27; //és3.length === 2 //trues2 === s3 //trues1 !== s3 //true NormalizationES6&#x2F;ES2015 introduced the normalize() method on the string prototype: 123s1 === s3 // falses1.normalize() === s3.normalize() // true EmojisEmojis are Unicode characters, so they are perfectly valid to be used in strings: 1var s4 = &#x27;🐶&#x27;; The 🐶 symbol, which is U+1F436, is traditionally encoded as \\uD83D\\uDC36 (called surrogate pair). Get the proper length of a string1s4.length // 2 One easy way in ES6+ is to use the spread operator: 1;[...&#x27;🐶&#x27;].length //1 ES6 Unicode code point escapesES6&#x2F;ES2015 introduced a way to represent Unicode points in the astral planes (any Unicode code point requiring more than 4 chars), by wrapping the code in graph parentheses \\u&#123;XXXXX&#125;. The dog 🐶 symbol, which is U+1F436, can be represented as \\u&#123;1F436&#125; instead of having to combine two unrelated Unicode code points, like we showed before: \\uD83D\\uDC36. But length calculation still does not work correctly, because internally it’s converted to the surrogate pair shown above. Encoding ASCII charsThe first 128 characters can be encoded using the special escaping character \\x, which only accepts 2 characters: 12&#x27;\\x61&#x27; // a&#x27;\\x2A&#x27; // * This will only work from \\x00 to \\xFF, which is the set of ASCII characters.","categories":[],"tags":[]},{"title":"How to flatten an array in JavaScript?","slug":"how-to-flatten-an-array-in-javascript","date":"un11fin11","updated":"un00fin00","comments":true,"path":"2020/10/26/how-to-flatten-an-array-in-javascript/","link":"","permalink":"https://jiaopucun.com/2020/10/26/how-to-flatten-an-array-in-javascript/","excerpt":"","text":"Array.prototype.flat()123456789const arr1 = [0, 1, 2, [3, 4]];console.log(arr1.flat());// expected output: [0, 1, 2, 3, 4]const arr2 = [0, 1, 2, [[[3, 4]]]];console.log(arr2.flat(2));// expected output: [0, 1, 2, [3, 4]] reduce + concat + isArray + recursivity12345678910const arr = [1, 2, [3, 4, [5, 6]]];// to enable deep level flatten use recursion with reduce and concatfunction flatDeep(arr, d = 1) &#123; return d &gt; 0 ? arr.reduce((acc, val) =&gt; acc.concat(Array.isArray(val) ? flatDeep(val, d - 1) : val), []) : arr.slice();&#125;;flatDeep(arr, Infinity);// [1, 2, 3, 4, 5, 6] ES312345678910111213141516171819function flat(arr, depth) &#123; depth = typeof depth === &#x27;number&#x27; ? depth : 1; var flattened = []; var isArray = function(arg) &#123; return Object.prototype.toString.call(arg) === &#x27;[object Array]&#x27;; &#125;; var doFlat = function(arr, depth) &#123; for (var i = 0; i &lt; arr.length; i++) &#123; var el = arr[i]; if (isArray(el) &amp;&amp; depth &gt; 0) &#123; doFlat(el, depth - 1); &#125; else &#123; flattened.push(el); &#125; &#125; &#125;; doFlat(arr, depth); return flattened;&#125;","categories":[],"tags":[]},{"title":"Showing posts as titles only in Hexo","slug":"showing-posts-as-titles-only-in-Hexo","date":"un11fin11","updated":"un00fin00","comments":true,"path":"2020/10/26/showing-posts-as-titles-only-in-Hexo/","link":"","permalink":"https://jiaopucun.com/2020/10/26/showing-posts-as-titles-only-in-Hexo/","excerpt":"","text":"Now I’m running this blog with Hexo 5.2, it works fine, just an annoying problem there. Hexo displays a posts list on the home page, both titles and contents are shown by default, which gives a poor performance when loading the page, especially if there are third party iframes in them; and besides, site visitors might not interested in posts contents at the first glance, what they want to known is what topics your blog is talking about. So, I am going to modify the default Hexo theme, to show post titles only on the home page. Create your own themeIn fact, I am not going to modify the default theme directly. It’s always a best practice not to modify the official theme, creating your own one base on the default one could be a good idea. Here, I am creating a new theme called liyuan. You can do this just by copying the landscape directory to a new liyuan directory in the same directory. Then use it as the current theme, edit _config.yml: 1theme: liyuan Understanding the layoutAll pages use the default layout.ejs as a base template. For the home page, the index.ejs template file is used to describe the appearance of it: 1&lt;%- partial(&#x27;_partial/archive&#x27;, &#123;pagination: 2, index: true&#125;) %&gt; _partial/archive.ejs is used to render what a post looks like: 12345&lt;% if (pagination == 2)&#123; %&gt; &lt;% page.posts.each(function(post)&#123; %&gt; &lt;%- partial(&#x27;article&#x27;, &#123;post: post, index: true&#125;) %&gt; &lt;% &#125;) %&gt;&lt;% &#125;%&gt; Now we’ve got the actual template for rendering a post - _partial/article.ejs. We can’t modify this file, because it’s the template file used by both the home page and post pages. We can create a duplicate and rename to article-homepage.ejs. Remove the div.article-entry tag from the source code of article-homepage.ejs. Finally, edit _partial/archive.ejs to use our new article-homepage.ejs template: 12345&lt;% if (pagination == 2)&#123; %&gt; &lt;% page.posts.each(function(post)&#123; %&gt; &lt;%- partial(&#x27;article-homepage&#x27;, &#123;post: post, index: true&#125;) %&gt; &lt;% &#125;) %&gt;&lt;% &#125;%&gt;","categories":[],"tags":[]},{"title":"Allow access to Site directory in Apache on macOS","slug":"allow-access-to-site-directory-in-apache-on-macos","date":"un55fin55","updated":"un00fin00","comments":true,"path":"2020/10/23/allow-access-to-site-directory-in-apache-on-macos/","link":"","permalink":"https://jiaopucun.com/2020/10/23/allow-access-to-site-directory-in-apache-on-macos/","excerpt":"","text":"To allow access to the Sites directory, you have to add the following to /etc/apache2/httpd.conf: 123&lt;DirectoryMatch &quot;/Users/.*/Sites&quot;&gt; Require all granted&lt;/DirectoryMatch&gt; The default Apache configuration is set to denied on /, so you have to explicitly allow access to everything.","categories":[],"tags":[]},{"title":"How to install Apache web server on Windows","slug":"how-to-install-apache-web-server-on-windows","date":"un55fin55","updated":"un00fin00","comments":true,"path":"2020/10/23/how-to-install-apache-web-server-on-windows/","link":"","permalink":"https://jiaopucun.com/2020/10/23/how-to-install-apache-web-server-on-windows/","excerpt":"","text":"Step 1: Download the package fileWe’re going to use the unofficial Windows binary from Apache Lounge. This version has performance and stability improvements over the official Apache distribution, it’s provided as a manually installable ZIP file from www.apachelounge.com/download/. Step 2: Extract the filesWe’ll install Apache in C:/Apache24, so extract the ZIP file to the root of the C:/ drive. Apache can be installed anywhere on your system, but you’ll need to change SRVROOT configuration to point to your unzipped location — suh as E:/Apache24. Step 3: Configure ApacheApache is configured with the text file conf/httpd.conf contained in the Apache folder. Open it with your favorite text editor. Note that all file path settings use a forward slash (/) rather than the Windows backslash. If you installed Apache anywhere other than C:/Apache24, now is a good time to search and replace all references to C:/Apache24. There are several lines you should change for your production environment: Line 60, listen to all requests on port 80: 1Listen *:80 Line 162, enable mod-rewrite by removing the # (optional, but useful): 1LoadModule rewrite_module modules/mod_rewrite.so Line 227, specify the server domain name: 1ServerName localhost:80 Line 224, allow .htaccess overrides: 1AllowOverride All Step 4: Change the Document Root (optional)By default, Apache returns files found in its C:/Apache24/htdocs folder. It’s good to use a folder on an another drive or partition to make backups and re-installation easier. For the purposes of this example, we’ll create a folder called D:WebPages and change httpd.conf accordingly: Line 251, set the root: 1DocumentRoot &quot;D:/WebPages&quot; Line 252: 1&lt;Directory &quot;D:/WebPages&quot;&gt; Step 5: Test your installationYour Apache configuration can now be tested. Open a command box (Start &gt; Run &gt; cmd) and enter: 1234# navigate to Apache bin directorycd /Apache24/bin# Test httpd.conf validityhttpd -t It should say “Syntax OK”. If not, correct any httpd.conf configuration errors and retest until none appear. Step 6: install Apache as a Windows serviceThe easiest way to start Apache is to add it as a Windows service. Open a new command prompt as administrator, and enter the following: 12cd /Apache24/binhttpd -k install Open the Control Panel, Administrative Tools, then Services and double-click Apache2.4. Set the Startup type to “Automatic” to ensure Apache starts every time you boot your PC. Alternatively, set the Startup type to “Manual” and launch Apache whenever you choose using the command “net start Apache2.4”. Step 7: Test the Web ServerCreate a file named index.html in Apache’s web page root (either htdocs or D:\\WebPages) and add a little HTML code: 12345678&lt;html&gt; &lt;head&gt; &lt;title&gt;Testing Apache&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Apache is working!&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; Ensure Apache has started successfully, open a web browser and enter the address http://localhost/. If all goes well, your test page should appear. In general, most problems will be caused by an incorrect setting in the httpd.conf configuration file. Refer to the Apache documentation if you require further information.","categories":[],"tags":[]},{"title":"Insertion Sort in JavaScript","slug":"insertion-sort-in-javascript","date":"un44fin44","updated":"un00fin00","comments":true,"path":"2020/10/22/insertion-sort-in-javascript/","link":"","permalink":"https://jiaopucun.com/2020/10/22/insertion-sort-in-javascript/","excerpt":"","text":"Insertion sort is one of sorting algorithms, to better understand it, you could imagine you are playing cards. Every time you get a new card, compare it with the existing ones, then put it in the right place. While you comparing, we start it from right to left. The following pictures gives a demonstration of how this sort happended. ImplementationLet’s start building our insertionSort function. step 11234function insertionSort(arr) &#123; var length = arr.length; return arr;&#125; It’s a best practice to save the array length in a variable. step 21234567function insertionSort(arr) &#123; var length = arr.length; for (var i = 0; i &lt; length; i++) &#123; // &#125; return arr;&#125; We use a for loop to go over the array. step 31234567function insertionSort(arr) &#123; var length = arr.length; for (var i = 0; i &lt; length; i++) &#123; let current = arr[i]; &#125; return arr;&#125; Save current value in a variable for comparison. step 41234567891011function insertionSort(arr) &#123; var length = arr.length; for (var i = 0; i &lt; length; i++) &#123; let current = arr[i]; let j; for (j = i - 1; j &gt;= 0 &amp;&amp; arr[j] &gt; current; j--) &#123; arr[j + 1] = arr[j]; &#125; &#125; return arr;&#125; We set up an inner loop in order to put current value in the right place. step 5123456789101112function insertionSort(arr) &#123; var length = arr.length; for (var i = 0; i &lt; length; i++) &#123; let current = arr[i]; let j; for (j = i - 1; j &gt;= 0 &amp;&amp; arr[j] &gt; current; j--) &#123; arr[j + 1] = arr[j]; &#125; arr[j + 1] = current; &#125; return arr;&#125; Finally assign the the value current to the correct index position. ComplexityBest case: nAverage: n2Worst: n2Memory: 1Stable: Yes","categories":[],"tags":[]},{"title":"sessionStorage in iframes","slug":"sessionStorage-in-iframes","date":"un33fin33","updated":"un00fin00","comments":true,"path":"2020/10/21/sessionStorage-in-iframes/","link":"","permalink":"https://jiaopucun.com/2020/10/21/sessionStorage-in-iframes/","excerpt":"","text":"A Quick RefreshersessionStorage is similar to localStorage, the main difference is that data in sessionStorage is cleared when the page session ends, while data in localStorage persists. A page session lasts as long as the browser is open, and survices over page reloads and restores. Each tab&#x2F;window has its own sessionStorage, even if they are opening the same URL. Closing a tab&#x2F;window ends the session and clears data in sessionStorage. Data stored in sessionStorage is also origin seperated. sessionStorage in iframesSame site iframesIf you have an iframe embedded in a webpage and they are in the same domain, is the data in sessionStorage shared between the iframe and its parent document? Let’s write the following code snippet to demonstrate. In the example above, iframe.html and iframe2.html are embedded in index.html. We set one item on each html file seperately. We are using a timer to display all items available, now these items are accessible on both side. So, we come to the conclusion that: data stored in sessionStorage is visible within a browser tab&#x2F;window, including iframes from the same origin. Cross Site iframesBased on knowledge we have known, data in sessionStorage is not shared across origins. We can make a guess data stored in sessionStorage is not shared between a webpage and container iframes from another domain. Let’s verify what we have guessed is correct or not. In the example above, we put index.html in the domain https://descriptive-fluffy-nylon.glitch.me/, the two iframes files are hosted on a different origin https://dolomite-brainy-vermicelli.glitch.me/. The parent webpage can only access the indexhtml item, which was set on the index.html. However, iframe.html and iframe2.html are sharing the same data because they are from the same origin. conclusion: sessionStorage is bound to the origin, however it is shared between iframes in the same tab, if these iframes come from the same origin.","categories":[],"tags":[]},{"title":"what is symbol used for in JavaScript","slug":"what-is-symbol-used-for-in-JavaScript","date":"un22fin22","updated":"un00fin00","comments":true,"path":"2020/10/20/what-is-symbol-used-for-in-JavaScript/","link":"","permalink":"https://jiaopucun.com/2020/10/20/what-is-symbol-used-for-in-JavaScript/","excerpt":"","text":"A new primitive data type was introduced in ES2015 - Symbol. It’s relative new, you might not be familiar with it yet. In this article we will explain what a Symbol is and how it can be used in real life apps. What is symbol?The data type symbol is a primitive data type, it is one of JavaScript’s 6 primitive data types: string, number, boolean, undefined, bigint and symbol. There is a Symbol() function available, it returns a value of type symbol. Every value returned is unique, you can never create two identical values, even though calling this function with the same parameter. Symbol can accept an optional description as parameter, but only for debugging purpose. 12345678910111213const symbol1 = Symbol();const symbol2 = Symbol();const symbol3 = Symbol(&#x27;foo&#x27;);const symbol4 = Symbol(&#x27;foo&#x27;);console.log(typeof symbol1); // &quot;symbol&quot;console.log(symbol1 === symbol2); // falseconsole.log(symbol3 === symbol4); // false// Use the description property to get the its description.console.log(symbol3.description); // &quot;foo&quot;. In case you want to get an already created symbol, you can use Symbol.for() method. This method creates a symbol available in a global symbol registry list if the given key was not found, otherwise the existing one was returned. 12345678910111213Symbol.for(&#x27;a&#x27;); // create a new global symbolSymbol.for(&#x27;a&#x27;); // retrieve the already created symbolconsole.log(Symbol.for(&#x27;bar&#x27;) === Symbol.for(&#x27;bar&#x27;));// expected output: trueconsole.log(Symbol(&#x27;bar&#x27;) === Symbol(&#x27;bar&#x27;));// expected output: falseconst symbol1 = Symbol.for(&#x27;foo&#x27;);console.log(symbol1.toString()); // &quot;Symbol(foo)&quot;console.log(Symbol.for(&#x27;foo&#x27;) === symbol1); // true Use cases1.Used as an identifier for object propertiesBy using symbols, you don’t need to worry about key collisions in objects, this is the data type’s primary purpose. 123456789101112let thirdPartyObject = &#123; prop1: &#x27;3rd party prop1&#x27;&#125;;thirdPartyObject[Symbol(&#x27;prop1&#x27;)] = &#x27;changed&#x27;;console.log(thirdPartyObject);// &#123;prop1: &quot;3rd party prop1&quot;, Symbol(prop1): &quot;changed&quot;&#125;// Others may try to add their own prop1 attributethirdPartyObject[Symbol(&#x27;prop1&#x27;)] = &#x27;changed again&#x27;;console.log(thirdPartyObject);// &#123;prop1: &quot;3rd party prop1&quot;, Symbol(prop1): &quot;changed&quot;, Symbol(prop1): &quot;changed again&quot;&#125; 2. Enable private properties.The original motivation for introducing symbols is to enable private properties in JavaScript. Symbols are not enumerable in for…in iterations. 12345678910let obj = &#123;&#125;obj[Symbol(&#x27;a&#x27;)] = &#x27;a&#x27;obj[Symbol.for(&#x27;b&#x27;)] = &#x27;b&#x27;obj[&#x27;c&#x27;] = &#x27;c&#x27;obj.d = &#x27;d&#x27;for (let i in obj) &#123; console.log(i) // logs &quot;c&quot; and &quot;d&quot;&#125; Symbol-keyed properties are ignored when using JSON.stringify() as well: 12JSON.stringify(&#123;[Symbol(&#x27;foo&#x27;)]: &#x27;foo&#x27;&#125;)// &#x27;&#123;&#125;&#x27; However, they are not 100% hidden, you can still get these properties, use Object.getOwnPropertySymbols() or Reflect.ownKeys(): 12345678910let obj = &#123;&#125;obj[Symbol(&#x27;a&#x27;)] = &#x27;a&#x27;obj[Symbol.for(&#x27;b&#x27;)] = &#x27;b&#x27;obj[&#x27;c&#x27;] = &#x27;c&#x27;obj.d = &#x27;d&#x27;console.log(Reflect.ownKeys(obj)); // [&quot;c&quot;, &quot;d&quot;, Symbol(a), Symbol(b)]console.log(Object.getOwnPropertySymbols(obj)); // [Symbol(a), Symbol(b)] Predefined SymbolsIt has several properties that expose several members of built-in object. These are predefined symbols, they are also called well-known symbols. Symbol.asyncIterator - A method that returns the default AsyncIterator for an object. Used by for await…of. Symbol.hasInstance - A method determining if a constructor object recognizes an object as its instance. Used by instanceof. Symbol.isConcatSpreadable - A Boolean value indicating if an object should be flattened to its array elements. Used by Array.prototype.concat(). Symbol.iterator - A method returning the default iterator for an object. Used by for…of. Symbol.match - A method that matches against a string, also used to determine if an object may be used as a regular expression. Used by String.prototype.match(). Symbol.matchAll - A method that returns an iterator, that yields matches of the regular expression against a string. Used by String.prototype.matchAll(). Symbol.replace - A method that replaces matched substrings of a string. Used by String.prototype.replace(). Symbol.search - A method that returns the index within a string that matches the regular expression. Used by String.prototype.search(). Symbol.split - A method that splits a string at the indices that match a regular expression. Used by String.prototype.split(). Symbol.species - A constructor function that is used to create derived objects. Symbol.toPrimitive - A method converting an object to a primitive value. Symbol.toStringTag - A string value used for the default description of an object. Used by Object.prototype.toString(). Symbol.unscopables - An object value of whose own and inherited property names are excluded from the with environment bindings of the associated object.","categories":[],"tags":[]},{"title":"embedding an image using markdown in Hexo","slug":"embedding-an-image-using-markdown-in-Hexo","date":"un22fin22","updated":"un00fin00","comments":true,"path":"2020/10/20/embedding-an-image-using-markdown-in-Hexo/","link":"","permalink":"https://jiaopucun.com/2020/10/20/embedding-an-image-using-markdown-in-Hexo/","excerpt":"","text":"This approach should be the easist way to embed an image in a markdown file in Hexo. hexo-renderer-marked 3.1.0 introduced a new option that allows you to embed an image in markdown. InstallationChange to your Hexo blog directory, and run the following command in your terminal: 1npm install hexo-renderer-marked --save OptionsTo enable this plugin, edit _config.yml: 1234post_asset_folder: truemarked: prependRoot: true postAsset: true Once enabled, an asset image will be automatically resolved to its corresponding post’s path. For example, “image.jpg” is located at “&#x2F;2020&#x2F;01&#x2F;02&#x2F;foo&#x2F;image.jpg”, meaning it is an asset image of “&#x2F;2020&#x2F;01&#x2F;02&#x2F;foo&#x2F;“ post, ![](image.jpg) will be rendered as &lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt;.","categories":[],"tags":[]},{"title":"Create your blog with Hexo on GitHub Pages","slug":"Create-your-blog-with-Hexo-on-GitHub-Pages","date":"un22fin22","updated":"un00fin00","comments":true,"path":"2020/10/20/Create-your-blog-with-Hexo-on-GitHub-Pages/","link":"","permalink":"https://jiaopucun.com/2020/10/20/Create-your-blog-with-Hexo-on-GitHub-Pages/","excerpt":"","text":"prerequisitesFirst of all, make sure you have Node.js and Git installed on your machine. HexoRun the following commands in your favorite terminal: 12345npm install hexo-cli -ghexo init blogcd blognpm installhexo server It might takes a few minutes to finish, If everything goes smoothly, you have successfully installed Hexo. Now visit http://localhost:4000 in your browser, you can see your hexo blog is running: To create a new post, run the following in your terminal: 1$ hexo new &quot;My New Post&quot; Refresh you blog page, you will notice the new post has been displayed. GitHub PagesThere are two ways of deploying to GitHub Pages. use GitHub Actions - It works in both public and private repository. One-command deployment - If you prefer not to upload your source folder to GitHub. I would prefer the second solution because I don’t want to upload my source folder to a public GitHub repository. Install hexo-deployer-git.1npm install hexo-deployer-git --save Add the following configurations to _config.yml (remove existing lines if any)12345deploy: type: git repo: https://github.com/&lt;username&gt;/&lt;project&gt; # example, https://github.com/hexojs/hexojs.github.io branch: gh-pages Run hexo clean &amp;&amp; hexo deploy Check the webpage at username.github.io.","categories":[],"tags":[]}],"categories":[{"name":"Backend","slug":"Backend","permalink":"https://jiaopucun.com/categories/Backend/"},{"name":"Testing","slug":"Testing","permalink":"https://jiaopucun.com/categories/Testing/"},{"name":"Debugging","slug":"Debugging","permalink":"https://jiaopucun.com/categories/Debugging/"},{"name":"Frontend","slug":"Frontend","permalink":"https://jiaopucun.com/categories/Frontend/"},{"name":"Tools","slug":"Tools","permalink":"https://jiaopucun.com/categories/Tools/"},{"name":"Database","slug":"Database","permalink":"https://jiaopucun.com/categories/Database/"}],"tags":[{"name":"hapi","slug":"hapi","permalink":"https://jiaopucun.com/tags/hapi/"},{"name":"MySQL","slug":"MySQL","permalink":"https://jiaopucun.com/tags/MySQL/"},{"name":"Knex","slug":"Knex","permalink":"https://jiaopucun.com/tags/Knex/"},{"name":"React","slug":"React","permalink":"https://jiaopucun.com/tags/React/"},{"name":"Jest","slug":"Jest","permalink":"https://jiaopucun.com/tags/Jest/"},{"name":"TypeScript","slug":"TypeScript","permalink":"https://jiaopucun.com/tags/TypeScript/"},{"name":"Vite","slug":"Vite","permalink":"https://jiaopucun.com/tags/Vite/"},{"name":"Node","slug":"Node","permalink":"https://jiaopucun.com/tags/Node/"},{"name":"ESLint","slug":"ESLint","permalink":"https://jiaopucun.com/tags/ESLint/"},{"name":"SWR","slug":"SWR","permalink":"https://jiaopucun.com/tags/SWR/"},{"name":"Vue","slug":"Vue","permalink":"https://jiaopucun.com/tags/Vue/"},{"name":"VS Code","slug":"VS-Code","permalink":"https://jiaopucun.com/tags/VS-Code/"},{"name":"Prettier","slug":"Prettier","permalink":"https://jiaopucun.com/tags/Prettier/"},{"name":"Strapi","slug":"Strapi","permalink":"https://jiaopucun.com/tags/Strapi/"},{"name":"Nodemailer","slug":"Nodemailer","permalink":"https://jiaopucun.com/tags/Nodemailer/"},{"name":"Database","slug":"Database","permalink":"https://jiaopucun.com/tags/Database/"},{"name":"PostgreSQL","slug":"PostgreSQL","permalink":"https://jiaopucun.com/tags/PostgreSQL/"},{"name":"AWS","slug":"AWS","permalink":"https://jiaopucun.com/tags/AWS/"},{"name":"Linux","slug":"Linux","permalink":"https://jiaopucun.com/tags/Linux/"},{"name":"Ant Design","slug":"Ant-Design","permalink":"https://jiaopucun.com/tags/Ant-Design/"},{"name":"Ant Design Pro","slug":"Ant-Design-Pro","permalink":"https://jiaopucun.com/tags/Ant-Design-Pro/"},{"name":"Adminer","slug":"Adminer","permalink":"https://jiaopucun.com/tags/Adminer/"},{"name":"SQLite","slug":"SQLite","permalink":"https://jiaopucun.com/tags/SQLite/"},{"name":"database","slug":"database","permalink":"https://jiaopucun.com/tags/database/"},{"name":"NPM","slug":"NPM","permalink":"https://jiaopucun.com/tags/NPM/"},{"name":"Yarn","slug":"Yarn","permalink":"https://jiaopucun.com/tags/Yarn/"},{"name":"Apache","slug":"Apache","permalink":"https://jiaopucun.com/tags/Apache/"},{"name":"Git","slug":"Git","permalink":"https://jiaopucun.com/tags/Git/"},{"name":"proxy","slug":"proxy","permalink":"https://jiaopucun.com/tags/proxy/"},{"name":"Disqus","slug":"Disqus","permalink":"https://jiaopucun.com/tags/Disqus/"},{"name":"Hexo","slug":"Hexo","permalink":"https://jiaopucun.com/tags/Hexo/"},{"name":"ESM","slug":"ESM","permalink":"https://jiaopucun.com/tags/ESM/"},{"name":"CommonJS","slug":"CommonJS","permalink":"https://jiaopucun.com/tags/CommonJS/"},{"name":"Docusaurus","slug":"Docusaurus","permalink":"https://jiaopucun.com/tags/Docusaurus/"},{"name":"HTTPS","slug":"HTTPS","permalink":"https://jiaopucun.com/tags/HTTPS/"},{"name":"AWS EC2","slug":"AWS-EC2","permalink":"https://jiaopucun.com/tags/AWS-EC2/"},{"name":"Cloudflare","slug":"Cloudflare","permalink":"https://jiaopucun.com/tags/Cloudflare/"},{"name":"GitHub","slug":"GitHub","permalink":"https://jiaopucun.com/tags/GitHub/"},{"name":"DNS","slug":"DNS","permalink":"https://jiaopucun.com/tags/DNS/"},{"name":"Domain","slug":"Domain","permalink":"https://jiaopucun.com/tags/Domain/"},{"name":"WordPress","slug":"WordPress","permalink":"https://jiaopucun.com/tags/WordPress/"},{"name":"rollup.js","slug":"rollup-js","permalink":"https://jiaopucun.com/tags/rollup-js/"},{"name":"Chrome DevTools","slug":"Chrome-DevTools","permalink":"https://jiaopucun.com/tags/Chrome-DevTools/"},{"name":"Charles","slug":"Charles","permalink":"https://jiaopucun.com/tags/Charles/"}]}